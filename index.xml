<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Homepage on Yihui Xie | 谢益辉</title>
    <link>https://yihui.name/</link>
    <description>Recent content in Homepage on Yihui Xie | 谢益辉</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://yihui.name/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>陈芸</title>
      <link>https://yihui.name/cn/2018/08/chen-yun/</link>
      <pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/cn/2018/08/chen-yun/</guid>
      <description>
        &lt;p&gt;书接&lt;a href=&#34;https://yihui.name/cn/2018/08/reading/&#34;&gt;前文&lt;/a&gt;。我看了《浮生六记》上管贻葄的题诗之后，觉得有些&lt;a href=&#34;https://yihui.name/cn/2017/10/zhao-couplet/&#34;&gt;空泛&lt;/a&gt;，不甚合我意，于是不才如我，斗胆抄起键盘也来凑几首致敬芸娘：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;琵琶识文一女流，斋戒数载为君痘。&lt;br /&gt;
持家上敬亦下和，文君长卿重聚首。&lt;/p&gt;

&lt;p&gt;乐天为师青莲友，妙手烹庖沧浪游。&lt;br /&gt;
家无五花千金裘，泰然拔钗且沽酒。&lt;/p&gt;

&lt;p&gt;缄默忍责孤影瘦，襟怀堪令男儿羞。&lt;br /&gt;
良辰已逝灯如豆，浮生聚散归一粥。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;读完《浮生六记》，除了敬佩这位芸娘之外，我也在琢磨沈复这个人。&lt;a href=&#34;https://book.douban.com/review/6412127/&#34;&gt;有人忿忿说他是渣男&lt;/a&gt;。嗨，这评论有些暴戾。虽然我在看书的时候也隐隐觉得沈复有些无能，但也不能就这么一板子打死。他有不少花草园艺字画方面的小技能，问题是在那个时代都不能用来养家糊口。俗话说贫贱夫妻百事哀，何况亲友中还有这么多混球（父母暴躁、弟弟无赖、弟媳冷漠），在这种条件下还盲目做好人就等于把自己往火坑里推。用沈复自己在《坎坷记愁》开头的话说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;（余）多情重诺，爽直不羁，转因之为累。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然他在持家方面严重不及格、生活基本不能自理，但对外品行还算不错，不算坏人。要是沈复再世，我一定要向他推销《&lt;a href=&#34;https://yihui.name/cn/2018/03/12-rules/&#34;&gt;人生十二法则&lt;/a&gt;》之二和三：要爱自己，以及谨慎择友。封建社会的无条件礼法真是害人：君子礼法害了沈复（可惜了他鄙弃八股之路的勇气了），妇道害了陈芸。其实哪个时代没有无条件的礼法呢？而且每个时代的人都觉得自己遵守的礼法是天经地义。今之视昔，犹后之视今。&lt;/p&gt;

&lt;p&gt;陈芸之死，起因于为夫谋妾失败，然后血疾发作，不巧又因此事被搞不清楚状况的公公严厉训斥（以为结交娼妓），病情越发严重。因不想为看病增加本来就很拮据的家庭的负担，她还不肯吃药。不仅如此，还拼死绣佛经一部。最后骨肉分离，悲痛欲绝。这整个过程就是一步步不可逆转地走向死亡。从今天的角度看，这每一步都有避开的可能。比如在家庭和睦、有儿有女的情况下为何非要主动为丈夫纳妾？每次被公婆训斥本都可以解释，她都选择不解释。&lt;/p&gt;

&lt;p&gt;我认为社会进步的本质就是痛苦的相对平均化，而悲剧的来源之一就是痛苦的极度不平均，也就是有人承担了过量的痛苦，换来其他人去掉少量痛苦。比如陈芸的公公得知儿媳结交娼妓之后的痛苦和陈芸生病的痛苦显然极不平等（换句话说，一个人生一场气和另一个人丢条命，孰轻孰重？），而盲目的孝道则让陈芸必须选择宁可蒙冤被逐出门也不能辩解。现代社会仍然有很多这样痛苦不均的例子，若一些人能作出很小的让步，另外一（大）群人的幸福感会整体大大提高。比如同性恋长期不被社会主流接受，源于异性恋盲目相信异性恋是天经地义、且无法理解或感知同性恋不能见光的痛苦，这痛苦远大于异性恋眼中同性恋带来的不适。再比如期刊排版规则：若期刊负责人能稍微让步他坚信的审美，作者则可以节省大把的时间；浪费时间的痛苦和美观方面的痛苦，孰轻孰重？查理芒格总告诫我们要避免极端强烈的意识形态，这一点其实很难；我们看别人的强烈意识形态可能会觉得愚蠢，但同时会觉得自己信奉的强烈意识形态一定是对的。&lt;/p&gt;

&lt;p&gt;好像说远了。&lt;/p&gt;

&lt;p&gt;《浮生六记》若不是被人从地摊上发现手稿，我们今天恐怕也读不到，陈芸这个人也就彻底从历史中消失了。由此看来，历史上堙没的奇人应该是不计其数。沈复在《闺房记乐》开头说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;东坡云：“事如春梦了无痕”，苟不记之笔墨，未免有辜彼苍之厚。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;得亏他这样想，不然我们更看不到这《浮生六记》。但即便他用笔墨记下来了，我想仍然有很多东西都丢失了，比如全篇一共只提到了陈芸的两句诗：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;秋侵入影瘦，霜染菊花肥。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以及：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;兽云吞落日，弓月弹流星。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;她生平应该不止写过这么两句。限于笔墨，我们也只能知道这么多了。这两句一定程度上大概反映了清朝联句这种形式的流行。&lt;/p&gt;

&lt;p&gt;沈复在描写芸娘时有一个古文中极难见到的亮点，就是写了女子的幽默，比如白字连篇和吃腐乳的故事（病入膏肓还开“吃粥记”的玩笑）。如此聪明伶俐之人，却为礼法束缚送了性命。&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>为何阅读</title>
      <link>https://yihui.name/cn/2018/08/reading/</link>
      <pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/cn/2018/08/reading/</guid>
      <description>
        &lt;p&gt;看了一篇文章讲&lt;a href=&#34;https://lithub.com/what-does-immersing-yourself-in-a-book-do-to-your-brain/&#34;&gt;沉浸式阅读对大脑的作用&lt;/a&gt;。文章略长，生词也多，看得我昏昏欲睡，但主旨很简单，可以以一词概括，就是共情（empathy）。&lt;/p&gt;

&lt;p&gt;阅读让我们进入他人的生活，体验他人的感受、想象、思考。这个“他人”可能是故事的主人公，也可能是作者。体验是为了理解。文章提到现代人的认知耐心（cognitive patience）在减弱，也就是我们越来越没有耐心去理解别人，尤其是与自己观点相左的人；某种程度上，我们把持有不同观点的人直接当成敌人。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] Robinson lamented what she saw as a political drift among many people in the United States toward seeing those different from themselves as the &amp;ldquo;sinister other.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不过文章评论中有人指出 Robinson 本人是个伪君子，我对美帝名人不了解，不知此事真伪，感觉略讽刺。&lt;/p&gt;

&lt;p&gt;文章还引用一部关于 Lewis 的剧，说“阅读是为了让我们知道我们不孤独”。这倒是跟我前面&lt;a href=&#34;https://yihui.name/cn/2018/05/great-novelists/&#34;&gt;谈毛姆时&lt;/a&gt;的最后一段是差不多的意思。&lt;/p&gt;

&lt;p&gt;读这篇文章时我们可能会有一个很自然的问题：阅读只是接收信息的一种方式，难道其它方式就不能让我们学会共情吗？其实作者自己也提到了这一点，但她的回答我完全不满意。她认为沉浸式阅读的共情质量更高，而我并没有看到明显的证据。看电影、看纪录片、玩游戏都可以让人高质量地浸入故事中，体验他人的喜怒哀乐。&lt;/p&gt;

&lt;p&gt;对这个问题，我个人的回答是，阅读有别于其它接受信息的方式在于，阅读通常是主动的（小说除外，尤其是推理、悬疑小说），其它方式通常是用计牵着你的鼻子走。阅读文字与观看画面更重要的区别是，阅读给人留以巨大的想象空间，阅读的过程相当于每个读者用各自的脑子重新演了一部戏。这样的戏，外人很难提供给你，一切都靠你自己负责，没有&lt;a href=&#34;https://yihui.name/cn/2017/02/nakasendo/&#34;&gt;背景音乐&lt;/a&gt;，没有脂粉梳妆，没有颜值担当，笑点、泪点、尿点都因人而异。&lt;/p&gt;

&lt;p&gt;说到沉浸，前几天&lt;a href=&#34;https://yihui.name/cn/2018/08/nature/&#34;&gt;我刚提过&lt;/a&gt;沈复的《闲情记趣》。以前我并不了解沈复以及他的《浮生六记》，因为看了《闲情记趣》觉得很好，于是也特意找来《浮生六记》看看。遗憾的是六记已经散佚其二（看今人可以写博客用 GIT 分布式存储是多么幸福），只剩四记：闺房记乐、闲情记趣、坎坷记愁、浪游记快。可能是我对旅游不太感兴趣的缘故，这四记中，前三记读来都让人有沉浸之感，尤其是《坎坷记愁》。其中芸娘死前对一生的一句话总结让人唏嘘：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;芸强颜笑曰：“昔一粥而聚，今一粥而散，若作传奇，可名《吃粥记》矣。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这一句话，放在读书之时，可让人停下来感慨几分钟。我想，若是换作真人演戏，我们会有时间去体会它吗？&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Create GIFs with gifski in knitr Documents</title>
      <link>https://yihui.name/en/2018/08/gifski-knitr/</link>
      <pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/en/2018/08/gifski-knitr/</guid>
      <description>
        

&lt;p&gt;Last month Jeroen announced &lt;a href=&#34;https://ropensci.org/technotes/2018/07/23/gifski-release/&#34;&gt;the &lt;strong&gt;gifski&lt;/strong&gt; package&lt;/a&gt;, which looked pretty cool to me. While thinking about improving the &lt;strong&gt;gganimate&lt;/strong&gt; support in &lt;strong&gt;knitr&lt;/strong&gt; (per &lt;a href=&#34;https://twitter.com/thomasp85/status/1021456429855780865&#34;&gt;Thomas&amp;rsquo;s request&lt;/a&gt;), I learned a little more about &lt;strong&gt;gifski&lt;/strong&gt;. The usage seems to be quite straightforward to me, so I wrote a hook function in &lt;strong&gt;knitr&lt;/strong&gt; today to support this package, which means you can easily create a GIF animation from a code chunk now if you have installed &lt;strong&gt;gifski&lt;/strong&gt;, and at least version 1.20.14 of &lt;strong&gt;knitr&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#39;gifski&#39;)
if (packageVersion(&#39;knitr&#39;) &amp;lt; &#39;1.20.14&#39;) {
  remotes::install_github(&#39;yihui/knitr&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic usage&lt;/h2&gt;

&lt;p&gt;To make use of &lt;strong&gt;gifski&lt;/strong&gt;, you may set the chunk option &lt;code&gt;animation.hook=&#39;gifski&#39;&lt;/code&gt;. Below is an R Markdown example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;```{r, animation.hook=&#39;gifski&#39;}
for (i in 1:2) {
  pie(c(i %% 2, 6), col = c(&#39;red&#39;, &#39;yellow&#39;), labels = NA)
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will produce the &amp;ldquo;Pac man&amp;rdquo; below (assuming the output format is HTML):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/163582/44246516-30c93000-a1a4-11e8-8aa5-8876e51a227f.gif&#34; alt=&#34;A gif animation of Pac man&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;customization&#34;&gt;Customization&lt;/h2&gt;

&lt;p&gt;The main things you may want to tweak for the GIF animation are perhaps the dimension (controlled by &lt;code&gt;fig.width&lt;/code&gt; and &lt;code&gt;fig.height&lt;/code&gt;, or &lt;code&gt;fig.dim&lt;/code&gt;), and &lt;code&gt;interval&lt;/code&gt; (the delay between frames), e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;```{r, animation.hook=&#39;gifski&#39;, interval=0.2, fig.width=4}
for (i in 1:2) {
  pie(c(i %% 2, 6), col = c(&#39;red&#39;, &#39;yellow&#39;), labels = NA)
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are other options that you can customize, but I guess you probably don&amp;rsquo;t care (e.g., &lt;code&gt;dpi&lt;/code&gt;). Note that the graphical device must produce PNG images since &lt;strong&gt;gifski&lt;/strong&gt; only supports PNG at the moment, which means the chunk option &lt;code&gt;dev&lt;/code&gt; must be a PNG device (e.g., &lt;code&gt;&#39;png&#39;&lt;/code&gt; or &lt;code&gt;&#39;CairoPNG&#39;&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&#34;ffmpeg-also-works&#34;&gt;FFmpeg also works&lt;/h2&gt;

&lt;p&gt;You can also use &lt;a href=&#34;https://ffmpeg.org&#34;&gt;FFmpeg&lt;/a&gt; to create a GIF animation, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;```{r, animation.hook=&#39;ffmpeg&#39;, ffmpeg.format=&#39;gif&#39;, dev=&#39;jpeg&#39;}
for (i in 1:2) {
  pie(c(i %% 2, 6), col = c(&#39;red&#39;, &#39;yellow&#39;), labels = NA)
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without setting &lt;code&gt;ffmpeg.format=&#39;gif&#39;&lt;/code&gt;, you will get a video instead (the default format is WebM). Gifski claims to be &amp;ldquo;the fastest GIF encoder in the universe&amp;rdquo;, and the package &lt;strong&gt;gifski&lt;/strong&gt; does not have system dependencies (you don&amp;rsquo;t need to install external software like FFmpeg), so if you want to create a GIF, it is probably the best way to go.&lt;/p&gt;

&lt;h2 id=&#34;please-test-it-yourself&#34;&gt;Please test it yourself&lt;/h2&gt;

&lt;p&gt;Please help me test the development version of &lt;strong&gt;knitr&lt;/strong&gt;, and I&amp;rsquo;ll appreciate your feedback. Many thanks to the R ninja Jeroen Ooms for the &lt;strong&gt;gifski&lt;/strong&gt; package! For &lt;strong&gt;gganimate&lt;/strong&gt; users, I guess a tighter integration between &lt;strong&gt;knitr&lt;/strong&gt; and &lt;strong&gt;gganimate&lt;/strong&gt; should be coming soon. &lt;a href=&#34;https://github.com/thomasp85/gganimate/issues/134&#34;&gt;Please stay tuned&lt;/a&gt;.&lt;/p&gt;

        
        &lt;script&gt;location.href=&#39;https://yihui.name/en/2018/08/gifski-knitr/&#39;;&lt;/script&gt;
        
      </description>
    </item>
    
    <item>
      <title>不解之针法谜</title>
      <link>https://yihui.name/cn/2018/08/knitting-method/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/cn/2018/08/knitting-method/</guid>
      <description>
        &lt;p&gt;几年前我就发现大米袋子的封口针法有神奇之处。如果解开封口线的第一步得当，那么接下来一扯就可以把整条线（确切地说是两条线）轻松扯下来。如果第一步解错了，那就完蛋了，得一个针眼一个针眼去解或剪开。多数时候都运气好，拿剪子把线头随便一剪，线就可以扯开了。偶尔运气不好，没解对，又赶上强迫症发作，不想把线剪成一小段一小段的，那么可能会坐地上解十几分钟。&lt;/p&gt;

&lt;p&gt;我一直没搞明白那线是怎么缝的，明明感觉是一环套一环，怎么会一扯就全开呢。感觉这针法设计比较巧妙，随便放狗搜了一下，可能&lt;a href=&#34;https://www.bilibili.com/video/av26126670/&#34;&gt;这个针法&lt;/a&gt;有相似之处吧。我空间想象能力有限，仍然没理解是怎么回事。这可能会成为我的永久之谜。&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>甜与辣</title>
      <link>https://yihui.name/cn/2018/08/sweet-spicy/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/cn/2018/08/sweet-spicy/</guid>
      <description>
        &lt;p&gt;早年间做菜最让我惊奇的调味组合是糖醋。因为我吃菜通常不喜甜（仅限于菜），所以我也不太研究放糖的菜。直到一日看见一个偷懒版本的糖醋排骨，试了一下才知道，原来糖醋味这么简单，而且也很好吃。除此之外，我基本只在做宫保鸡丁、红烧肉、红烧鸡块和慢炖牛肉时会用糖，还有香辣虾里有时也稍微放一点糖。&lt;/p&gt;

&lt;p&gt;在川菜馆子里吃过很多次辣子鸡，但从来没想过那味道（不是纯辣）是怎么来的，以为有什么特别的秘方。直到去年看了一眼菜谱之后才知道，原来我感觉奇特的味道只是糖而已，就这么简单。辣子鸡麻烦的地方就是要炸两遍，溅油又费时，但炸出来放糖炒炒确实好吃。没想到我最爱的辣与最不爱的甜放一起也是美味。&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>makeActiveBinding(): The Most Magical Hidden Gem in Base R</title>
      <link>https://yihui.name/en/2018/08/make-active-binding/</link>
      <pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/en/2018/08/make-active-binding/</guid>
      <description>
        

&lt;p&gt;Of course, this is a follow-up post on my previous follow-up post on &lt;a href=&#34;https://yihui.name/en/2018/07/lazy-evaluation/&#34;&gt;lazy evaluation&lt;/a&gt;. One commenter (Michael&amp;mdash;I believe I know this Michael) of that post pointed out the function &lt;code&gt;makeActiveBinding()&lt;/code&gt; in base R. I have almost forgotten it. It was once the most magical function in my eyes, and was the foundation of one of my only two academic papers, &amp;ldquo;&lt;a href=&#34;https://projecteuclid.org/euclid.ss/1408368571&#34;&gt;Reactive Programming for Interactive Graphics&lt;/a&gt;&amp;rdquo; (Xie &lt;em&gt;et al&lt;/em&gt; 2014).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/163582/43879425-a5818b36-9b69-11e8-98d8-51db61c66a2f.png#border&#34; alt=&#34;Figure 2 in the paper&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Basically &lt;code&gt;makeActiveBinding()&lt;/code&gt; binds a function to a symbol in an environment. The magic is that, when you try to &lt;em&gt;get&lt;/em&gt; the value of this symbol, the function is executed without arguments, and when you try to &lt;em&gt;set&lt;/em&gt; the value of the symbol, the function is executed with the value as its argument.&lt;/p&gt;

&lt;h2 id=&#34;a-toy-example&#34;&gt;A toy example&lt;/h2&gt;

&lt;p&gt;That may be difficult to understand if you have just heard of this function for the first time. Let me give an example by rewriting the &amp;ldquo;sword&amp;rdquo; sound effect I used in &lt;a href=&#34;https://github.com/yihui/knitr-talks/blob/master/useR2014/2014-knitr-ninja-Yihui-Xie.R&#34;&gt;my useR! 2014 talk&lt;/a&gt; (a few of you might still remember &lt;a href=&#34;https://yihui.name/en/2014/07/a-few-notes-on-user2014/&#34;&gt;that&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xfun::pkg_load2(&#39;beepr&#39;)  # install beepr if necessary

makeActiveBinding(&#39;sword&#39;, function(i) {
  if (missing(i)) i = sample(1:11, 1)
  beepr::beep(i)
  i
}, globalenv())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you type &lt;code&gt;sword&lt;/code&gt; in the R console and hit Return, you should hear a random beep. If you assign a number to &lt;code&gt;sword&lt;/code&gt;, you should hear the beep corresponding to that number, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sword = 11  # sword
sword = 7   # shotgun
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you try to &lt;em&gt;get&lt;/em&gt; the value of &lt;code&gt;sword&lt;/code&gt;, the argument &lt;code&gt;i&lt;/code&gt; of the function will be missing. Basically the test &lt;code&gt;if (missing(i))&lt;/code&gt; inside the function tells you whether you are trying to get or set the value of &lt;code&gt;sword&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;a-toy-implementation-of-shiny&#34;&gt;A toy implementation of Shiny&lt;/h2&gt;

&lt;p&gt;Active bindings can be a lot of fun to play with, simply because a function is executed no matter if you try to obtain or set the value of an object. When you have a function, you have the full control of the world. I have shown an example of brushing a scatterplot in the paper I mentioned in the beginning of this post. Next I&amp;rsquo;m going to show a super naive implementation of &lt;a href=&#34;https://shiny.rstudio.com&#34;&gt;Shiny&lt;/a&gt; based on active bindings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;input  = new.env()
output = list()
# a dependency table, e.g. list(input1 = c(&#39;output1&#39;, &#39;output2&#39;))
deps = list()
# name of the current output being rendered
output_cur = NA
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A new input in the system is an active binding in the &lt;code&gt;input&lt;/code&gt; environment. When we need to get the value of the input element, we try to connect it with the output element that actually uses this input value, and store this information in the dependency table &lt;code&gt;deps&lt;/code&gt;, so that we know which output elements to render when the input element is changed later.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;add_input = function(ID, init = 0) {
  makeActiveBinding(ID, local({
    val = init
    function(new) {
      if (missing(new)) {
        # figure out which outputs use my value
        if (!is.na(output_cur)) {
          deps[[ID]] &amp;lt;&amp;lt;- unique(c(deps[[ID]], output_cur))
          output_cur &amp;lt;&amp;lt;- NA
        }
        return(val)
      }
      # if value not changed, do nothing
      if (identical(val, new)) return()
      # trigger changes in relevant outputs
      val &amp;lt;&amp;lt;- new
      for (i in deps[[ID]]) output[[i]]()
    }
  }), input)
}

add_input(&#39;slider&#39;, 0)
add_input(&#39;toggle&#39;, TRUE)  # not used this example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we provide a couple of output elements. One uses the value &lt;code&gt;input$slider&lt;/code&gt;, and one does not.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;output$render_value = function() {
  message(&#39;The slider value is &#39;, input$slider)
}
output$render_random = function() {
  message(&#39;A random value is &#39;, rnorm(1))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we generate all outputs to build the dependency table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# figure out which output depends on which input
local(for (i in names(output)) {
  output_cur &amp;lt;&amp;lt;- i
  output[[i]]()
  output_cur &amp;lt;&amp;lt;- NA
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now our system should know that when &lt;code&gt;input$slider&lt;/code&gt; is modified, &lt;code&gt;output$render_value()&lt;/code&gt; should be called (but not &lt;code&gt;output$render_random()&lt;/code&gt; since it does not depend on &lt;code&gt;input$slider&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Imagine you are dragging a &amp;ldquo;slider&amp;rdquo; to modify its value (we just directly assign values to the &amp;ldquo;slider&amp;rdquo; below):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;input$slider = 5
#&amp;gt; The slider value is 5
input$slider = 5  # nothing happens
input$slider = 100
#&amp;gt; The slider value is 100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the above &amp;ldquo;Shiny&amp;rdquo; system written in 40 lines of code actually works. The real Shiny framework is certainly far more complicated than that (thousands of lines of R and JS code), but the toy implementation has shown the possibility of automatically executing a function (mostly for side-effects) when you modify an object.&lt;/p&gt;

&lt;h2 id=&#34;r-objects-as-command-aliases&#34;&gt;R objects as &amp;ldquo;command aliases&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;The reason that Michael pointed out &lt;code&gt;makeActiveBinding()&lt;/code&gt; was because Baptiste Auguie wanted a shortcut for &lt;code&gt;system(&#39;open .&#39;)&lt;/code&gt;. Here is how you could do it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;makeActiveBinding(&#39;open&#39;, function() {
  system(&#39;open .&#39;)
  invisible(getwd())
}, globalenv())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then when you type &lt;code&gt;open&lt;/code&gt; in the R console, your current working directory should be opened in your file viewer. This example only works on macOS. For other OSes, you need other commands (perhaps &lt;code&gt;xdg-open&lt;/code&gt; for Linux, and &lt;code&gt;shell.exec()&lt;/code&gt; for Windows).&lt;/p&gt;

&lt;p&gt;The object can be viewed as an alias of a function, in which you can run arbitrary commands. The only advantage of using active bindings in this case is that it saves you a pair of parentheses, because typically you would define a function instead: &lt;code&gt;open = function() system(&#39;open .&#39;)&lt;/code&gt;, and call &lt;code&gt;open()&lt;/code&gt;. Perhaps being cool is also an advantage.&lt;/p&gt;

&lt;h2 id=&#34;appendix-choose-a-type-of-pizza&#34;&gt;Appendix: choose a type of pizza&lt;/h2&gt;

&lt;p&gt;Colin Fay wrote a blog post on &lt;a href=&#34;https://colinfay.me/ractivebinfing/&#34;&gt;active bindings (and pizza)&lt;/a&gt; last year, which I believe is a much better tutorial than my post here. I recommend you to read that post, too.&lt;/p&gt;

        
        &lt;script&gt;location.href=&#39;https://yihui.name/en/2018/08/make-active-binding/&#39;;&lt;/script&gt;
        
      </description>
    </item>
    
    <item>
      <title>Double Negatives</title>
      <link>https://yihui.name/en/2018/08/double-negatives/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/en/2018/08/double-negatives/</guid>
      <description>
        &lt;p&gt;Every time I use the function &lt;code&gt;stopifnot(...)&lt;/code&gt;, I have to stop and think about it: should the conditions in &lt;code&gt;...&lt;/code&gt; return &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt;? Then I have to think in plain English. Hmm, what does &amp;ldquo;stop if not false&amp;rdquo; mean? Do I actually want to stop or not if the condition is true? All kinds of circles emerging in my mind&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://slides.yihui.name/gif/how-to-tie-a-tie.jpg&#34; alt=&#34;How to tie a tie&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I have wished many times the function name were &lt;code&gt;stopif()&lt;/code&gt; instead. Reasoning about negations is often trickier than affirmatives. Compare these examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;stopifnot(x == 1)
stopifnot(x != 1)

stopif(x == 1)
stopif(x != 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To me, the &lt;code&gt;stopif()&lt;/code&gt; versions are much clearer (&lt;code&gt;stopif(x)&lt;/code&gt; means &lt;code&gt;if (x) stop()&lt;/code&gt;, and &lt;code&gt;stopifnot(x)&lt;/code&gt; means &lt;code&gt;if (!x) stop()&lt;/code&gt;). That was one of the minor reasons why I created &lt;a href=&#34;https://github.com/yihui/testit&#34;&gt;the &lt;strong&gt;testit&lt;/strong&gt; package&lt;/a&gt; and wrote the &lt;code&gt;assert()&lt;/code&gt; function. When you &lt;code&gt;assert()&lt;/code&gt;, you must assert something is true.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(testit)

assert(1.0 == 1)

assert(&#39;1.0 is equal to 1&#39;, {
  (1.0 == 1)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This morning I opened the help page &lt;code&gt;?installed.packages&lt;/code&gt;, and saw the argument &lt;code&gt;noCache = FALSE&lt;/code&gt;. It was not the first time I had read this help page, but&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;noCache = FALSE&lt;/code&gt;? Excuse me. I&amp;rsquo;m slow. Just give me five seconds to decipher it again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://slides.yihui.name/gif/lost-key.gif&#34; alt=&#34;How to find the key&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Strunk and White actually recommended in &lt;em&gt;The Elements of Style&lt;/em&gt; that &amp;ldquo;we put statements in positive form&amp;rdquo;, which I believe also applies to program code.&lt;/p&gt;

&lt;p&gt;Well, if you look at &lt;code&gt;?download.file&lt;/code&gt;, there is an argument &lt;code&gt;cacheOK = TRUE&lt;/code&gt;. Sigh&amp;hellip; Why the name &lt;code&gt;cacheOK&lt;/code&gt;? Why not just &lt;code&gt;cache = TRUE&lt;/code&gt;? &lt;code&gt;cacheOK = TRUE&lt;/code&gt; reads like &amp;ldquo;the statement &amp;lsquo;it is okay to use cache&amp;rsquo; is true&amp;rdquo;. Double affirmatives this time?&lt;/p&gt;

&lt;p&gt;Once again: naming, is, hard.&lt;/p&gt;

        
        &lt;script&gt;location.href=&#39;https://yihui.name/en/2018/08/double-negatives/&#39;;&lt;/script&gt;
        
      </description>
    </item>
    
    <item>
      <title>Reflections on 25&#43; Years of &#34;50 Years of Data Science&#34;</title>
      <link>https://yihui.name/en/2018/08/25-years-of-data-science/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/en/2018/08/25-years-of-data-science/</guid>
      <description>
        

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is a guest post and &lt;em&gt;not&lt;/em&gt; written by Yihui. Its author desires to remain anonymous. If anyone would like to contact the author, please contact me (Yihui). And if any statistical sleuths out there determine the author&amp;rsquo;s identity, please refrain from revealing it. Thank you.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;When I was a child&lt;br /&gt;
I caught a fleeting glimpse&lt;br /&gt;
Out of the corner of my eye&lt;br /&gt;
I turned to look but it was gone&lt;br /&gt;
I cannot put my finger on it now&lt;br /&gt;
The child is grown&lt;br /&gt;
The dream is gone&lt;br /&gt;
I have become comfortably numb&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;mdash; &amp;ldquo;Comfortably Numb&amp;rdquo; by Pink Floyd (1979)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I was lucky to attend the RStudio Conference this year, and even luckier to be invited to an impromptu Iowa State University Statistics alumni dinner on Saturday, February 3. Full disclosure: I am not an ISU alumnus, but Di Cook granted me that privilege for the night. During the dinner, I wanted to mention something from the 2016 useR! Conference at Stanford, and I asked Yihui Xie if he was there. My intended benign conversation starter raised a sore point that Yihui explained in his post &lt;a href=&#34;https://yihui.name/en/2018/02/career-crisis/&#34;&gt;My Early Career Crisis (2014 - 2015)&lt;/a&gt;. Yes, I am that guy, that &amp;ldquo;Someone at the table recalled that I missed the useR! 2016 conference at Stanford due to visa issues.&amp;rdquo; The next day, Yihui emailed me to ask me to think about posting my anecdotes on famous statisticians. And now, more than six months later, I&amp;rsquo;m finally able to put some of my thoughts on paper. Maybe there will be others posts someday too.&lt;/p&gt;

&lt;h2 id=&#34;david-donoho&#34;&gt;David Donoho&lt;/h2&gt;

&lt;p&gt;The anecdotal story I wanted to tell at the dinner was meeting &lt;a href=&#34;https://en.wikipedia.org/wiki/David_Donoho&#34;&gt;David Donoho&lt;/a&gt; at the 2016 useR! Conference Welcome Reception on Tuesday, June 28, 2016. I was trying to overcome my INTJ Myers-Briggs Type Indicator and &amp;ldquo;work the room&amp;rdquo; as best as possible for a math-stats geek with the aid of wine, when I crossed paths with what appeared to be a younger wavy blond-haired, tanned skin California surfer dude-type - not quite &lt;a href=&#34;https://en.wikipedia.org/wiki/Fast_Times_at_Ridgemont_High&#34;&gt;Jeff Spicoli&lt;/a&gt;, but maybe one of the guys in the van - wearing a blue suit and glasses, and I was struck by the apparent dichotomy. Then I looked at his name tag and saw &amp;ldquo;David Donoho&amp;rdquo; and immediately made the connection to the paper &amp;ldquo;50 Years of Data Science&amp;rdquo; (2015-09-15 version), which I devoured the moment I found it posted online. I had no idea who David Donoho was, but I &lt;a href=&#34;http://paperswelove.org/&#34;&gt;loved the paper&lt;/a&gt;, mainly because it referenced landmark data science papers by four of my statistical heroes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;John Tukey: &amp;ldquo;The Future of Data Analysis&amp;rdquo; (1962)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;John Chambers: &amp;ldquo;Greater or Lesser Statistics: A Choice for Future Research&amp;rdquo; (1993)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Leo Breiman: &amp;ldquo;Statistical Modeling: The Two Cultures&amp;rdquo; (2001)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;William S. Cleveland: &amp;ldquo;Data Science: An Action Plan for Expanding the Technical Areas of the Field of Statistics&amp;rdquo; (2001)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, I just had to corner Donoho, tell him how much I liked his paper, and try to play a game of 20 Questions. As I recall, my opening question was: did you talk to Tukey, Chambers, Breiman, and Cleveland before writing the paper to get their input or perspective? Donoho&amp;rsquo;s reply was something like, &amp;ldquo;I&amp;rsquo;ve known them for years and worked with them.&amp;rdquo; This dumbfounded me - how could a guy who looked so much younger than me possibly work with that generation of statisticians, whose work I studied in grad school nearly 30 years earlier? I just had to pry and asked him how that was even possible [as soon as I could check Wikipedia, I learned that Donoho is 7 years OLDER than me - Palo Alto water must spring forth from the Fountain of Youth]. The details are fuzzy at this point, but Donoho explained that he went to Princeton for his undergraduate degree and worked as a statistical programmer for John Tukey and so was able to work with John Chambers and Bill Cleveland at Bell Labs. I tried to articulate my fan-boy admiration of the Princeton-Bell Labs-Institute for Advanced Study &lt;a href=&#34;https://hbr.org/1998/11/clusters-and-the-new-economics-of-competition&#34;&gt;innovation cluster&lt;/a&gt;, but I&amp;rsquo;m afraid the wine and warm, dry air were too good. Then I asked how he knew Leo Breiman, and Donoho told me he worked at the University of California at Berkeley while Breiman was there. And then he told me an anecdote that blew my mind: he was sitting in a Berkeley wine bar with &lt;a href=&#34;https://en.wikipedia.org/wiki/Ross_Ihaka&#34;&gt;Ross Ihaka&lt;/a&gt; and said to him something like: &amp;ldquo;You know what you should do - rewrite S using a Lisp dialect, like Scheme.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Dang! Not only did Donoho personally know and work with the statisticians whose papers, books, and methods I&amp;rsquo;ve read and utilized for nearly 30 years, he put in motion thoughts that led to the creation of R, which I use almost every day! While I certainly didn&amp;rsquo;t know Tukey, Chambers, Breiman, and Cleveland personally like Donoho did, they were key inspirations over my 25+ years of &amp;ldquo;50 Years of Data Science&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;john-tukey&#34;&gt;John Tukey&lt;/h2&gt;

&lt;p&gt;From what I can determine, &lt;a href=&#34;https://en.wikipedia.org/wiki/John_Tukey&#34;&gt;John Tukey&lt;/a&gt; spent his entire career simultaneously at Princeton and Bell Labs, and, as his Wiki page attests, his influence on both world-class institutions and the rest of the world was amazing. The more I think about it, the more impressed I am that a very young David Donoho was able to work for John Tukey while attending Princeton in the mid-1970s - was that due to happenstance or planned? I never even heard of Tukey until his name kept popping up in my grad school classes, especially in my Design Of Experiments (DOE) and Exploratory Data Analysis (EDA) classes. My EDA course was based on two books:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Applications, Basics, and Computing of Exploratory Data Analysis&lt;/em&gt; (ABCs of EDA) by Paul F. Velleman and David C. Hoaglin&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Graphical Methods for Data Analysis&lt;/em&gt; (GMDA) by John M. Chambers, William S. Cleveland, Beat Kleiner, and Paul A. Tukey (all Bell Labs staff)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The ABCs of EDA was dedicated to John W. Tukey, and both Velleman and Hoaglin were PhD students of Tukey&amp;rsquo;s at Princeton. To implement Tukey&amp;rsquo;s techniques, the book was filled with Basic code and Fortran code, which I knew fairly well at the time - along with Pascal - from my undergraduate studies; however, for the sake of expedience we were able to use Minitab and Minitab macros to do the examples and exercises.&lt;/p&gt;

&lt;p&gt;GMDA was dedicated to &amp;ldquo;To our parents,&amp;rdquo; while its Preface stated:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Without the influence of John Tukey on statistics, this book would probably never have been written. His many contributions to graphical methods, his insights into the role good plots can play in statistics and his general philosophy of data analysis have shaped much of the approach presented here. Directly and indirectly, he is responsible for much of the richness of graphical methods available today.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, the name Tukey was ubiquitous for me during that period of my life, and I kept asking myself, &amp;ldquo;Who is this guy?&amp;rdquo; It was only later that I learned that the creator, head, and adviser for my statistics program was one of Tukey&amp;rsquo;s PhD students at Princeton, so maybe that explains some of it. Somewhere along the way, I acquired copies of two of Tukey&amp;rsquo;s books &lt;em&gt;Exploratory Data Analysis&lt;/em&gt; (1977) and &lt;em&gt;Exploring Data Tables, Trends and Shapes&lt;/em&gt; (1985) edited by David Hoaglin, Frederick Mosteller, and John Tukey, which I use as references from time to time. I even made attempts to reproduce examples using S-PLUS and R, but those attempts kept getting derailed. But I hope someday, maybe in retirement, I can work through those two books cover-to-cover.&lt;/p&gt;

&lt;p&gt;Donoho marks the birth of Data Science with the publication of Tukey&amp;rsquo;s &amp;ldquo;The Future of Data Analysis&amp;rdquo; paper in 1962, I assume because Tukey implored statisticians to reduce their focus on statistical theory and engage with the entire data analysis process. True confession: this was similar to my thinking when I decided to attend a relatively unknown applied statistics graduate program that offered an industrial co-op position instead of well-known theoretical graduate programs (and likely a Research Assistant or Teaching Assistant position), after being demotivated by theory without application as an undergraduate. Then Tukey reviewed three tools that I don&amp;rsquo;t recall encountering in books or classes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Full Normal Rejection (FUNOR)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Full Normal Modification (FUNOM)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Freeing Interaction Line from the Error Term (FILLET)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Are there R packages for these?&lt;/p&gt;

&lt;p&gt;I think the best part of the 67 page paper is near the end, which I believe is worth repeating for today&amp;rsquo;s Data Scientists, so they can be confident they are have the right attitudes, unlike when I was initially learning and practicing statistics:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We need to face up to more realistic problems&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to face up to the necessarily approximate nature of useful results in data analysis&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to face up to the need for collecting the results of actual experience with specific data-analytic techniques&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to face up to the need for iterative procedures in data analysis&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to face up to the need for both indication and conclusion in the same analysis&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to face up to the need for a free use of ad hoc and informal procedures in seeking indications&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to face up to the face that, as we enter into new fields or study new kinds of procedures, it is natural for indication procedures to grow up before the corresponding conclusion procedures do so&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We must face up to the need for a double standard in dealing with error rates, whether significance levels or lacks of confidence&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We must face up to the fact that, in any experimental science, our certainty about what will happen in a particular situation does not usually come from directly applicable experiments or theory, but rather comes mainly through analogy between situations which are not know to behave similarly&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to give up the vain hope that data analysis can be founded upon a logico-deductive system like Euclidean plan geometry (or some form of the propositional calculus) and to face up to the fact that data analysis is intrinsically an empirical science&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;john-chambers&#34;&gt;John Chambers&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/John_Chambers_(statistician)&#34;&gt;John Chambers&lt;/a&gt; worked at Bell Labs, was one of the original authors of S, and later moved to Stanford. As mentioned in the previous section, I first encountered the name John Chambers from &lt;em&gt;Graphical Methods for Data Analysis&lt;/em&gt; (GMDA) in my EDA class. GMDA showcased the S language&amp;rsquo;s graphical methods, and our class used Minitab and S on a Unix server to work through the examples and exercises, so this was my first exposure to the S language. This book turned me on to solving problems by visualizing the data. For example, years later I taught a basic statistics class for my employer, and I encouraged students to bring their own data for live problem-solving sessions (I called it &amp;ldquo;Stump the Chump, er, Statistician,&amp;rdquo; daring them to challenge me in front of the class). One student had a vexing factory problem, and I recommended a simple normal probability plot, which exhibited several vertical lines of data points, indicating the same values to 6+ decimal places were occurring, a statistical impossibility. I asked him to check if they were successive values, and sure enough they were, suggesting the same value was stuck in the buffer and subsequent values were ignored. This simple graph solved the problem in a few minutes that no one else had solved after collecting data for a long period of time. This was just one of many examples of solving problems by organizing and visualizing the data, without requiring any statistical modeling or Design Of Experiments (often after I was really hoping to take the next step and design and analyze a complex DOE).&lt;/p&gt;

&lt;p&gt;GMDA became one of those &amp;ldquo;go to&amp;rdquo; books where the pages are marked up with pencil scribblings and highlighting, the spine is broken, and pages are about to fall out if I&amp;rsquo;m not careful. Its methods were especially useful when encountering &amp;ldquo;real world&amp;rdquo; data - some from Bell Labs and others used for S, S-PLUS and R examples - that never seemed to follow the normal distribution, unlike the data sets in most other statistics textbooks. Concurrent with my studies, I was lucky to have a co-op assignment that gave me access to an AT&amp;amp;T 3B2 Unix box, so I took advantage of it and wrote some programs with S and Ratfor (Rational Fortran - Fortran with curly braces).&lt;/p&gt;

&lt;p&gt;After I graduated I joined a SAS shop for two years. Unlike the wide variety of statistical tools and computing systems available at grad school and my co-op job, we only had two ways to do statistics: mainframe SAS and PC SAS. Still, it had a role in my S journey. My supervisor had budget money left over near the the end of the fiscal year and asked me for ideas on how to spend it, explaining that if he didn&amp;rsquo;t spend it, his budget might get cut. I told him that as a co-op, I used software called STAR (Statistical Reliability Analysis), developed at Bell Labs by Bill Meeker, a professor at Iowa State University and world-renowned reliability statistics expert. Based on Meeker&amp;rsquo;s reputation and desperate to spend money fast, my boss told me to order it. Because I put in the order, AT&amp;amp;T Bell Laboratories sent me a complimentary copy of &lt;em&gt;The New S Language: A Programming Environment for Data Analysis and Graphics&lt;/em&gt; by Becker, Chambers, and Wilks (1988) with a thank you letter dated 06/19/1990 and a tape drive containing the software. Well, I couldn&amp;rsquo;t install software from a tape; this required IT support. I put in a request. Nothing. No response, not even an estimate of when they might get to it. But we met the objective: spend the our entire budget before the end of the fiscal year.&lt;/p&gt;

&lt;p&gt;After two years of being a frustrated SAS programmer and mastering the SAS macro language - purely to reduce the amount of SAS code for trivial, repetitive tasks and hand it off to administrative staff - and never getting STAR installed, I left to join a much smaller firm. We didn&amp;rsquo;t have much data, and when we did, I had no statistical software to analyze it and struggled writing statistical programs in C. I heard that S was ported from Unix to Windows and renamed S-PLUS, so I purchased a copy. With the purchase of S-PLUS, I received a second copy of &lt;em&gt;The New S Language&lt;/em&gt; (now softcover) and a copy of &lt;em&gt;Statistical Methods with S&lt;/em&gt;, edited by Chambers and Trevor Hastie. Chambers also wrote or co-wrote chapters 1-5 and appendix A. Later I attended a 1-week training course at StatSci, the creator of S-PLUS, in Seattle, WA in 1993. And I have been using S-PLUS and R ever since, but not as continuously as I hoped. I&amp;rsquo;m still using &lt;em&gt;Statistical Methods with S&lt;/em&gt; as a reference, and I also purchased Chamber&amp;rsquo;s &lt;em&gt;Programming with Data: a Guide to the S Language&lt;/em&gt; (1998) and &lt;em&gt;Software for Data Analysis: Programming with R&lt;/em&gt; (2008). I briefly met Chambers at the 2014 useR! Conference at UCLA and asked about how to obtain data sets from &lt;em&gt;Statistical Methods with S&lt;/em&gt;, but he told me they are now property of TIBCO, the current owners of S-PLUS - blocked again! [Strangely, at least to me, while cleaning up files on my PC, I found artifacts from the 2001 S-PLUS conference I attended in Philadelphia, PA, and I discovered that John Chambers was an invited speaker, but I have no recollection of that.]&lt;/p&gt;

&lt;p&gt;Many years later, finding and reading &amp;ldquo;Greater or Lesser Statistics: A Choice for Future Research&amp;rdquo; (1993) based on Donoho&amp;rsquo;s inclusion in &amp;ldquo;50 Years of Data Science,&amp;rdquo; a theme emerged of dividing statistics into two groups:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Greater Statistics: everything related to &lt;em&gt;learning from data&lt;/em&gt;, from the first planning or collection to the last presentation or report&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lesser Statistics: the body of specifically statistical methodology that has evolved with the profession - roughly, statistics as defined by texts, journals, and doctoral dissertations&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This puts a name on Tukey&amp;rsquo;s 1962 recommendation to reduce focus on theory - Lesser Statistics - and increase focus on the entire data analysis process - Greater Statistics. Chambers cautioned, &amp;ldquo;If statisticians remain aloof, others will act. Statistics will lose.&amp;rdquo; This is happening now.&lt;/p&gt;

&lt;h2 id=&#34;leo-breiman&#34;&gt;Leo Breiman&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Leo_Breiman&#34;&gt;Leo Breiman&lt;/a&gt; was referenced in &amp;ldquo;50 Years of Data Science&amp;rdquo; for his 2001 paper &amp;ldquo;Statistical Modeling: The Two Cultures.&amp;rdquo; This paper has been continually referenced in Internet posts since it was published. Breiman was a professor at UCLA, then a consultant, then a professor again at UC Berkeley, where he worked with Donoho. As I recall, I first heard his name in 1988, when I was a co-op statistician and assigned to a cube that had the 1984 book &lt;em&gt;Classification and Regression Trees&lt;/em&gt; (CART) by Breiman, Friedman, Olshen and Stone sitting on its shelf. I scanned the book and was fascinated by its potential to use the data itself to discover relationships hidden in multivariate data. So I asked around and learned that the company received the book when they purchased the CART software. I investigated how to run it on a time share computer, tried to recreate an example with available data, but nothing happened - I received no output or feedback on errors or file location. So I called IT support, explained the situation, and was mentally crushed after being told they didn&amp;rsquo;t support the software and could not help me. I was beginning to spot a trend: whenever statistical software was involved, there was rarely support from IT. So I had to learn to figure out how to install statistical software myself or give up if I didn&amp;rsquo;t have system administration rights. I needed a Statistician&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Serenity_Prayer&#34;&gt;Serenity Prayer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Around ten years after discovering CART and being blocked from using it, a former professor of mine recommended &lt;em&gt;Modern Applied Statistics with S&lt;/em&gt; (MASS) by Bill Venables and Brian Ripley. I immediately bought it (Second Edition at that time), and it quickly become my &amp;lsquo;Bible,&amp;rsquo; and I bought the Third and Fourth Editions as soon as they were published. Because of MASS, I learned about the &lt;code&gt;tree&lt;/code&gt; method and cross-validation to do something similar to CART. I started using &lt;code&gt;tree&lt;/code&gt; whenever I could to see if it would identify explanatory variables or interactions. I also learned about Alternating Conditional Expectations (ACE) by Breiman from MASS, and I often applied it, along with the Additivity And Variance Stabilization (AVAS) method, to messy data sets to find transformations that provide a better fit to the data. Due to a great deal of luck, involving the reputation of Bill Meeker at Iowa State University being one of the keynote speakers, I was able to attend the 2001 S-PLUS conference in Philadelphia, PA. As soon as I received authorization to register, I signed up for Brian Ripley&amp;rsquo;s Data Mining tutorial, and took advantage of the opportunity to pick his brain about topics in MASS. When I started to ask about &lt;code&gt;tree&lt;/code&gt;, he said, &amp;ldquo;Don&amp;rsquo;t use that - it&amp;rsquo;s flawed. Use &lt;code&gt;rpart&lt;/code&gt; instead.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The very next day, I attended a tutorial by Frank Harrell and met Beth Atkinson, the co-developer of &lt;code&gt;rpart&lt;/code&gt; with Terry Therneau. Even today, the CRAN page for &lt;code&gt;rpart&lt;/code&gt; states it is, &amp;ldquo;An implementation of most of the functionality of the 1984 book by Breiman, Friedman, Olshen and Stone.&amp;rdquo; Based on Ripley&amp;rsquo;s advice, I have used &lt;code&gt;rpart&lt;/code&gt; ever since, and I think it&amp;rsquo;s fair to say I&amp;rsquo;ve used CART for the last 17 years, but I wish it was longer.&lt;/p&gt;

&lt;p&gt;When &amp;ldquo;Statistical Modeling: the Two Cultures&amp;rdquo; was published in 2001 and kept popping up in Internet posts, I knew I had to read it. I learned that Breiman was involved in the development of several other techniques, like Bagging and Boosting. But I assume Donoho included this paper in &amp;ldquo;50 Years of Data Science&amp;rdquo; because Bremen recommend statisticians focus less on theory and more on data, like Tukey did 40 years earlier. But Breimen was far more explicit than Turkey when he stated &amp;ldquo;98% of all statisticians&amp;rdquo; belong to the Data Modeling Culture (similar to Chamber&amp;rsquo;s Lesser Statistics) and &amp;ldquo;2% of statisticians, many in other fields&amp;rdquo; belong to The Algorithmic Modeling Culture (similar to Chamber&amp;rsquo;s Greater Statistics), and that imbalance resulted in three major opportunity costs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Led to irrelevant theory and questionable scientific conclusions&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kept statisticians from using more suitable algorithmic models&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prevented statisticians from working on exciting new problems&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I found &lt;a href=&#34;https://projecteuclid.org/euclid.ss/1009213726&#34;&gt;&amp;ldquo;A Conversation with Leo Breiman&amp;rdquo;&lt;/a&gt;, and he was even more explicit when asked to give advice to students studying statistics:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I&amp;rsquo;m torn in a way because what I might even tell them is, &amp;ldquo;Don&amp;rsquo;t go into statistics,&amp;rdquo; My feeling is, to some extent, that academic statistics may have lost its way&amp;hellip; but probably in the end, I would say, &amp;ldquo;Take statistics, but remember that the great adventure of statistics is in gathering and using data to solve interesting and important real world problems.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sure sounds like Data Science to me.&lt;/p&gt;

&lt;h2 id=&#34;bill-cleveland&#34;&gt;Bill Cleveland&lt;/h2&gt;

&lt;p&gt;Like John Chambers, I was introduced to &lt;a href=&#34;https://en.wikipedia.org/wiki/William_S._Cleveland&#34;&gt;Bill Cleveland&lt;/a&gt; from &lt;em&gt;Graphical Methods for Data Analysis&lt;/em&gt; (GMDA) and &lt;em&gt;Statistical Models with S&lt;/em&gt;, where he co-wrote Chapter 8: Local Regression Models. And his papers were often referenced in Edward Tufte&amp;rsquo;s visualization books with respect to pie charts and small multiples. I emailed him sometime after 2001 to ask about data sets to reproduce examples in GMDA. He didn&amp;rsquo;t have the data sets available but recommended his other books &lt;em&gt;Visualizing Data&lt;/em&gt; (1993) and &lt;em&gt;The Elements of Graphing Data&lt;/em&gt; (1994), where the data sets were available on his web page. So I purchased them both and read &lt;em&gt;The Elements of Graphing Data&lt;/em&gt; cover-to-cover, thanks to Andrew Gelman making his &lt;a href=&#34;http://andrewgelman.com/wp-content/uploads/2017/06/communication_course_outline.pdf&#34;&gt;Communicating Data and Statistics course syllabus&lt;/a&gt; available online. And as a S-PLUS user since 1993, I used Trellis graphics whenever base graphics were insufficient and then used the &lt;strong&gt;lattice&lt;/strong&gt; version after switching to R (but I use &lt;code&gt;ggplot2&lt;/code&gt; for most graphics now). And I use loess/lowess all the time, especially now with &lt;strong&gt;ggplot2&lt;/strong&gt; &lt;code&gt;geom_smooth()&lt;/code&gt; making it so easy.&lt;/p&gt;

&lt;p&gt;Cleveland worked at Bell Labs with Tukey, Chambers and Donoho (as an undergrad student at Princeton), then he moved to Purdue University, which I only discovered when I was wandering the halls of their statistics department circa 2012, and found him in his office. I made it a point to check if he was available every time I visited Purdue for a project I managed there and had a few face-to-face conversations. Around the same time I attended the 2012 useR! Conference at Vanderbilt University in Nashville, TN, and attended the RHIPE tutorial. Cleveland was gracious with his time and offered support to help me use RHIPE on a Linux cluster, but once again, I was blocked by IT.&lt;/p&gt;

&lt;p&gt;Cleveland&amp;rsquo;s paper &amp;ldquo;Data Science: An Action Plan for Expanding the Technical Areas of the Field of Statistics&amp;rdquo; was published in 2001, like Breiman&amp;rsquo;s &amp;ldquo;Statistical Modeling&amp;rdquo; paper. The title alone qualifies it as landmark paper in the evolution of the term &amp;ldquo;Data Science.&amp;rdquo; I must have read it around the time it was published, because I found it in a folder of my 2001 S-PLUS conference artifacts while cleaning up file cabinets around 2010. But since I had no recollection, the term must not have resonated with me at that time; however, I had already re-read it several times before &amp;ldquo;50 Years of Data Science&amp;rdquo; was published. More than helping to establish the term &lt;em&gt;Data Science&lt;/em&gt;, the paper&amp;rsquo;s six technical areas and recommended time allocations define the discipline better than other sources, which mostly list skills, not tasks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Multidisciplinary Investigations: data analysis collaborations in a collection of subject matter areas (25%)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Models and Methods for Data: statistical models; methods of model building; methods of estimation and distribution based on probabilistic inference (20%)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Computing with Data: hardware systems; software systems; computational algorithms (15%)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pedagogy: curriculum planning and approaches to teaching for elementary school, secondary school, college, graduate school, continuing education, and corporate training (15%)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Tool Evaluation: surveys of tools in use in practice, surveys of perceived needs for new tools, and studies of the processes for developing new tools (5%)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Theory: foundations of data science; general approaches to models and methods, to computing with data, to teaching, and to tool evaluation; mathematical investigations of models and methods, of computing with data, of teaching, and of evaluation (20%)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of my Data Scientist job responsibilities can be mapped into those six areas, and I have used them to define my goals and time allocations whenever possible (still a work in progress). So in that respect, it has greatly influenced my life, surely more than any other paper, book, class, conference, tutorial, or workshop.&lt;/p&gt;

&lt;h2 id=&#34;closing-comments&#34;&gt;Closing Comments&lt;/h2&gt;

&lt;p&gt;Data Science - I could not put my finger on it until I read &amp;ldquo;50 Years of Data Science.&amp;rdquo; In retrospect, it was my reasoning for studying math and statistics instead of &amp;ldquo;hard core&amp;rdquo; sciences, hypothesizing that solving future, complex problems would require analysis of large, multivariate data sets, not just theory and logic; however, I could never fully articulate my thoughts to myself, let alone others. And &amp;ldquo;50 Years of Data Science&amp;rdquo; helped me realize that my Data Science journey parallels my statistical programming journey from S to S-PLUS to R over the last 30 years - with excursions for Pascal, Fortran, Ratfor, SAS, C, VBA for Excel, Minitab, and Statistica. For me, Data Science and S/S-PLUS/R are intertwined, inseparable.&lt;/p&gt;

&lt;p&gt;Around 20 years ago, I attended a seminar by a well-known industrial statistician whose main message was that to be a better statistician, one should learn more about other fields. I took that advice to heart - maybe too much - and spent years and years learning more about engineering, business, and finance, hoping that would help me &amp;ldquo;get my foot in the door&amp;rdquo; and apply statistics to a wider variety of problems, or, as Tukey put it, get &lt;a href=&#34;http://ww2.amstat.org/about/statisticiansinhistory/index.cfm?fuseaction=biosinfo&amp;amp;BioID=14&#34;&gt;to play in everyone&amp;rsquo;s backyard&lt;/a&gt;. But that never happened (a topic for another post?). And given my limited time and attention span, I neglected continuing to learn what I really enjoyed: math, statistics, and programming. In retrospect, this was bad advice, at least for me. I now realize I should have learned MORE math, statistics, and programming, and that would have enabled me to contribute more to other fields by applying advanced statistical techniques to solve problems, rather than knowing more about other fields and applying generic, basic statistical techniques. I now wish I had learned that about myself much, much sooner.&lt;/p&gt;

&lt;p&gt;Data Science is not a fad; it is a long evolution of statistical practice, what statistics should have been if &amp;ldquo;we&amp;rdquo; listened to Tukey 50 years ago. It took 50 years for Tukey&amp;rsquo;s ideas to become mainstream. And because the statistics community did not lead, as Chambers warned in 1993, others have assumed control. I saw this coming based on my experiences with Total Quality Management (TQM) and Six Sigma, and I hoped Data Science would be different, but it seems to be too late. Personally, however, it has been a huge benefit. When I was a child, I caught a fleeting glimpse of the future out of the corner of my eye. With so many distractions, bad advice, and being blocked by Information Technology, I often just gave up and coasted along. Thanks to Data Science, I have new motivation and renewed energy to purse what I enjoy - and avoided becoming comfortably numb.&lt;/p&gt;

        
        &lt;script&gt;location.href=&#39;https://yihui.name/en/2018/08/25-years-of-data-science/&#39;;&lt;/script&gt;
        
      </description>
    </item>
    
    <item>
      <title>Write a Book with bookdown and Publish with Chapman &amp; Hall</title>
      <link>https://yihui.name/en/2018/08/bookdown-crc/</link>
      <pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/en/2018/08/bookdown-crc/</guid>
      <description>
        

&lt;p&gt;My editor John Kimmel told me that many authors showed interest in &lt;strong&gt;bookdown&lt;/strong&gt; at JSM 2018 in Vancouver last week. I was very glad to know that. In this post, I want to briefly explain how to publish a book with Chapman &amp;amp; Hall/CRC. Actually I &lt;a href=&#34;https://yihui.name/en/2013/06/tips-for-writing-an-r-book/&#34;&gt;blogged about it&lt;/a&gt; five years ago after I published my first book, but at that time, I was still in the LaTeX (LyX) world, and this time I want to talk about R Markdown instead. I have also written about my experience with &lt;a href=&#34;https://yihui.name/en/2017/09/the-bookdown-book-in-retrospect/&#34;&gt;the &lt;strong&gt;bookdown&lt;/strong&gt; book&lt;/a&gt; and &lt;a href=&#34;https://yihui.name/en/2017/12/blogdown-book/&#34;&gt;the &lt;strong&gt;blogdown&lt;/strong&gt; book&lt;/a&gt; previously.&lt;/p&gt;

&lt;h2 id=&#34;the-minimal-template-bookdown-crc&#34;&gt;The minimal template &lt;code&gt;bookdown-crc&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;While I was working on &lt;a href=&#34;https://bookdown.org/yihui/bookdown&#34;&gt;the &lt;strong&gt;bookdown&lt;/strong&gt; book&lt;/a&gt; in 2016, I created a minimal book example on Github in the repository &lt;a href=&#34;https://github.com/yihui/bookdown-crc&#34;&gt;https://github.com/yihui/bookdown-crc&lt;/a&gt;. This repository contains the LaTeX class file &lt;code&gt;krantz.cls&lt;/code&gt; as well as many LaTeX tricks that I copied and pasted from Stack Overflow (e.g., how to print the page numbers in the correct format&amp;mdash;you&amp;rsquo;ll need &lt;code&gt;\frontmatter&lt;/code&gt;, &lt;code&gt;\mainmatter&lt;/code&gt;, and &lt;code&gt;\backmatter&lt;/code&gt;). Hopefully they will save you a lot of time. Basically you can just start writing the content of your book after you clone or download this repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/163582/43736420-218f56ec-9983-11e8-8740-ec0a1fce660f.png#border&#34; alt=&#34;The front page of the bookdown-crc example&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;get-started&#34;&gt;Get started&lt;/h2&gt;

&lt;p&gt;The first file you may edit is &lt;code&gt;index.Rmd&lt;/code&gt;, in which you should change at least the title and author in the YAML metadata. You should update the &lt;code&gt;github-repo&lt;/code&gt; field if your book source is available on Github, otherwise just delete this field.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;index.Rmd&lt;/code&gt; is the preface of your book. It usually contains unnumbered sections (the syntax is &lt;code&gt;{-}&lt;/code&gt; after a section header), such as &amp;ldquo;Why read this book&amp;rdquo; and &amp;ldquo;Acknowledgements&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;You can edit/rename existing chapters (e.g., &lt;code&gt;01-introduction.Rmd&lt;/code&gt;), or add new chapters. When you need an appendix, you need a special header &lt;code&gt;# (APPENDIX) Appendix {-}&lt;/code&gt;, which you can find in &lt;code&gt;90-more.Rmd&lt;/code&gt; in the example. Any chapters after this chapter will be in the appendix.&lt;/p&gt;

&lt;p&gt;If you need an index at the end of your book, currently you have to use the raw LaTeX command &lt;code&gt;\index{}&lt;/code&gt; in Markdown. When building your book to PDF, an index page will be generated automatically. Please note that you have to escape special LaTeX characters in &lt;code&gt;\index{}&lt;/code&gt;, e.g., &lt;code&gt;\index{bookdown::pdf\_book}&lt;/code&gt; (the underscore should be escaped).&lt;/p&gt;

&lt;h2 id=&#34;customization&#34;&gt;Customization&lt;/h2&gt;

&lt;p&gt;I have talked about the possible options to customize the PDF in &lt;a href=&#34;https://bookdown.org/yihui/bookdown/publishers.html&#34;&gt;Section 6.3&lt;/a&gt; of the &lt;strong&gt;bookdown&lt;/strong&gt; book. You are free to use any typeface you like. I have used Alegreya, Palatino, and Source Code Pro myself. When choosing fonts for your code blocks, I suggest you use either a relatively narrow font or reduce the font size (e.g., I use 70%), because your code can easily exceed the page margin when printed on a book (the paper size is roughly B5, which can hold about 55 characters on a line of code).&lt;/p&gt;

&lt;p&gt;I think the typeface should be the only thing you may want to customize. Other things are trivialities and not worth too much time. Don&amp;rsquo;t be preoccupied with customizing the appearance of your PDF (at least don&amp;rsquo;t do this too early). I guess the No.1 reason that authors fail to publish their books is not because the PDF does not look good, but they just cannot get the book done. Think about what is essential, and what are cosmetic issues.&lt;/p&gt;

&lt;h2 id=&#34;need-more-examples&#34;&gt;Need more examples?&lt;/h2&gt;

&lt;p&gt;The above example is a minimal one. If you want full examples, you can find a few more from &lt;a href=&#34;https://bookdown.org&#34;&gt;https://bookdown.org&lt;/a&gt; (e.g., the three of my books, and Hadley&amp;rsquo;s &amp;ldquo;Advanced R&amp;rdquo;). They will be more complicated, but may be useful if you want to learn a particular trick, such as how to place two figures side by side.&lt;/p&gt;

&lt;h2 id=&#34;open-source-and-public-access-are-totally-possible&#34;&gt;Open source and public access are totally possible&lt;/h2&gt;

&lt;p&gt;To me, the most exciting change brought by &lt;strong&gt;bookdown&lt;/strong&gt; regarding publishing books with Chapman &amp;amp; Hall is that there has been a trend for authors to make the source of books and the web versions of the full books freely available online. Now Chapman &amp;amp; Hall only asks for the right for printing and selling the books. Authors can keep the free online versions. I consider one of my life dreams fulfilled.&lt;/p&gt;

&lt;p&gt;I have believed there are multiple ways of tearing down the paywall. Personally I want to choose a way that does not really hurt the publishers but benefits the readers nonetheless. I feel it is really unfortunate that some people think authors/readers and publishers must be enemies of each other, and we should either kill the publishers (by pirating) or (literally) kill ourselves. Sometimes we really need a little more patience and understanding.&lt;/p&gt;

&lt;p&gt;Anyway, I&amp;rsquo;m looking forward to more exciting books! You don&amp;rsquo;t have to publish with Chapman &amp;amp; Hall. I just happened to choose them after hearing good words about John Kimmel from a random friend. You can certainly use &lt;strong&gt;bookdown&lt;/strong&gt; to write books with Springer or O&amp;rsquo;Reilly (there are examples on bookdown.org).&lt;/p&gt;

        
        &lt;script&gt;location.href=&#39;https://yihui.name/en/2018/08/bookdown-crc/&#39;;&lt;/script&gt;
        
      </description>
    </item>
    
    <item>
      <title>Two of My Use Cases of Lazy Evaluation</title>
      <link>https://yihui.name/en/2018/07/lazy-evaluation/</link>
      <pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/en/2018/07/lazy-evaluation/</guid>
      <description>
        

&lt;p&gt;This is a short follow-up post on Colin Fay&amp;rsquo;s &lt;a href=&#34;https://colinfay.me/lazyeval/&#34;&gt;follow-up post&lt;/a&gt; on Thomas Lumley &lt;a href=&#34;https://notstatschat.rbind.io/2018/07/30/quoting-and-macros-in-r/&#34;&gt;follow-up post&lt;/a&gt; on Miles McBain &lt;a href=&#34;https://milesmcbain.xyz/the-roots-of-quotation/&#34;&gt;post about quotation&lt;/a&gt;. Yeah, I just cannot help it when I see this streak.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not an expert of quotation or lazy evaluation. I just happen to have used them occasionally. I&amp;rsquo;m going to talk about two use cases of lazy evaluation.&lt;/p&gt;

&lt;h2 id=&#34;executing-r-code-the-ninja-way&#34;&gt;Executing R code &amp;mdash; the ninja way&lt;/h2&gt;

&lt;p&gt;In two of my talks, I used delayed assignments to execute R code for no good reasons except that I just wanted to confuse the audience. After making a delayed assignment like this in advance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;delayedAssign(&#39;command&#39;, {
  # some R code
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can simply type &lt;code&gt;command&lt;/code&gt; in the R console to actually execute the code. Of course, you could go with the normal way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;command = function() {
  # some R code
}
command()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But that will be boring, right?&lt;/p&gt;

&lt;p&gt;I used this trick in my talks at &lt;a href=&#34;https://github.com/yihui/knitr-talks/blob/master/useR2014/2014-knitr-ninja-Yihui-Xie.R&#34;&gt;useR! 2014&lt;/a&gt; and &lt;a href=&#34;https://yihui.name/en/2018/02/typing-fast/&#34;&gt;rstudio::conf 2018&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;lazy-loading-the-cache-database-in-knitr&#34;&gt;Lazy-loading the cache database in &lt;strong&gt;knitr&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The caching system in &lt;strong&gt;knitr&lt;/strong&gt; &lt;a href=&#34;https://github.com/yihui/knitr/blob/89b34a661/R/cache.R#L59&#34;&gt;uses lazy-loading&lt;/a&gt; by default (the chunk option &lt;code&gt;cache.lazy = TRUE&lt;/code&gt;). Lazy-loading means the results you cached will not be loaded in memory unless they are actually used later. This is very similar to the LazyData mentioned in Colin&amp;rsquo;s post. To those hackers, you may make a lazy-load database using the &lt;em&gt;internal&lt;/em&gt; function &lt;code&gt;tools:::makeLazyLoadDB()&lt;/code&gt; (again, it is an internal function, so no guarantee in the future), and load the database using &lt;code&gt;lazyLoad()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t quite remember how I discovered this. Chances are I found it by reading the source code of Roger Peng&amp;rsquo;s &lt;strong&gt;cacheSweave&lt;/strong&gt; package in 2012.&lt;/p&gt;

        
        &lt;script&gt;location.href=&#39;https://yihui.name/en/2018/07/lazy-evaluation/&#39;;&lt;/script&gt;
        
      </description>
    </item>
    
    <item>
      <title>An Introduction to xfun</title>
      <link>https://yihui.name/xfun/</link>
      <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/xfun/</guid>
      <description>
        

&lt;p&gt;After writing about 20 R packages, I found I had accumulated several utility functions that I used across different packages, so I decided to extract them into a separate package. Previously I had been using the evil triple-colon &lt;code&gt;:::&lt;/code&gt; to access these internal utility functions. Now with &lt;strong&gt;xfun&lt;/strong&gt;, these functions have been exported, and more importantly, documented. It should be better to use them under the sun instead of in the dark.&lt;/p&gt;

&lt;p&gt;This page shows examples of a subset of functions in this package. For a full list of functions, see the help page &lt;code&gt;help(package = &#39;xfun&#39;)&lt;/code&gt;. The source package is available on Github: &lt;a href=&#34;https://github.com/yihui/xfun&#34;&gt;https://github.com/yihui/xfun&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;no-more-partial-matching-for-lists&#34;&gt;No more partial matching for lists!&lt;/h2&gt;

&lt;p&gt;I have been bitten many times by partial matching in lists, e.g., when I want &lt;code&gt;x$a&lt;/code&gt; but the element &lt;code&gt;a&lt;/code&gt; does not exist in the list &lt;code&gt;x&lt;/code&gt;, it returns the value &lt;code&gt;x$abc&lt;/code&gt; if &lt;code&gt;abc&lt;/code&gt; exists in &lt;code&gt;x&lt;/code&gt;. This is &lt;a href=&#34;https://twitter.com/xieyihui/status/782462926862954496&#34;&gt;very annoying to me&lt;/a&gt;. The function &lt;code&gt;xfun::strict_list()&lt;/code&gt; makes a list &amp;ldquo;strict&amp;rdquo; by disabling the partial matching of the &lt;code&gt;$&lt;/code&gt; operator, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(xfun)
(z = strict_list(aaa = &amp;quot;I am aaa&amp;quot;, b = 1:5))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $aaa
## [1] &amp;quot;I am aaa&amp;quot;
## 
## $b
## [1] 1 2 3 4 5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z$a  # NULL (strict matching)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z$aaa  # I am aaa
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;I am aaa&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z$b
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;z$c = &amp;quot;you can create a new element&amp;quot;

z2 = unclass(z)  # a normal list
z2$a  # partial matching
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Warning in z2$a: partial match of &#39;a&#39; to &#39;aaa&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;I am aaa&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, the default partial matching in &lt;code&gt;attr()&lt;/code&gt; can be annoying, too. The function &lt;code&gt;xfun::attr()&lt;/code&gt; is simply a shorthand of &lt;code&gt;attr(..., exact = TRUE)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I want it, or I do not want. There is no &amp;ldquo;I probably want&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;output-character-vectors-for-human-eyes&#34;&gt;Output character vectors for human eyes&lt;/h2&gt;

&lt;p&gt;When R prints a character vector, your eyes may be distracted by the indices like &lt;code&gt;[1]&lt;/code&gt;, double quotes, and escape sequences. To see a character vector in its &amp;ldquo;raw&amp;rdquo; form, you can use &lt;code&gt;cat(..., sep = &#39;\n&#39;)&lt;/code&gt;. The function &lt;code&gt;raw_string()&lt;/code&gt; marks a character vector as &amp;ldquo;raw&amp;rdquo;, and the corresponding printing function will call &lt;code&gt;cat(sep = &#39;\n&#39;)&lt;/code&gt; to print the character vector to the console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(xfun)
raw_string(head(LETTERS))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;A
B
C
D
E
F
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(x = c(&amp;quot;a \&amp;quot;b\&amp;quot;&amp;quot;, &amp;quot;hello\tworld!&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1] &amp;quot;a \&amp;quot;b\&amp;quot;&amp;quot;       &amp;quot;hello\tworld!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;raw_string(x)  # this is more likely to be what you want to see
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;a &amp;quot;b&amp;quot;
hello   world!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;print-the-content-of-a-text-file&#34;&gt;Print the content of a text file&lt;/h2&gt;

&lt;p&gt;I have used &lt;code&gt;paste(readLines(&#39;foo&#39;), collapse = &#39;\n&#39;)&lt;/code&gt; many times before I decided to write a simple wrapper function &lt;code&gt;xfun::file_string()&lt;/code&gt;. This function also makes use of &lt;code&gt;raw_string()&lt;/code&gt;, so you can see the content of a file in the console as a side-effect, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;f = system.file(&amp;quot;LICENSE&amp;quot;, package = &amp;quot;xfun&amp;quot;)
xfun::file_string(f)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;YEAR: 2018
COPYRIGHT HOLDER: Yihui Xie
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;as.character(xfun::file_string(f))  # essentially a character string
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1] &amp;quot;YEAR: 2018\nCOPYRIGHT HOLDER: Yihui Xie&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;search-and-replace-strings-in-files&#34;&gt;Search and replace strings in files&lt;/h2&gt;

&lt;p&gt;I can never remember how to properly use &lt;code&gt;grep&lt;/code&gt; or &lt;code&gt;sed&lt;/code&gt; to search and replace strings in multiple files. My favorite IDE, RStudio, has not provided this feature yet (you can only search and replace in the currently opened file). Therefore I did a quick and dirty implementation in R, including functions &lt;code&gt;gsub_files()&lt;/code&gt;, &lt;code&gt;gsub_dir()&lt;/code&gt;, and &lt;code&gt;gsub_ext()&lt;/code&gt;, to search and replace strings in multiple files under a directory. Note that the files are assumed to be encoded in UTF-8. If you do not use UTF-8, we cannot be friends. Seriously.&lt;/p&gt;

&lt;p&gt;All functions are based on &lt;code&gt;gsub_file()&lt;/code&gt;, which performs searching and replacing in a single file, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(xfun)
f = tempfile()
writeLines(c(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;), f)
gsub_file(f, &amp;quot;world&amp;quot;, &amp;quot;woRld&amp;quot;, fixed = TRUE)
file_string(f)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;hello
woRld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function &lt;code&gt;gsub_dir()&lt;/code&gt; is very flexible: you can limit the list of files by MIME types, or extensions. For example, if you want to do substitution in text files, you may use &lt;code&gt;gsub_dir(..., mimetype = &#39;^text/&#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Before using these functions, make sure that you have backed up your files, or version control your files. The files will be modified in-place. If you do not back up or use version control, there is no chance to regret.&lt;/p&gt;

&lt;h2 id=&#34;manipulate-filename-extensions&#34;&gt;Manipulate filename extensions&lt;/h2&gt;

&lt;p&gt;Functions &lt;code&gt;file_ext()&lt;/code&gt; and &lt;code&gt;sans_ext()&lt;/code&gt; are based on functins in &lt;strong&gt;tools&lt;/strong&gt;. The function &lt;code&gt;with_ext()&lt;/code&gt; adds or replaces extensions of filenames, and it is vectorized.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(xfun)
p = c(&amp;quot;abc.doc&amp;quot;, &amp;quot;def123.tex&amp;quot;, &amp;quot;path/to/foo.Rmd&amp;quot;)
file_ext(p)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;doc&amp;quot; &amp;quot;tex&amp;quot; &amp;quot;Rmd&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sans_ext(p)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;abc&amp;quot;         &amp;quot;def123&amp;quot;      &amp;quot;path/to/foo&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;with_ext(p, &amp;quot;.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;abc.txt&amp;quot;         &amp;quot;def123.txt&amp;quot;      &amp;quot;path/to/foo.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;with_ext(p, c(&amp;quot;.ppt&amp;quot;, &amp;quot;.sty&amp;quot;, &amp;quot;.Rnw&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;abc.ppt&amp;quot;         &amp;quot;def123.sty&amp;quot;      &amp;quot;path/to/foo.Rnw&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;with_ext(p, &amp;quot;html&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;abc.html&amp;quot;         &amp;quot;def123.html&amp;quot;      &amp;quot;path/to/foo.html&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;types-of-operating-systems&#34;&gt;Types of operating systems&lt;/h2&gt;

&lt;p&gt;The series of functions &lt;code&gt;is_linux()&lt;/code&gt;, &lt;code&gt;is_macos()&lt;/code&gt;, &lt;code&gt;is_unix()&lt;/code&gt;, and &lt;code&gt;is_windows()&lt;/code&gt; test the types of the OS, using the information from &lt;code&gt;.Platform&lt;/code&gt; and &lt;code&gt;Sys.info()&lt;/code&gt;, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xfun::is_macos()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xfun::is_unix()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xfun::is_linux()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xfun::is_windows()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;loading-and-attaching-packages&#34;&gt;Loading and attaching packages&lt;/h2&gt;

&lt;p&gt;Often times I see users attach a series of packages in the beginning of their scripts by repeating &lt;code&gt;library()&lt;/code&gt; multiple times. This could be easily vectorized, and the function &lt;code&gt;xfun::pkg_attach()&lt;/code&gt; does this job. For example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(testit)
library(parallel)
library(tinytex)
library(mime)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is equivalent to&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xfun::pkg_attach(c(&amp;quot;testit&amp;quot;, &amp;quot;parallel&amp;quot;, &amp;quot;tinytex&amp;quot;, &amp;quot;mime&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also see scripts that contain code to install a package if it is not available, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!requireNamespace(&amp;quot;tinytex&amp;quot;)) install.packages(&amp;quot;tinytex&amp;quot;)
library(tinytex)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This could be done via&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xfun::pkg_attach2(&amp;quot;tinytex&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function &lt;code&gt;pkg_attach2()&lt;/code&gt; is a shorthand of &lt;code&gt;pkg_attach(..., install = TRUE)&lt;/code&gt;, which means if a package is not available, install it. This function can also deal with multiple packages.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;loadable()&lt;/code&gt; tests if a package is loadable.&lt;/p&gt;

&lt;h2 id=&#34;read-write-files-in-utf-8&#34;&gt;Read/write files in UTF-8&lt;/h2&gt;

&lt;p&gt;Functions &lt;code&gt;read_utf8()&lt;/code&gt; and &lt;code&gt;write_utf8()&lt;/code&gt; can be used to read/write files in UTF-8. They are simple wrappers of &lt;code&gt;readLines()&lt;/code&gt; and &lt;code&gt;writeLines()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;convert-numbers-to-english-words&#34;&gt;Convert numbers to English words&lt;/h2&gt;

&lt;p&gt;The function &lt;code&gt;numbers_to_words()&lt;/code&gt; (or &lt;code&gt;n2w()&lt;/code&gt; for short) converts numbers to English words.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;n2w(0, cap = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Zero&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;n2w(seq(0, 121, 11), and = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;zero&amp;quot;                      
##  [2] &amp;quot;eleven&amp;quot;                    
##  [3] &amp;quot;twenty-two&amp;quot;                
##  [4] &amp;quot;thirty-three&amp;quot;              
##  [5] &amp;quot;forty-four&amp;quot;                
##  [6] &amp;quot;fifty-five&amp;quot;                
##  [7] &amp;quot;sixty-six&amp;quot;                 
##  [8] &amp;quot;seventy-seven&amp;quot;             
##  [9] &amp;quot;eighty-eight&amp;quot;              
## [10] &amp;quot;ninety-nine&amp;quot;               
## [11] &amp;quot;one hundred and ten&amp;quot;       
## [12] &amp;quot;one hundred and twenty-one&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;n2w(1e+06)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;one million&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;n2w(1e+11 + 12345678)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;one hundred billion, twelve million, three hundred forty-five thousand, six hundred seventy-eight&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;n2w(-987654321)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;minus nine hundred eighty-seven million, six hundred fifty-four thousand, three hundred twenty-one&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;n2w(1e+15 - 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;nine hundred ninety-nine trillion, nine hundred ninety-nine billion, nine hundred ninety-nine million, nine hundred ninety-nine thousand, nine hundred ninety-nine&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;check-reverse-dependencies-of-a-package&#34;&gt;Check reverse dependencies of a package&lt;/h2&gt;

&lt;p&gt;Running &lt;code&gt;R CMD check&lt;/code&gt; on the reverse dependencies of &lt;strong&gt;knitr&lt;/strong&gt; and &lt;strong&gt;rmarkdown&lt;/strong&gt; is my least favorite thing in developing R packages, because the numbers of their reverse dependencies are huge. The function &lt;code&gt;rev_check()&lt;/code&gt; reflects some of my past experience in this process. I think I have automated it as much as possible, and made it as easy as possible to discover possible new problems introduced by the current version of the package (compared to the CRAN version). Finally I can just sit back and let it run.&lt;/p&gt;

&lt;h2 id=&#34;input-a-character-vector-into-the-rstudio-source-editor&#34;&gt;Input a character vector into the RStudio source editor&lt;/h2&gt;

&lt;p&gt;The function &lt;code&gt;rstudio_type()&lt;/code&gt; inputs characters in the RStudio source editor as if they were typed by a human. I came up with the idea when preparing my talk for rstudio::conf 2018 (&lt;a href=&#34;https://yihui.name/en/2018/03/blogdown-video-rstudio-conf/&#34;&gt;see this post&lt;/a&gt; for more details).&lt;/p&gt;

&lt;h2 id=&#34;print-session-information&#34;&gt;Print session information&lt;/h2&gt;

&lt;p&gt;Since I have never been fully satisfied by the output of &lt;code&gt;sessionInfo()&lt;/code&gt;, I tweaked it to make it more useful in my use cases. For example, it is rarely useful to print out the names of base R packages, or information about the matrix products / BLAS / LAPACK. Often times I want additional information in the session information, such as the Pandoc version when &lt;strong&gt;rmarkdown&lt;/strong&gt; is used. The function &lt;code&gt;session_info()&lt;/code&gt; tweaks the output of &lt;code&gt;sessionInfo()&lt;/code&gt;, and makes it possible for other packages to append information in the output of &lt;code&gt;session_info()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can choose to print out the versions of only the packages you specify, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xfun::session_info(c(&amp;quot;xfun&amp;quot;, &amp;quot;rmarkdown&amp;quot;, &amp;quot;knitr&amp;quot;, &amp;quot;tinytex&amp;quot;), 
  dependencies = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## R version 3.5.0 (2018-04-23)
## Platform: x86_64-apple-darwin15.6.0 (64-bit)
## Running under: macOS High Sierra 10.13.5
## 
## Locale: en_US.UTF-8 / en_US.UTF-8 / en_US.UTF-8 / C / en_US.UTF-8 / en_US.UTF-8
## 
## Package version:
##   knitr_1.20.5     rmarkdown_1.10.3 tinytex_0.5.10  
##   xfun_0.2.9      
## 
## Pandoc version: 2.2.1
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>菜谱</title>
      <link>https://yihui.name/cn/recipe/</link>
      <pubDate>Thu, 28 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/cn/recipe/</guid>
      <description>
        

&lt;p&gt;收集一些简化版的菜谱在此，主要是为了方便自己看各种原料的用量及基本步骤，具体做法参见菜名上的链接，我并不严格按菜谱行事。按拼音排序。&lt;/p&gt;

&lt;h1 id=&#34;b&#34;&gt;B&lt;/h1&gt;

&lt;h2 id=&#34;冰皮月饼-https-www-xiachufang-com-recipe-100562660&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/100562660/&#34;&gt;冰皮月饼&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;糯米粉 50，粘米粉 50，澄粉 30，牛奶 230。加炼奶和玉米油搅匀，蒸 25 分钟，冷却揉成面团，分小团随意包馅，比如豆沙莲蓉等。月饼模具压成型。&lt;/p&gt;

&lt;h2 id=&#34;冰糖发糕-https-www-xiachufang-com-recipe-102150693&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/102150693/&#34;&gt;冰糖发糕&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;泡大米 500 克，冰糖 200 克热溶于水 800 克，淀粉 140 克。搅拌机打成米浆，平摊容器内上热锅蒸熟（10 分钟，视厚薄程度）。&lt;/p&gt;

&lt;h1 id=&#34;c&#34;&gt;C&lt;/h1&gt;

&lt;h2 id=&#34;糍粑-https-www-xiachufang-com-recipe-100394578&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/100394578/&#34;&gt;糍粑&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;糯米加盐煮熟，铺在保鲜膜上压平。怕麻烦则不用切块，反正就算切块了最后也很容易都粘在一起又成一整块。少油，锅煎。&lt;/p&gt;

&lt;h1 id=&#34;d&#34;&gt;D&lt;/h1&gt;

&lt;h2 id=&#34;大米发糕-https-www-xiachufang-com-recipe-101835401&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/101835401/&#34;&gt;大米发糕&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;粘米粉 150 克，水 160 克，酵母 2 克，糖 40 克，拌匀等待发酵。蒸 15 分钟。&lt;/p&gt;

&lt;h2 id=&#34;豆饼-https-www-xiachufang-com-recipe-102241724&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/102241724/&#34;&gt;豆饼&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;绿豆大米蒜苗浸泡打成浆，摊饼。撕小块炒，加鸡蛋和鸡精，可加火腿肠。&lt;/p&gt;

&lt;h1 id=&#34;h&#34;&gt;H&lt;/h1&gt;

&lt;h2 id=&#34;红薯麻团-https-www-xiachufang-com-recipe-135908&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/135908/&#34;&gt;红薯麻团&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;红薯煮熟或蒸熟，压泥，拌糯米粉，白糖视喜甜程度可加可不加，揉成面团。搓小球，滚芝麻，炸。&lt;/p&gt;

&lt;h2 id=&#34;红糖发糕-https-www-xiachufang-com-recipe-101869060&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/101869060/&#34;&gt;红糖发糕&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;白糖 20 克，红糖 80 克，加温水 245 克，酵母 4 克，两只鸡蛋，搅匀；加面粉 320 克（低筋或普通）、3 克泡打粉，拌匀成面糊，发酵一小时（时间看情况，不要发出太大气泡）。撒/铺葡萄干或红枣（可选），蒸 30 分钟，焖 5 分钟拿出来。&lt;/p&gt;

&lt;h2 id=&#34;黄焖鸡米饭-https-www-xiachufang-com-recipe-100561009&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/100561009/&#34;&gt;黄焖鸡米饭&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;鸡腿肉切块。冷油炒糖（白糖或冰糖），倒鸡块，炒，倒料酒，生姜和干辣椒，两勺酱油。如果汁水多就不要另加水，倒香菇片，白胡椒粉，盐，煮之。放青椒、味精，炒炒出锅。&lt;/p&gt;

&lt;h1 id=&#34;g&#34;&gt;G&lt;/h1&gt;

&lt;h2 id=&#34;宫保鸡丁-https-www-xiachufang-com-recipe-101761223&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/101761223/&#34;&gt;宫保鸡丁&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;生抽、料酒、淀粉腌鸡丁。炸花生米。芡汁：糖 2、醋 2、生抽 1、淀粉 1、老抽 0.5、盐 0.5。干辣椒花椒、葱姜蒜。&lt;/p&gt;

&lt;h1 id=&#34;j&#34;&gt;J&lt;/h1&gt;

&lt;h2 id=&#34;酱油炒饭-https-www-xiachufang-com-recipe-100395978&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/100395978/&#34;&gt;酱油炒饭&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;两三勺酱油、一点料酒、糖、油加入剩米饭拌匀。炒鸡蛋盛出。葱末爆锅，炒米饭，加鸡蛋炒炒，加耗油出锅。&lt;/p&gt;

&lt;h1 id=&#34;l&#34;&gt;L&lt;/h1&gt;

&lt;h2 id=&#34;辣子鸡丁-https-www-xiachufang-com-recipe-23415&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/23415/&#34;&gt;辣子鸡丁&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;鸡腿肉切丁，加盐、料酒、酱油腌之。炸鸡块两遍。捞起后放姜蒜片、花椒辣椒炸出麻辣味，倒入鸡块，加白糖、鸡粉，撒葱段、白芝麻。放辣椒时视辣度量力而为，不要盲目听信菜谱里说的在辣椒堆里找鸡块很爽，要是辣椒本身就超辣，可能会辣出人命。&lt;/p&gt;

&lt;h1 id=&#34;m&#34;&gt;M&lt;/h1&gt;

&lt;h2 id=&#34;麻花-https-www-xiachufang-com-recipe-102231657&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/102231657/&#34;&gt;麻花&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;面粉 500 克，油一大勺，糖 50 克，水 150 克，鸡蛋两个，黑芝麻适量，要炸软麻花就放小苏打 1 克（蓬松），硬麻花则不放。所有材料一起揉面，最后切细面条，每两根面条分别对折，搓搓对折缠绕，捏紧末端。炸。&lt;/p&gt;

&lt;h2 id=&#34;麻婆豆腐-https-www-xiachufang-com-recipe-1046317&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/1046317/&#34;&gt;麻婆豆腐&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;如果要炒肉末，则冷油入锅加料酒（我通常用火腿肠代替）。下豆瓣酱出红油。蒜。高汤（可买，如 chicken broth）、生抽、盐，煮。分两次勾芡。撒青蒜末（或葱花）、花椒粉（或胡椒粉）。&lt;/p&gt;

&lt;h1 id=&#34;n&#34;&gt;N&lt;/h1&gt;

&lt;h2 id=&#34;南瓜月饼-https-www-xiachufang-com-recipe-101880038&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/101880038/&#34;&gt;南瓜月饼&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;南瓜块蒸熟或少水煮熟，加糖、糯米粉、粘米粉（或淀粉）戴手套揉面团。分小团用月饼模具压成型，放在防粘纸上大火蒸 12 分钟。&lt;/p&gt;

&lt;h2 id=&#34;牛肉蛋花粥-https-www-xiachufang-com-recipe-1009363&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/1009363/&#34;&gt;牛肉蛋花粥&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;料酒、蛋清腌牛肉末；和香菇丁同炒；加生抽、盐、高汤煮；倒进粥里。倒鸡蛋，撒葱花。&lt;/p&gt;

&lt;h1 id=&#34;p&#34;&gt;P&lt;/h1&gt;

&lt;h2 id=&#34;排骨焖饭-https-www-xiachufang-com-recipe-1065180&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/1065180/&#34;&gt;排骨焖饭&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;排骨过水，加料酒、生抽、姜丝腌 20 分钟，小火煎。加葱姜蒜、（冰）糖、生抽、老抽。加香菇、胡萝卜、耗油、盐炒。和米饭同煮。&lt;/p&gt;

&lt;h1 id=&#34;q&#34;&gt;Q&lt;/h1&gt;

&lt;h2 id=&#34;戚风蛋糕-https-www-xiachufang-com-recipe-100128041&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/100128041/&#34;&gt;戚风蛋糕&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;电饭锅版本：四个鸡蛋，蛋黄加 20 克糖，45 毫升牛奶，50 毫升玉米油，100 克低筋面粉；蛋白分批加 50 克糖打发，可滴几滴醋。面糊和蛋白拌匀，倒入预热的电饭锅，煮饭键跳了之后等 20 分钟再按下去，跳了再等 40 分钟。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/101759278/&#34;&gt;烤箱版本&lt;/a&gt;做法相同，只是用 140 °C 烤 50 分钟左右。&lt;/p&gt;

&lt;h2 id=&#34;切糕-https-www-xiachufang-com-recipe-255123&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/255123/&#34;&gt;切糕&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;泡糯米。少放水，和红枣、糖同煮熟。挖出来压实。切，吃。&lt;/p&gt;

&lt;h1 id=&#34;r&#34;&gt;R&lt;/h1&gt;

&lt;h2 id=&#34;肉龙-https-www-xiachufang-com-recipe-102308501&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/102308501/&#34;&gt;肉龙&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;肉馅加葱姜末、酱油、盐、鸡汁，一个方向搅拌，视硬度加高汤。加鸡蛋清、香油。发面擀薄，抹肉馅卷起，醒一会儿，发轻即可上锅蒸 20 分钟。切段吃。&lt;/p&gt;

&lt;h1 id=&#34;s&#34;&gt;S&lt;/h1&gt;

&lt;h2 id=&#34;手撕饼-https-www-xiachufang-com-recipe-264869&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/264869/&#34;&gt;手撕饼&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;热水和面（喜咸放盐、喜甜放糖）。略多一些油炸葱头，盛出葱头后倒一勺面粉炸油酥。擀面，抹油酥和葱头，纸扇折法折起，醒一会儿，卷起再醒一会儿，擀成面饼，中小火煎之，时间稍短，免得煎硬。&lt;/p&gt;

&lt;h2 id=&#34;水煮牛肉-https-www-xiachufang-com-recipe-44888&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/44888/&#34;&gt;水煮牛肉&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;牛肉切薄片，垂直于纹理切（独孤求嫩）。盐、鸡粉、生抽、料酒、花椒粉、淀粉腌之。豆芽焯水。放油，加豆芽、豆瓣酱。炒白菜、豆瓣酱。盛出铺盆底。放油、葱姜蒜、辣椒、花椒爆锅，加豆瓣酱，加水或高汤煮。下牛肉。&lt;/p&gt;

&lt;h1 id=&#34;t&#34;&gt;T&lt;/h1&gt;

&lt;h2 id=&#34;土豆焖饭-https-www-xiachufang-com-recipe-1067779&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/1067779/&#34;&gt;土豆焖饭&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;土豆切小块（可加其它根茎类、菌菇类、火腿丁等）。油锅炒土豆丁，加老干妈酱或其它酱、盐，加米一起炒炒。倒进电饭锅加热水煮。&lt;/p&gt;

&lt;h1 id=&#34;x&#34;&gt;X&lt;/h1&gt;

&lt;h2 id=&#34;西红柿鸡蛋小油菜疙瘩汤-https-www-xiachufang-com-recipe-102151470&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/102151470/&#34;&gt;西红柿鸡蛋小油菜疙瘩汤&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;油菜切丝，西红柿切丁。面粉里少量多次加水形成疙瘩。葱花炝锅，加西红柿、番茄酱、生抽，加水煮开。加面疙瘩，放油菜、打散的鸡蛋。加香油出锅。&lt;/p&gt;

&lt;h1 id=&#34;y&#34;&gt;Y&lt;/h1&gt;

&lt;h2 id=&#34;油条-https-www-xiachufang-com-recipe-100584641&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/100584641/&#34;&gt;油条&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;面粉 250 克，鸡蛋一个。盐、小苏打、泡打粉、植物油、水，揉面。擀面成一片，切两半，堆叠，切条，筷子压，炸之。&lt;/p&gt;

&lt;h2 id=&#34;玉米松饼-https-www-xiachufang-com-recipe-100478063&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/100478063/&#34;&gt;玉米松饼&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;鸡蛋 2 只，玉米粉 6 匙，白糖 4 小匙，适量牛奶。蛋白加白糖打发。蛋黄、牛奶、玉米粉混合，略稀。不粘锅，极少量油或无油，小小火煎。自己吃不讲究颜值，所以用超大不粘锅一次性煎好更省事，不然小饼一个个伺候起来太慢。&lt;/p&gt;

&lt;h1 id=&#34;z&#34;&gt;Z&lt;/h1&gt;

&lt;h2 id=&#34;枣糕-https-www-xiachufang-com-recipe-100604372&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/100604372/&#34;&gt;枣糕&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;煮枣去核，100 克白糖（有些多）、四个鸡蛋，随便打打。180 克低粉、泡打粉、苏打粉、70 克玉米油，拌匀。烤箱 160 °C 烤 40 分钟。&lt;/p&gt;

&lt;h2 id=&#34;榨广椒-宜昌-https-www-xiachufang-com-recipe-1013931&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/1013931/&#34;&gt;榨广椒（宜昌）&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;按自己喜好（粘度）混合大米粉、玉米面、糯米粉。芋头切丝（可选），红辣椒切末，混合加盐腌之。加粉拌匀倒入容器密封一周。若没耐心等待发酵，换泡椒或有辣椒丁的辣椒酱直接拌面。&lt;/p&gt;

&lt;h2 id=&#34;珍珠丸子-https-www-xiachufang-com-recipe-1006438&#34;&gt;&lt;a href=&#34;https://www.xiachufang.com/recipe/1006438/&#34;&gt;珍珠丸子&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;泡糯米。肉馅加葱姜蓉、料酒、胡椒粉、糖、盐、鸡精、生抽、香油，拌好放冰箱。团肉丸，裹糯米。蒸 20 分钟。&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Why TinyTeX?</title>
      <link>https://yihui.name/tinytex/pain/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/tinytex/pain/</guid>
      <description>
        &lt;p&gt;Some developers may doubt if I&amp;rsquo;m just reinventing wheels. I certainly don&amp;rsquo;t want to reinvent wheels for no reason. As I said on the homepage, my own pain with existing LaTeX distributions is that they are often too big, and the documentation, while being comprehensive and useful, usually does not highlight the most useful part to me (how to find and install a missing package).&lt;/p&gt;

&lt;p&gt;I also dislike the fact that it often requires &lt;code&gt;sudo&lt;/code&gt; (on *nix) to manage LaTeX packages. For personal computers, I don&amp;rsquo;t see any point of requiring &lt;code&gt;sudo&lt;/code&gt;, considering the fact that TeX Live can be a self-contained folder that can be placed anywhere on your computer. I waited for a couple of years before &lt;code&gt;tlmgr&lt;/code&gt; was finally available on Debian/Ubuntu, and I was &lt;a href=&#34;https://twitter.com/xieyihui/status/397238590523973632&#34;&gt;extremely excited&lt;/a&gt; about it, but soon disappointed, because it seemed to be broken and not usable at all (couldn&amp;rsquo;t do anything with it). I checked it again this year, and it still seems to be broken. Perhaps I didn&amp;rsquo;t use it correctly (anything I try will lead to errors), but you are only allowed to use the user mode of &lt;code&gt;tlmgr&lt;/code&gt;, which is very restrictive to me.&lt;/p&gt;

&lt;p&gt;My daily OS is macOS, and the officially recommended TeX Live distribution is MacTeX, which contains several additional packages that I don&amp;rsquo;t need, such as the TeX Live Utility (I know how to use the &lt;code&gt;tlmgr&lt;/code&gt; command), TeXShop (I use R Markdown primarily and hope not to edit or even read raw LaTeX if possible), LaTeXiT, and so on.&lt;/p&gt;

&lt;p&gt;In fact, I appreciate one nice feature of MiKTeX on Windows (which seems to be cross-platform now): automatically installing missing LaTeX packages. I think this is very helpful, so I borrowed this feature to the R package &lt;strong&gt;tinytex&lt;/strong&gt;, and R users can enjoy the same feature when using TeX Live or TinyTeX. That said, even the basic MiKTeX is still too big, and one issue that drives me crazy is &lt;code&gt;bibtex.exe&lt;/code&gt; in MiKTeX: it always adds the &lt;code&gt;.bib&lt;/code&gt; extension to the bibliography database file in the &lt;code&gt;.aux&lt;/code&gt; file, e.g., when we have &lt;code&gt;\bibliography{foo.bib}&lt;/code&gt; in &lt;code&gt;bar.tex&lt;/code&gt;, &lt;code&gt;bibtex.exe&lt;/code&gt; generates &lt;code&gt;\bibdata{foo.bib.bib}&lt;/code&gt; in &lt;code&gt;bar.aux&lt;/code&gt;. Anyway, I have &lt;a href=&#34;https://github.com/yihui/tinytex/blob/4275a375c6/R/latex.R#L189-L196&#34;&gt;patched this issue&lt;/a&gt; in the R package &lt;strong&gt;tinytex&lt;/strong&gt; for Windows users who use MiKTeX. TeX Live users don&amp;rsquo;t suffer from this issue.&lt;/p&gt;

&lt;p&gt;On this page, I&amp;rsquo;ll let other users share their stories of installing and managing LaTeX. First I want to show a list of painful cases that I was aware of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://ubuntuforums.org/showthread.php?t=395863&#34;&gt;Why LaTeX is such a bloated system?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://tex.stackexchange.com/q/43862/9128&#34;&gt;Is there a lightweight implementation/distribution of TeX for Mac OSX?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://tex.stackexchange.com/q/81802/9128&#34;&gt;Installing (a lightweight version of) latex on an external hard drive&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;texlive-full is &lt;a href=&#34;https://github.com/rstudio/rticles/pull/130#issuecomment-313732003&#34;&gt;too big&lt;/a&gt;, &lt;a href=&#34;https://github.com/rocker-org/rocker/issues/266&#34;&gt;too big&lt;/a&gt;, and &lt;a href=&#34;https://github.com/road2stat/liftr/issues/25&#34;&gt;just too big&lt;/a&gt; for Docker images&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://tex.stackexchange.com/q/18939/9128&#34;&gt;Which LaTeX to install on Linux?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Missing LaTeX packages confuse users &lt;a href=&#34;https://github.com/rstudio/rmarkdown/issues/359&#34;&gt;forever&lt;/a&gt;, &lt;a href=&#34;https://github.com/rstudio/rmarkdown/issues/1076&#34;&gt;forever&lt;/a&gt;, &lt;a href=&#34;https://github.com/rstudio/rmarkdown/issues/1393&#34;&gt;forever&lt;/a&gt;, and it takes &lt;a href=&#34;https://twitter.com/xieyihui/status/763805846807547904&#34;&gt;forever&lt;/a&gt; to figure them out and install. &lt;a href=&#34;https://stackoverflow.com/q/47400936/559676&#34;&gt;Error messages&lt;/a&gt; can also be confusing. Sometimes we just &lt;a href=&#34;https://github.com/rstudio/bookdown/issues/507&#34;&gt;don&amp;rsquo;t have a clue&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MiKTeX &lt;a href=&#34;https://github.com/rstudio/bookdown/issues/531&#34;&gt;might fail&lt;/a&gt; and we don&amp;rsquo;t know what the error message &amp;ldquo;GUI framework cannot be initialized&amp;rdquo; means. Sometimes we have &lt;a href=&#34;https://stackoverflow.com/questions/48892499/compile-rmarkdown-document-with-render#comment84801684_48892499&#34;&gt;no clue&lt;/a&gt; why it doesn&amp;rsquo;t work.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below are stories and experiences contributed by other users:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Removed TeX Live from my system (openSUSE): 1.5gb. Installed TinyTeX + the dependencies to compile my thesis: 150mb!!!! This is great!&lt;/p&gt;

&lt;p&gt;&amp;mdash; &lt;a href=&#34;https://twitter.com/brodriguesco/status/942162790587957248&#34;&gt;Bruno Rodrigues&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;Really liking the simplicity of tinytex package. Easy to get up and running to knit PDFs. No need for slow LaTeX install.&lt;/p&gt;

&lt;p&gt;&amp;mdash; &lt;a href=&#34;https://twitter.com/lingwhatics/status/941766989424537602&#34;&gt;Daley Mikalson&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;A tiny LaTeX distribution easy to install from RStudio or on Travis CI is just what we needed!&lt;/p&gt;

&lt;p&gt;&amp;mdash; &lt;a href=&#34;https://twitter.com/PhilGrosjean/status/941241878309232640&#34;&gt;Philippe Grosjean&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;Seriously one of my only holdups teaching LaTeX in Rmarkdown (still taught it anyway) is now solved.&lt;/p&gt;

&lt;p&gt;&amp;mdash; &lt;a href=&#34;https://twitter.com/healthandstats/status/941169151749406720&#34;&gt; Tyson Barrett&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;Tried TinyTeX with rmarkdown and both English and Chinese rendering. The most smooth experience ever using LaTeX!&lt;/p&gt;

&lt;p&gt;&amp;mdash; &lt;a href=&#34;https://twitter.com/renkun_ken/status/941352666730455041&#34;&gt;Kun Ren&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;TinyTeX is awesome, if it had existed before I would have saved hours of my life spent dealing with LaTeX packages and failed R Markdown knits&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;mdash; &lt;a href=&#34;https://github.com/rstudio/bookdown/issues/292#issuecomment-356480809&#34;&gt;Antonio Vazquez Brust&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;Many people don&amp;rsquo;t realize that Texlive on some Linux systems (say you need a rstudio server) doesn&amp;rsquo;t come with the TeX package manager. If the package you need is not in their system, you are basically screwed as you can&amp;rsquo;t even install it. TinyTeX solves this problem and makes everything sweet and easy. Also, after using it for more than a month, I found the  messages of tinytex are very helpful, comparing with basically NULL in texlive.&lt;/p&gt;

&lt;p&gt;&amp;mdash; &lt;a href=&#34;https://community.rstudio.com/t/texlive-distribution-on-centos-for-rstudio-server-and-connect/2916&#34;&gt;Hao Zhu&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m a novice with R and I found the entire process of installing rmarkdown, knitr, MiKTeX, and pandoc and then reconciling all their directories very difficult. [&amp;hellip;] The 3-4 hour detour into MiKTeX etc and how to produce PDFs was a frustration experience to say the least. (Up and running with TinyTeX five minutes later&amp;hellip;)&lt;/p&gt;

&lt;p&gt;&amp;mdash; Justin Shapiro&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;If you work in a locked down windows corporate enviroment and spent countless hours with MiKTeX or portable MiKTeX, you&amp;rsquo;ll want to buy @xieyihui lunch.&lt;/p&gt;

&lt;p&gt;&amp;mdash; &lt;a href=&#34;https://twitter.com/ThomasSpeidel/status/957856056108920835&#34;&gt;Thomas Speidel&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;Too bad, this computer had a good month of TeX-free.&lt;/p&gt;

&lt;p&gt;&amp;mdash; &lt;a href=&#34;https://twitter.com/romain_francois/status/979022989634174976&#34;&gt;Romain François&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;d been avoiding installing LaTeX on my macOS and Windows machines b/c it&amp;rsquo;s always such a hassle. Just learned about about TinyTeX today and easily got setup on both machines.&lt;/p&gt;

&lt;p&gt;&amp;mdash; &lt;a href=&#34;https://twitter.com/jdblischak/status/974066342780461056&#34;&gt;John Blischak&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;Like 2 hours later, I&amp;rsquo;m not sure I want to know, but there &lt;em&gt;must&lt;/em&gt; be a faster way of updating all my TeX packages than the ftp in TeX Live Utility&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;mdash; &lt;a href=&#34;https://twitter.com/dataandme/status/994531189217259521&#34;&gt;Mara Averick&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;Installing a complete version of MiKTeX is a freaking nightmare though. Don&amp;rsquo;t know if it&amp;rsquo;s my internet connection or what but I just can&amp;rsquo;t get it all installed in one go. I finally just did the basic install and am selecting batches of pkgs at a time to add.&lt;/p&gt;

&lt;p&gt;[&amp;hellip;] I just installed this (TinyTeX) and it was SO EASY and I&amp;rsquo;m kind of upset that I didn&amp;rsquo;t know about it before. Gonna be shouting this one &lt;a href=&#34;https://twitter.com/swmpkim/status/1014546819085369344&#34;&gt;from the rooftops&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;mdash; &lt;a href=&#34;https://twitter.com/swmpkim/status/1014514680088399874&#34;&gt;Kim Cressman&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

        
      </description>
    </item>
    
    <item>
      <title>formatR</title>
      <link>https://yihui.name/formatr/</link>
      <pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/formatr/</guid>
      <description>
        

&lt;script type=&#34;text/javascript&#34;&gt;
// redirect from CRAN to my personal website
if (location.protocol === &#39;https:&#39; &amp;&amp; location.href.match(&#39;yihui.name&#39;) === null)
  location.href = &#39;https://yihui.name/formatR&#39;;
&lt;/script&gt;

&lt;h1 id=&#34;1-installation&#34;&gt;1. Installation&lt;/h1&gt;

&lt;p&gt;You can install &lt;strong&gt;formatR&lt;/strong&gt; from &lt;a href=&#34;https://cran.r-project.org/package=formatR&#34;&gt;CRAN&lt;/a&gt;, or &lt;a href=&#34;https://xran.yihui.name&#34;&gt;XRAN&lt;/a&gt; if you want to test the latest development version:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;formatR&amp;quot;, repos = &amp;quot;http://cran.rstudio.com&amp;quot;)
#&#39; to install the development version, run
#&#39; install.packages(&#39;formatR&#39;, repos = &#39;https://xran.yihui.name&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or check out the &lt;a href=&#34;https://github.com/yihui/formatR&#34;&gt;Github repository&lt;/a&gt; and install from source if you know what this means. This page is always based on the development version.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(formatR)
sessionInfo()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## R version 3.4.2 (2017-09-28)
## Platform: x86_64-apple-darwin15.6.0 (64-bit)
## Running under: macOS High Sierra 10.13.1
## 
## Matrix products: default
## BLAS: /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRblas.0.dylib
## LAPACK: /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRlapack.dylib
## 
## locale:
## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  base     
## 
## other attached packages:
## [1] formatR_1.5
## 
## loaded via a namespace (and not attached):
## [1] compiler_3.4.2  magrittr_1.5    tools_3.4.2     stringi_1.1.6  
## [5] knitr_1.18      methods_3.4.2   stringr_1.2.0   evaluate_0.10.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;2-reformat-r-code&#34;&gt;2. Reformat R code&lt;/h1&gt;

&lt;p&gt;The &lt;strong&gt;formatR&lt;/strong&gt; package was designed to reformat R code to improve readability; the main workhorse is the function &lt;code&gt;tidy_source()&lt;/code&gt;. Features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;long lines of code and comments are reorganized into appropriately shorter ones&lt;/li&gt;
&lt;li&gt;spaces and indent are added where necessary&lt;/li&gt;
&lt;li&gt;comments are preserved in most cases&lt;/li&gt;
&lt;li&gt;the number of spaces to indent the code (i.e. tab width) can be specified (default is 4)&lt;/li&gt;
&lt;li&gt;an &lt;code&gt;else&lt;/code&gt; statement in a separate line without the leading &lt;code&gt;}&lt;/code&gt; will be moved one line back&lt;/li&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt; as an assignment operator can be replaced with &lt;code&gt;&amp;lt;-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the left brace &lt;code&gt;{&lt;/code&gt; can be moved to a new line&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is an example of what &lt;code&gt;tidy_source()&lt;/code&gt; can do. The source code is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## comments are retained;
# a comment block will be reflowed if it contains long comments;
#&#39; roxygen comments will not be wrapped in any case
1+1

if(TRUE){
x=1  # inline comments
}else{
x=2;print(&#39;Oh no... ask the right bracket to go away!&#39;)}
1*3 # one space before this comment will become two!
2+2+2    # only &#39;single quotes&#39; are allowed in comments

lm(y~x1+x2, data=data.frame(y=rnorm(100),x1=rnorm(100),x2=rnorm(100)))  ### a linear model
1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1  # comment after a long line
## here is a long long long long long long long long long long long long long comment which will be wrapped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can copy the above code to clipboard, and type &lt;code&gt;tidy_source(width.cutoff = 50)&lt;/code&gt; to get:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## comments are retained; a comment block will be
## reflowed if it contains long comments;
#&#39; roxygen comments will not be wrapped in any case
1 + 1

if (TRUE) {
    x = 1  # inline comments
} else {
    x = 2
    print(&amp;quot;Oh no... ask the right bracket to go away!&amp;quot;)
}
1 * 3  # one space before this comment will become two!
2 + 2 + 2  # only &#39;single quotes&#39; are allowed in comments

lm(y ~ x1 + x2, data = data.frame(y = rnorm(100), x1 = rnorm(100), 
    x2 = rnorm(100)))  ### a linear model
1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 
    1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1  # comment after a long line
## here is a long long long long long long long long
## long long long long long comment which will be
## wrapped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Two applications of &lt;code&gt;tidy_source()&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tidy_dir()&lt;/code&gt; can reformat all R scripts under a directory&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;usage()&lt;/code&gt; can reformat the usage of a function, e.g. compare &lt;code&gt;usage()&lt;/code&gt; with the default output of &lt;code&gt;args()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(formatR)
usage(glm, width = 40)  # can set arbitrary width here
## glm(formula, family = gaussian, data,
##     weights, subset, na.action,
##     start = NULL, etastart, mustart,
##     offset, control = list(...),
##     model = TRUE, method = &amp;quot;glm.fit&amp;quot;,
##     x = FALSE, y = TRUE,
##     contrasts = NULL, ...)
args(glm)
## function (formula, family = gaussian, data, weights, subset, 
##     na.action, start = NULL, etastart, mustart, offset, control = list(...), 
##     model = TRUE, method = &amp;quot;glm.fit&amp;quot;, x = FALSE, y = TRUE, contrasts = NULL, 
##     ...) 
## NULL
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;3-the-graphical-user-interface&#34;&gt;3. The Graphical User Interface&lt;/h1&gt;

&lt;p&gt;If the &lt;strong&gt;shiny&lt;/strong&gt; packages has been installed, the function &lt;code&gt;tidy_app()&lt;/code&gt; can launch a Shiny app to reformat R code like this (&lt;a href=&#34;https://yihui.shinyapps.io/formatR/&#34;&gt;live demo&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;formatR::tidy_app()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://yihui.shinyapps.io/formatR/&#34;&gt;&lt;img src=&#34;https://db.yihui.name/imgur/lUgtEAb.png&#34; alt=&#34;R source code before tidying&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After hitting the &lt;code&gt;Tidy&lt;/code&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://yihui.shinyapps.io/formatR/&#34;&gt;&lt;img src=&#34;https://db.yihui.name/imgur/TBZm0B8.png&#34; alt=&#34;R source code after tidying&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;4-evaluate-the-code-and-mask-output-in-comments&#34;&gt;4. Evaluate the code and mask output in comments&lt;/h1&gt;

&lt;p&gt;It is often a pain when trying to copy R code from other people&amp;rsquo;s code which has been run in R and the prompt characters (usually &lt;code&gt;&amp;gt;&lt;/code&gt;) are attached in the beginning of code, because we have to remove all the prompts &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; manually before we are able to run the code. However, it will be convenient for the reader to understand the code if the output of the code can be attached. This motivates the function &lt;code&gt;tidy_eval()&lt;/code&gt;, which uses &lt;code&gt;tidy_source()&lt;/code&gt; to reformat the source code, evaluates the code in chunks, and attaches the output of each chunk as comments which will not actually break the original source code. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(123)
tidy_eval(text = c(&amp;quot;a&amp;lt;-1+1;a  # print the value&amp;quot;, &amp;quot;matrix(rnorm(10),5)&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;a &amp;lt;- 1 + 1
a  # print the value
## [1] 2

matrix(rnorm(10), 5)
##          [,1]    [,2]
## [1,] -0.56048  1.7151
## [2,] -0.23018  0.4609
## [3,]  1.55871 -1.2651
## [4,]  0.07051 -0.6869
## [5,]  0.12929 -0.4457
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default source of the code is from clipboard like &lt;code&gt;tidy_source()&lt;/code&gt;, so we can copy our code to clipboard, and simply run this in R:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(formatR)
tidy_eval()
# without specifying any arguments, it reads code from clipboard
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;5-showcase&#34;&gt;5. Showcase&lt;/h1&gt;

&lt;p&gt;We continue the example code in Section 2, using different arguments in &lt;code&gt;tidy_source()&lt;/code&gt; such as &lt;code&gt;arrow&lt;/code&gt;, &lt;code&gt;blank&lt;/code&gt;, &lt;code&gt;indent&lt;/code&gt;, &lt;code&gt;brace.newline&lt;/code&gt; and &lt;code&gt;comment&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h2 id=&#34;replace-with&#34;&gt;Replace &lt;code&gt;=&lt;/code&gt; with &lt;code&gt;&amp;lt;-&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (TRUE) {
    x &amp;lt;- 1  # inline comments
} else {
    x &amp;lt;- 2
    print(&amp;quot;Oh no... ask the right bracket to go away!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;discard-blank-lines&#34;&gt;Discard blank lines&lt;/h2&gt;

&lt;p&gt;Note the 5th line (an empty line) was discarded:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## comments are retained; a comment block will be reflowed if it
## contains long comments;
#&#39; roxygen comments will not be wrapped in any case
1 + 1
if (TRUE) {
    x = 1  # inline comments
} else {
    x = 2
    print(&amp;quot;Oh no... ask the right bracket to go away!&amp;quot;)
}
1 * 3  # one space before this comment will become two!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reindent-code-2-spaces-instead-of-4&#34;&gt;Reindent code (2 spaces instead of 4)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (TRUE) {
  x = 1  # inline comments
} else {
  x = 2
  print(&amp;quot;Oh no... ask the right bracket to go away!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;move-left-braces-to-new-lines&#34;&gt;Move left braces &lt;code&gt;{&lt;/code&gt; to new lines&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (TRUE)
{
    x = 1  # inline comments
} else
{
    x = 2
    print(&amp;quot;Oh no... ask the right bracket to go away!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;discard-comments&#34;&gt;Discard comments&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1 + 1
if (TRUE) {
    x = 1
} else {
    x = 2
    print(&amp;quot;Oh no... ask the right bracket to go away!&amp;quot;)
}
1 * 3
2 + 2 + 2
lm(y ~ x1 + x2, data = data.frame(y = rnorm(100), x1 = rnorm(100), 
    x2 = rnorm(100)))
1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 
    1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;6-further-notes&#34;&gt;6. Further notes&lt;/h1&gt;

&lt;p&gt;The tricks used in this packages are very dirty. There might be dangers in using the functions in &lt;strong&gt;formatR&lt;/strong&gt;. Please read the next section carefully to know exactly how comments are preserved. The best strategy to avoid failure is to put comments in complete lines or after &lt;em&gt;complete&lt;/em&gt; R expressions. Below are some known cases in which &lt;code&gt;tidy_source()&lt;/code&gt; fails.&lt;/p&gt;

&lt;h2 id=&#34;in-line-comments-after-an-incomplete-expression-or&#34;&gt;In-line comments after an incomplete expression or ;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1 + 2 + ## comments after an incomplete line
    3 + 4
x &amp;lt;- ## this is not a complete expression
     5
x &amp;lt;- 1; # you should not use ; here!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is not a good idea to interrupt R code with comments and sometimes it can be confusing &amp;ndash; comments should come after a complete R expression naturally; by the way, &lt;code&gt;tidy_source()&lt;/code&gt; will move the comments after &lt;code&gt;{&lt;/code&gt; to the next line, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (TRUE) {## comments
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will become&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (TRUE) {
    ## comments
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;inappropriate-blank-lines&#34;&gt;Inappropriate blank lines&lt;/h2&gt;

&lt;p&gt;Blank lines are often used to separate complete chunks of R code, and arbitrary blank lines may cause failures in &lt;code&gt;tidy_source()&lt;/code&gt; as well when the argument &lt;code&gt;blank = TRUE&lt;/code&gt;, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (TRUE)

{&#39;this is a BAD style of R programming!&#39;} else &#39;failure!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There should not be a blank line after the &lt;code&gt;if&lt;/code&gt; statement. Of course &lt;code&gt;blank = FALSE&lt;/code&gt; will not fail in this case.&lt;/p&gt;

&lt;h2 id=&#34;with-comments&#34;&gt;&lt;code&gt;?&lt;/code&gt; with comments&lt;/h2&gt;

&lt;p&gt;We can use the question mark (&lt;code&gt;?&lt;/code&gt;) to view the help page, but &lt;strong&gt;formatR&lt;/strong&gt; package is unable to correctly format the code using &lt;code&gt;?&lt;/code&gt; with comments, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?sd  # help on sd()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, it is recommended to use the function &lt;code&gt;help()&lt;/code&gt; instead of the short-hand version &lt;code&gt;?&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;and-from-the-rlang-package&#34;&gt;&lt;code&gt;!!&lt;/code&gt; and &lt;code&gt;!!!&lt;/code&gt; from the &lt;strong&gt;rlang&lt;/strong&gt; package&lt;/h2&gt;

&lt;p&gt;The syntactic shortcuts &lt;code&gt;!!&lt;/code&gt; and &lt;code&gt;!!!&lt;/code&gt; from the &lt;strong&gt;rlang&lt;/strong&gt; packages will be ruined by &lt;code&gt;tidy_source()&lt;/code&gt;, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rlang::quo(mean(!! 1:10 * 2))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will be reformatted as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rlang::quo(mean(!(!1:10 * 2)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;with-comments-1&#34;&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt; with comments&lt;/h2&gt;

&lt;p&gt;We can also use the right arrow &lt;code&gt;-&amp;gt;&lt;/code&gt; for assignment, e.g. &lt;code&gt;1:10 -&amp;gt; x&lt;/code&gt;. I believe this flexibility is worthless, and it is amazing that a language has three assignment operators: &lt;code&gt;&amp;lt;-&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;-&amp;gt;&lt;/code&gt; (whereas almost all other languages uses &lt;code&gt;=&lt;/code&gt; for assignment). Bad news for &lt;strong&gt;formatR&lt;/strong&gt; is that it is unable to format code using both &lt;code&gt;-&amp;gt;&lt;/code&gt; and comments in a line, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1:10 -&amp;gt; x  # assignment with right arrow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I recommend you to use &lt;code&gt;&amp;lt;-&lt;/code&gt; or &lt;code&gt;=&lt;/code&gt; consistently. What is more important is consistency. I always use &lt;code&gt;=&lt;/code&gt; because it causes me no confusion (I do not believe it is ever possible for people to interpret &lt;code&gt;fun(a = 1)&lt;/code&gt; as assigning &lt;code&gt;1&lt;/code&gt; to a variable &lt;code&gt;a&lt;/code&gt; instead of passing an argument value) and &lt;code&gt;&amp;lt;-&lt;/code&gt; is more dangerous because it works everywhere (you might have unconsciously created a new variable &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;fun(a &amp;lt;- 1)&lt;/code&gt;; see &lt;a href=&#34;https://stat.ethz.ch/pipermail/r-devel/2011-December/062786.html&#34;&gt;an example here&lt;/a&gt;). The only disadvantage is that most R people use &lt;code&gt;&amp;lt;-&lt;/code&gt; so it may be difficult to collaborate with other people.&lt;/p&gt;

&lt;h2 id=&#34;the-pipe-operator&#34;&gt;The pipe operator &lt;code&gt;%&amp;gt;%&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Although &lt;code&gt;tidy_source()&lt;/code&gt; won&amp;rsquo;t ruin your code that contains the pipes, you won&amp;rsquo;t be happy with it: your line breaks after the pipes won&amp;rsquo;t be preserved. See &lt;a href=&#34;https://github.com/yihui/formatR/issues/54&#34;&gt;#54&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;7-how-does-tidy-source-actually-work&#34;&gt;7. How does &lt;code&gt;tidy_source()&lt;/code&gt; actually work?&lt;/h1&gt;

&lt;p&gt;In a nutshell, &lt;code&gt;tidy_source(text = code)&lt;/code&gt; is basically &lt;code&gt;deparse(parse(text = code))&lt;/code&gt;, but actually it is more complicated only because of one thing: &lt;code&gt;deparse()&lt;/code&gt; drops comments, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;deparse(parse(text = &amp;quot;1+2-3*4/5 # a comment&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;expression(1 + 2 - 3 * 4/5)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The method to preserve comments is to protect them as strings in R expressions. For example, there is a single line of comments in the source code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;  # asdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will be first masked as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;invisible(&amp;quot;.IDENTIFIER1  # asdf.IDENTIFIER2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is a legal R expression, so &lt;code&gt;base::parse()&lt;/code&gt; can deal with it and will no longer remove the disguised comments.  In the end the identifiers will be removed to restore the original comments, i.e. the strings &lt;code&gt;invisible(&amp;quot;.IDENTIFIER1&lt;/code&gt; and &lt;code&gt;.IDENTIFIER2&amp;quot;)&lt;/code&gt; are replaced with empty strings.&lt;/p&gt;

&lt;p&gt;Inline comments are handled differently: two spaces will be added before the hash symbol &lt;code&gt;#&lt;/code&gt;, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1+1#  comments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will become&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1+1  #  comments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inline comments are first disguised as a weird operation with its preceding R code, which is essentially meaningless but syntactically correct!  For example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1+1 %InLiNe_IdEnTiFiEr% &amp;quot;#  comments&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then &lt;code&gt;base::parse()&lt;/code&gt; will deal with this expression; again, the disguised comments will not be removed. In the end, inline comments will be freed as well (remove the operator &lt;code&gt;%InLiNe_IdEnTiFiEr%&lt;/code&gt; and surrounding double quotes).&lt;/p&gt;

&lt;p&gt;All these special treatments to comments are due to the fact that &lt;code&gt;base::parse()&lt;/code&gt; and &lt;code&gt;base::deparse()&lt;/code&gt; can tidy the R code at the price of dropping all the comments.&lt;/p&gt;

&lt;h1 id=&#34;8-global-options&#34;&gt;8. Global options&lt;/h1&gt;

&lt;p&gt;There are global options which can override some arguments in &lt;code&gt;tidy_source()&lt;/code&gt;:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;argument&lt;/th&gt;
&lt;th&gt;global option&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;options(&#39;formatR.comment&#39;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;blank&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;options(&#39;formatR.blank&#39;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;arrow&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;options(&#39;formatR.arrow&#39;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;indent&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;options(&#39;formatR.indent&#39;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;brace.newline&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;options(&#39;formatR.brace.newline&#39;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Also note that single lines of long comments will be wrapped into shorter ones automatically, but roxygen comments will not be wrapped (i.e., comments that begin with &lt;code&gt;#&#39;&lt;/code&gt;).&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>The R package tinytex</title>
      <link>https://yihui.name/tinytex/r/</link>
      <pubDate>Sun, 03 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/tinytex/r/</guid>
      <description>
        

&lt;p&gt;You can install the &lt;strong&gt;tinytex&lt;/strong&gt; package from either CRAN or Github:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# CRAN version
install.packages(&#39;tinytex&#39;)

# or the development version on Github
devtools::install_github(&#39;yihui/tinytex&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The package mainly provides two sets of functions: functions to manage TinyTeX, and those that help compile LaTeX documents to PDF.&lt;/p&gt;

&lt;h2 id=&#34;manage-tinytex&#34;&gt;Manage TinyTeX&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;tlmgr_*&lt;/code&gt; family of functions calls the TeX Live utility &lt;code&gt;tlmgr&lt;/code&gt; to manage TeX Live, e.g., install or update LaTeX packages. See &lt;code&gt;?tinytex::tlmgr&lt;/code&gt; for the full documentation. The functions &lt;code&gt;tlmgr_search()&lt;/code&gt;, &lt;code&gt;tlmgr_install()&lt;/code&gt;, and &lt;code&gt;tlmgr_update()&lt;/code&gt; may be the ones that you will most frequently use if you want to manage TeX Live by yourself.&lt;/p&gt;

&lt;h2 id=&#34;compile-latex-documents&#34;&gt;Compile LaTeX Documents&lt;/h2&gt;

&lt;p&gt;The &amp;ldquo;loveliest&amp;rdquo; feature of LaTeX is that you often have to compile a document multiple times to get the PDF, when you have cross-references (e.g., a bibliography or index).&lt;/p&gt;

&lt;p&gt;A common reason for LaTeX to fail is missing LaTeX packages. Sometimes it is not straightforward to figure out which package is missing (certain packages may contain multiple &lt;code&gt;*.sty&lt;/code&gt; or &lt;code&gt;*.cls&lt;/code&gt; files). If you use pre-packaged TeX Live, this problem can be even worse. For example, on Debian/Ubuntu, LaTeX packages are grouped into collections and built to different Debian packages, so even only if one LaTeX package is missing, you have to install a big Debian package, which contains the package you need and possibly many other packages that you don&amp;rsquo;t need.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;latexmk()&lt;/code&gt; in &lt;strong&gt;tinytex&lt;/strong&gt; tries to solve these two problems automatically. With a chosen LaTeX engine (&lt;code&gt;pdflatex&lt;/code&gt;, &lt;code&gt;xelatex&lt;/code&gt;, or &lt;code&gt;lualatex&lt;/code&gt;), it compiles a LaTeX document three times by default, and also tries to install missing packages by default. The missing packages are detected from the LaTeX log via the function &lt;code&gt;tinytex::parse_packages()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can change the maximum number of times to compile the document, and disable the automatic installation of missing packages. See &lt;code&gt;?tinytex::latexmk&lt;/code&gt; for details.&lt;/p&gt;

&lt;p&gt;The three function &lt;code&gt;pdflatex()&lt;/code&gt;, &lt;code&gt;xelatex()&lt;/code&gt;, and &lt;code&gt;lualatex()&lt;/code&gt; are wrapper functions based on &lt;code&gt;latexmk()&lt;/code&gt;. For example, &lt;code&gt;pdflatex()&lt;/code&gt; is basically &lt;code&gt;latexmk(engine = &#39;pdflatex&#39;, emulation = TRUE)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The implementation is clumsy. Don&amp;rsquo;t read the source code. I may not improve it in the future. I have wasted enough time on LaTeX, and a clumsy implementation should already save me a lot of time. Perfect is the enemy of good.&lt;/p&gt;

&lt;h2 id=&#34;debugging&#34;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;If an error occurs when compiling a LaTeX to PDF, and the error message is not clear, you may set the option&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;options(tinytex.verbose = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;before you compile the document. If you are using R Markdown and the &lt;code&gt;Knit&lt;/code&gt; button in RStudio, you should set the option in a code chunk in the R Markdown document.&lt;/p&gt;

&lt;h2 id=&#34;other-latex-distributions&#34;&gt;Other LaTeX distributions&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;tinytex&lt;/strong&gt; package is not tied to TinyTeX, although (unsurprisingly) it should work best with TinyTeX. Specifically:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The feature of automatically compiling a LaTeX document for a number of times until all cross-references are resolved is available to any LaTeX distributions, e.g., you can use MiKTeX on Windows if you want.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The feature of automatically installing missing LaTeX packages requires the LaTeX distribution to be TeX Live (remember, TinyTeX is a custom version of TeX Live, so TinyTeX also works). It also requires &lt;code&gt;tlmgr install&lt;/code&gt; to be able to install packages. If you use a copy of TeX Live or TinyTeX installed by your system admin, and you are not given the privileges to modify it, this feature won&amp;rsquo;t work for you. If you installed TinyTeX on your personal computer, chances are it will work. This feature is not available to MiKTeX users, but you won&amp;rsquo;t need it, either, because MiKTeX itself can automatically install missing packages, too.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

        
      </description>
    </item>
    
    <item>
      <title>TinyTeX 中文文档</title>
      <link>https://yihui.name/tinytex/cn/</link>
      <pubDate>Sun, 03 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/tinytex/cn/</guid>
      <description>
        

&lt;p&gt;TinyTeX 是一个瘦身版的 &lt;a href=&#34;https://tug.org/texlive/&#34;&gt;TeX Live&lt;/a&gt;。TeX Live 的庞大体型问题&lt;a href=&#34;https://yihui.name/cn/2017/06/lightweight-texlive/&#34;&gt;困扰我多年&lt;/a&gt;，在 2018 年之前我终于抽出一周时间来解决这个问题，其实方案很简单：把对普通用户毫无用处的源代码和文档去掉即可。具体技术细节参见&lt;a href=&#34;https://yihui.name/tinytex/faq/&#34;&gt;常见问题&lt;/a&gt;，总体而言就是利用了 TeX Live 的自动化安装方式，配置文件中设置不要安装源文件和文档。&lt;/p&gt;

&lt;p&gt;TinyTeX 假设你不惧怕或反感使用命令行，但其实需要的命令行指令并不复杂，常见任务都可以通过一行命令搞定。如果不清楚如何打开系统命令行窗口，请参见常见问题。&lt;/p&gt;

&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;

&lt;p&gt;TinyTeX 的安装和维护对 R 用户来说最简单，两行 R 代码加上两到六分钟的等待时间：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&#39;yihui/tinytex&#39;)
tinytex::install_tinytex()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装 TinyTeX 之前建议卸载系统中已有的 LaTeX 套件，如 TeX Live、MiKTeX、MacTeX 等。一个系统中最好不要有两个 LaTeX 套件同时存在，否则可能会产生冲突。&lt;/p&gt;

&lt;p&gt;对其它用户，请参阅&lt;a href=&#34;https://yihui.name/tinytex/&#34;&gt;首页&lt;/a&gt;上的脚本安装方式，通常就是打开命令行窗口，运行一行命令即可。该命令会自动下载 TeX Live 的安装脚本并自动安装，由于是从网络下载安装 TeX Live，所以具体等待时间取决于网速。Unix 系统应该不会超过两分钟，Windows 系统可能需要五分钟左右（其间可能会弹出两次&lt;a href=&#34;https://db.yihui.name/images/install-tl-win-lua.png&#34;&gt;错误对话框&lt;/a&gt;，点确定即可；如果杀毒软件弹出警告，请允许修改）。&lt;/p&gt;

&lt;h2 id=&#34;维护&#34;&gt;维护&lt;/h2&gt;

&lt;p&gt;TinyTeX 的主要维护工作应该是安装 LaTeX 包以及更新。如果编译 PDF 时出现缺失 LaTeX 包的错误信息，可以用命令行 &lt;code&gt;tlmgr search&lt;/code&gt; 根据缺失文件名搜索包名，并用 &lt;code&gt;tlmgr install&lt;/code&gt; 安装缺失的包；命令 &lt;code&gt;tlmgr update --self --all&lt;/code&gt; 可以更新整个 TeX Live 系统。R 用户可以使用 &lt;a href=&#34;https://yihui.name/tinytex/r/&#34;&gt;R 包 &lt;strong&gt;tinytex&lt;/strong&gt;&lt;/a&gt; 中的相应函数，如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tinytex)
tlmgr_search(&#39;framed.sty&#39;)  # 搜索包含 framed.sty 文件的 LaTeX 包
tlmgr_install(&#39;framed&#39;)     # 安装 framed 包
tlmgr_update()              # 更新 TeX Live
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 &lt;strong&gt;tinytex&lt;/strong&gt; 包中还有一系列函数用来编译 LaTeX 文档，核心函数是 &lt;code&gt;latexmk()&lt;/code&gt;，它主要是为了模拟 LaTeX 工具 &lt;code&gt;latexmk&lt;/code&gt;，即：重要的 LaTeX 文档默认编三遍。如果你不懂这句话，那么恭喜你，不懂更好，不要在它上面浪费时间。还有另一个非常有用的功能，就是模拟 Windows 上 MiKTeX（当然现在 MikTeX 似乎并不局限于 Windows 了）：编译 LaTeX 文档过程中默认自动检测并安装缺失的 LaTeX 包。能自动化的都自动化，不必费劲去跑 &lt;code&gt;tlmgr search&lt;/code&gt; 或 &lt;code&gt;tlmgr install&lt;/code&gt; 之类的命令。&lt;/p&gt;

&lt;p&gt;具体调用时，你可能会根据你需要的 LaTeX 引擎使用 &lt;strong&gt;tinytex&lt;/strong&gt; 中的这三个函数之一： &lt;code&gt;pdflatex()&lt;/code&gt;、&lt;code&gt;xelatex()&lt;/code&gt;、&lt;code&gt;lualatex()&lt;/code&gt;。看函数名应该就知道各自分别使用哪个 LaTeX 引擎。&lt;/p&gt;

&lt;h2 id=&#34;r-markdown-用户&#34;&gt;R Markdown 用户&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;rmarkdown&lt;/strong&gt; 包从版本 1.9 开始，编译 R Markdown 为 PDF 时会调用 &lt;strong&gt;tinytex&lt;/strong&gt;，这样一来，R Markdown 用户的 LaTeX 世界应该就安静了：因为对 R Markdown 用户来说，编译 PDF 的头号出错可能就是缺失 LaTeX 包（Pandoc 翻译 Markdown 为 LaTeX 代码时，几乎不太可能产生 LaTeX 语法错误），而可怜的 R 用户哪能明白那错误消息是什么意思。&lt;/p&gt;

&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;

&lt;p&gt;时间有限，中文文档只能写这么长；若有疑问，请参考首页以及常见问题。&lt;/p&gt;

&lt;p&gt;LaTeX 排版很美丽，但它常让我们忘了自己的身份特么到底是作者还是排版工人；它就像一个永远长不大的孩子，没日没夜呼唤你的注意（唉哟，人家找不到 &lt;code&gt;framed.sty&lt;/code&gt; 文件啦；哎呀，人家没法编出参考文献列表啦，请你看看你的 &lt;code&gt;.aux&lt;/code&gt; 文件好不）。但愿这个 TinyTeX 套件以及 R 包 &lt;strong&gt;tinytex&lt;/strong&gt; 能让它消停会儿。&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Frequently (?) Asked Questions</title>
      <link>https://yihui.name/tinytex/faq/</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/tinytex/faq/</guid>
      <description>
        &lt;p&gt;TinyTeX is still a relatively new project, so these are only potential FAQs.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Which version of TeX Live is installed?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The (very) latest. Using the very latest version of a software package can be risky. You have been warned. On the other hand, however, let&amp;rsquo;s not pretend we haven&amp;rsquo;t run into problems using the &amp;ldquo;stable&amp;rdquo; versions of TeX Live.&lt;/p&gt;

&lt;p&gt;Latest or stable? Your call. If you are not comfortable with the latest version, TinyTeX is probably not a good choice. Note that you can install the current latest version, and choose not to upgrade in the future if the version happens to be &amp;ldquo;stable&amp;rdquo; enough for you, though.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do you provide prebuilt binaries of TinyTeX?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No. Technically it is easy, but I don&amp;rsquo;t really understand the implications of &lt;a href=&#34;https://www.tug.org/texlive/LICENSE.TL&#34;&gt;the TeX Live license&lt;/a&gt;. Specifically, the license says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] TeX Live has neither a single copyright holder nor a single license covering its entire contents, since it is a collection of many independent packages.  Therefore, you may copy, modify, and/or redistribute software from TeX Live only if you comply with the requirements placed thereon by the owners of the respective packages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That sounds complicated to me. I don&amp;rsquo;t have time to examine the license and terms of all these packages. Installing over the network is fast enough after all.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is the size of TinyTeX?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;About 150MB on macOS and Ubuntu, and 220MB on Windows (when installed). You may think it is still too big, but please consider that the size of &lt;a href=&#34;https://www.tug.org/mactex/morepackages.html&#34;&gt;BasicTeX&lt;/a&gt; for macOS is about 215MB (when installed), and a &lt;a href=&#34;https://miktex.org/download&#34;&gt;basic MiKTeX installer&lt;/a&gt; for Windows is about 750MB (I didn&amp;rsquo;t check how big it is when installed).&lt;/p&gt;

&lt;p&gt;If you create a tarball of TinyTeX on macOS or Ubuntu, it will be only 50MB. This can be very helpful if you install such a tarball on the cloud (e.g., for software testing purposes on Travis CI). The download and installation should take only a few seconds.&lt;/p&gt;

&lt;p&gt;Of course, the size of TinyTeX will grow as you install more LaTeX packages.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;What does the TinyTeX installation script do exactly? How do you reduce the size of the gigantic TeX Live?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The best way to understand TinyTeX is to &lt;a href=&#34;https://github.com/yihui/tinytex/&#34;&gt;read the source&lt;/a&gt; under the &lt;code&gt;tools&lt;/code&gt; directory. Basically, TinyTeX automates the TeX Live installation using a profile file named &lt;a href=&#34;https://github.com/yihui/tinytex/blob/master/tools/texlive.profile&#34;&gt;texlive.profile&lt;/a&gt; (&lt;code&gt;./install-tl -profile=texlive.profile&lt;/code&gt;), which only specifies the &lt;code&gt;infraonly&lt;/code&gt; scheme to be installed first. With this scheme, you cannot really compile any LaTeX documents, but it contains the most important utility &lt;code&gt;tlmgr&lt;/code&gt; (TeX Live Manager). At this point, the total size is about 80MB.&lt;/p&gt;

&lt;p&gt;Then I use &lt;code&gt;tlmgr&lt;/code&gt; to install a few more commonly used packages (defined in &lt;a href=&#34;https://github.com/yihui/tinytex/blob/master/tools/pkgs-custom.txt&#34;&gt;pkgs-custom.txt&lt;/a&gt;). With these packages, you should be able to compile most R Markdown documents to PDF. The total size becomes about 150MB.&lt;/p&gt;

&lt;p&gt;The fact that I only included a small number of LaTeX packages in TinyTeX is one of the two reasons why TinyTeX is relatively small in size. The other reason is that I excluded the source files and documentation of packages. In &lt;code&gt;texlive.profile&lt;/code&gt;, you can see these two options:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-config&#34;&gt;option_doc 0
option_src 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why do I exclude source files? Because they are unlikely to be useful to end-users. Would you really read the source code of a LaTeX package? Probably not, unless you are a developer or advanced LaTeX user. In fact, this also explains why I don&amp;rsquo;t provide prebuilt binaries of TinyTeX: some open-source licenses may require that you provide source files when you redistribute the open-source software. TinyTeX does not redistribute TeX Live, but only provides a custom installation script.&lt;/p&gt;

&lt;p&gt;Why do I exclude the documentations? Tell me honestly: how many times have you found a solution via &lt;a href=&#34;https://tex.stackexchange.com&#34;&gt;StackExchange&lt;/a&gt;, and how many times have you tried to read the package documentation? Even with the full documentation installed, you probably don&amp;rsquo;t even know where to find these documentation files on your computer. The documentation files take a lot of disk space, and I believe they are rarely read by an average user, so they are not included. The address bar of your web browser is the most convenient documentation: type and search.&lt;/p&gt;

&lt;p&gt;The other major factor that affects the size of TeX Live is the font packages, which are usually much bigger than other LaTeX packages, but we cannot really do much about it, unless you do not use &lt;code&gt;pdflatex&lt;/code&gt;, in which case you may further reduce the size of this small TeX Live distribution.&lt;/p&gt;

&lt;p&gt;You can use the command &lt;code&gt;tlmgr info --list --only-installed --data name,size&lt;/code&gt; to obtain the sizes of all installed packages. If you have installed the R package &lt;strong&gt;tinytex&lt;/strong&gt;, you can also use the function &lt;code&gt;tinytex::tl_sizes()&lt;/code&gt;. For example, the size of the font package &lt;strong&gt;lm&lt;/strong&gt; (Latin modern) is about 42MB!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;I&amp;rsquo;m a Linux and R user, and I saw a message &amp;ldquo;TinyTeX was not successfully installed or configured&amp;rdquo; after I install TinyTeX via &lt;code&gt;tinytex::install_tinytex()&lt;/code&gt; / RStudio says &amp;ldquo;No TeX distribution detected&amp;rdquo; / Pandoc says &amp;ldquo;pdflatex not found&amp;rdquo;. What should I do?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, try to restart R or RStudio, and check if &lt;code&gt;tinytex:::is_tinytex()&lt;/code&gt; is &lt;code&gt;TRUE&lt;/code&gt; in R. If it is, you are all set, otherwise, run &lt;code&gt;list.files(&#39;~/bin&#39;)&lt;/code&gt; and see if &lt;code&gt;tlmgr&lt;/code&gt; is there. If it is, you need to make sure &lt;code&gt;$HOME/bin&lt;/code&gt; is in your &lt;code&gt;PATH&lt;/code&gt; variable (which should be, according to &lt;a href=&#34;https://unix.stackexchange.com/a/215717&#34;&gt;this StackExchange answer&lt;/a&gt;). If it is not, you need to add it in the file &lt;code&gt;~/.bash_profile&lt;/code&gt; or &lt;code&gt;~/.profile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PATH=&amp;quot;$HOME/bin:$PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;tinytex:::is_tinytex()&lt;/code&gt; is still &lt;code&gt;FALSE&lt;/code&gt; after you restart R/RStudio, I don&amp;rsquo;t have other ideas (you may try to &lt;a href=&#34;https://github.com/yihui/tinytex/issues/16&#34;&gt;restart your system&lt;/a&gt; and see if you have better luck), and you will have to install TinyTeX using the method in FAQ 7.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;I&amp;rsquo;m an R package developer. Are the default LaTeX packages included in TinyTeX enough for me to develop an R package?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No, you need a few more, mainly because &lt;code&gt;R CMD check&lt;/code&gt; needs to build manuals to PDF. You can install these packages through either the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tlmgr install &amp;quot;inconsolata&amp;quot; &amp;quot;times&amp;quot; &amp;quot;tex&amp;quot; &amp;quot;helvetic&amp;quot; &amp;quot;dvips&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or via the R function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tinytex::tlmgr_install(c(
  &#39;inconsolata&#39;, &#39;times&#39;, &#39;tex&#39;, &#39;helvetic&#39;, &#39;dvips&#39;
))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another important thing to do is add R&amp;rsquo;s texmf tree to TeX Live. This is not easy to explain, but I have provided a function &lt;code&gt;tinytex::r_texmf()&lt;/code&gt; to do it. Just do it (unless you installed TinyTeX via &lt;code&gt;tinytex::install_tinytex()&lt;/code&gt;, which automatically does this). See the help page &lt;code&gt;?tinytex::r_texmf&lt;/code&gt; if you are curious about the technical details.&lt;/p&gt;

&lt;p&gt;Although it is irrelevant to TinyTeX, you may also need to install &lt;a href=&#34;https://www.gnu.org/software/texinfo/&#34;&gt;&lt;strong&gt;texinfo&lt;/strong&gt;&lt;/a&gt; (not a LaTeX package), since &lt;code&gt;R CMD check&lt;/code&gt; may also require it. For macOS users, if you installed R from CRAN, &lt;strong&gt;texinfo&lt;/strong&gt; is usually included, otherwise you can install it via Homebrew: &lt;code&gt;brew install texinfo&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;I&amp;rsquo;m a Linux system admin. How can I install TinyTeX for all users of a system?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, add two options &lt;code&gt;--admin --no-path&lt;/code&gt; to the installation script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget -qO- &amp;quot;https://yihui.name/gh/tinytex/tools/install-unx.sh&amp;quot; \
  | sh -s - --admin --no-path
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install TinyTeX to &lt;code&gt;~/.TinyTeX&lt;/code&gt;, and this step does &lt;em&gt;not&lt;/em&gt; require root privileges. Then you need to add symlinks to &lt;code&gt;/usr/local/bin&lt;/code&gt; via &lt;code&gt;sudo&lt;/code&gt;, so that all users of this system can use the TeX Live executables (e.g., &lt;code&gt;pdflatex&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo ~/.TinyTeX/bin/*/tlmgr path add
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yihui/tinytex/issues/37&#34;&gt;Some systems&lt;/a&gt; may set the permission of &lt;code&gt;~/.TinyTeX&lt;/code&gt; to &lt;code&gt;700&lt;/code&gt; by default, which means other users cannot really use TinyTeX (no permission to read, write, or execute anything in this directory). You may consider changing the owner or group of this directory using &lt;code&gt;chown&lt;/code&gt;, and also granting write permission (plus execute permission on the subdirectory &lt;code&gt;bin&lt;/code&gt;), e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;chown -R root:staff ~/.TinyTeX
chmod -R g+w ~/.TinyTeX
chmod -R g+wx ~/.TinyTeX/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to move &lt;code&gt;~/.TinyTeX&lt;/code&gt; to a different location, see FAQ 10, and remember to run &lt;code&gt;tlmgr path add&lt;/code&gt; with &lt;code&gt;sudo&lt;/code&gt; after you move the folder, to make sure symlinks under &lt;code&gt;/usr/local/bin&lt;/code&gt; point to the the new paths correctly.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;I&amp;rsquo;m a Linux admin. I used the above approach to install TinyTeX and added symlinks to &lt;code&gt;/usr/local/bin&lt;/code&gt;. How can my users without root privileges install LaTeX packages by themselves?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Users without root privileges won&amp;rsquo;t be able to install packages via a normal &lt;code&gt;tlmgr install&lt;/code&gt; command, unless you have assigned them to a group that has write permissions to the TinyTeX root directory (by default, &lt;code&gt;~/.TinyTeX&lt;/code&gt;, and note that &lt;code&gt;~&lt;/code&gt; is &lt;em&gt;your own&lt;/em&gt; home directory), in which case these users are able to modify the system-wide installation of TinyTeX.&lt;/p&gt;

&lt;p&gt;For those who do not have write permissions to the TinyTeX directory, there is a &lt;a href=&#34;https://www.tug.org/texlive/doc/tlmgr.html#USER-MODE&#34;&gt;user mode&lt;/a&gt; in TeX Live that allows such users to manage a user-level texmf tree, e.g., a user can install packages to his/her home directory instead of a system directory. With TinyTeX, the user-level texmf tree is at &lt;code&gt;~/.TinyTeX/texmf-home&lt;/code&gt; (in TeX Live&amp;rsquo;s terms, this is the &lt;code&gt;TEXMFHOME&lt;/code&gt; variable, and note that &lt;code&gt;~&lt;/code&gt; is the &lt;em&gt;user&amp;rsquo;s&lt;/em&gt; home directory).&lt;/p&gt;

&lt;p&gt;The first thing users have to do is to initialize the tree (create the &lt;code&gt;TEXMFHOME&lt;/code&gt; directory if it does not exist). It only needs to be done once:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tlmgr init-usertree
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then when they install packages, they must always use the option &lt;code&gt;--usermode&lt;/code&gt;, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tlmgr --usermode install koma-script xcolor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For R users, the above commands are equivalent to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tinytex::tlmgr(&#39;init-usertree&#39;)  # again, only do this once
tinytex::tlmgr_install(c(&#39;koma-script&#39;, &#39;xcolor&#39;), usermode = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, the user mode of TeX Live can actually be quite complicated, and unfortunately it is not something that I can help with. A few known caveats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The worst thing is that users cannot install all packages. For TeX Live, some packages are &lt;em&gt;relocatable&lt;/em&gt;, and some are not. For example, packages containing executables are not relocatable (e.g., the &lt;strong&gt;metafont&lt;/strong&gt; package contains the executable &lt;code&gt;mf&lt;/code&gt;). If users have to use these packages, only the system admin can help. The good news is that the number of such packages is relatively small, so a conservative strategy is to just pre-install all of them.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Some packages may require running &lt;a href=&#34;https://www.tug.org/texlive/doc/updmap.html&#34;&gt;&lt;code&gt;updmap&lt;/code&gt;&lt;/a&gt; after installation (e.g., font packages for &lt;code&gt;pdflatex&lt;/code&gt;). Good news is that users should be able to run &lt;code&gt;updmap-user&lt;/code&gt;, and bad news is that whenever the system admin runs &lt;code&gt;updmap-sys&lt;/code&gt;, users may have to run &lt;code&gt;updmap-user&lt;/code&gt; again (if I understand the documentation correctly). For users, the conservative stragety is to run &lt;code&gt;updmap-user&lt;/code&gt; again when they run into font problems that didn&amp;rsquo;t exist previously (R users can run &lt;code&gt;system2(&#39;updmap-user&#39;)&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;I&amp;rsquo;m a Debian/Ubuntu user. How do I prevent TeX Live from being installed when installing other packages that depend on TeX Live? I don&amp;rsquo;t want (or need) both TinyTeX and the official TeX Live packages to be installed at the same time.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, &lt;code&gt;apt-get install&lt;/code&gt; might install certain &lt;code&gt;texlive-*&lt;/code&gt; packages when they are dependencies of other packages (e.g., &lt;code&gt;apt-get install dvipng&lt;/code&gt; will also install &lt;code&gt;texlive-base&lt;/code&gt;). You can download and install &lt;a href=&#34;https://travis-bin.yihui.name/texlive-local.deb&#34;&gt;texlive-local.deb&lt;/a&gt; to &amp;ldquo;fool&amp;rdquo; &lt;code&gt;apt-get&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget &amp;quot;https://travis-bin.yihui.name/texlive-local.deb&amp;quot;
sudo dpkg -i texlive-local.deb
rm texlive-local.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This package was built by running &lt;a href=&#34;http://manpages.ubuntu.com/manpages/trusty/man1/equivs-build.1.html&#34;&gt;&lt;code&gt;equivs-build&lt;/code&gt;&lt;/a&gt; on &lt;a href=&#34;https://github.com/scottkosty/install-tl-ubuntu/blob/master/debian-control-texlive-in.txt&#34;&gt;debian-control-texlive-in.txt&lt;/a&gt; (credits to Scott Kostyshak). Basically it pretends all &lt;code&gt;texlive&lt;/code&gt; packages have been installed (which is not true), so that you can have the full freedom (and responsibility!) of choosing which LaTeX packages to install by yourself.&lt;/p&gt;

&lt;p&gt;Personally, I don&amp;rsquo;t like the way that all LaTeX packages are distributed on Linux (e.g., Debian) as &lt;code&gt;texlive-*&lt;/code&gt; packages, and each &lt;code&gt;texlive-*&lt;/code&gt; package contains several LaTeX packages. That means you must install several other LaTeX packages even if you only need one. Imagine as an R user (or Python, or other languages): if someone prebuilds the more than 10,000 R packages on CRAN as 20 &lt;em&gt;collections&lt;/em&gt; of packages, what do you feel when you only need the &lt;strong&gt;ggplot2&lt;/strong&gt; package but are forced to install all possible packages related to data visualization? Obviously the advantage of providing these collections is that you may not need to install missing packages over and over again (who knows), but I&amp;rsquo;d prefer a lean TeX Live distribution and install packages by myself (which is not difficult at all to me).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Can I change the installation directory?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The directory path is hard-coded in the installation script, and you cannot change it from the command line when installing TinyTeX. I chose these directories for Linux, macOS, and Windows because they are hidden by default on these platforms. TeX Live should not need (cry for) your attention in most cases. If you really want to change the directory, there are a few ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can download the installation scripts and modify them by yourself (in the spirit of open source).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you are an R user, you can install the R package &lt;strong&gt;tinytex&lt;/strong&gt;, and pass a custom directory name to the &lt;code&gt;dir&lt;/code&gt; argument of &lt;code&gt;tinytex::install_tinytex()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Or install TinyTeX first, and move the installation folder to where you&amp;rsquo;d like it to be (you can even move it to a USB stick). That is because TinyTeX is essentially a &lt;em&gt;portable&lt;/em&gt; version of TeX Live. The tricky part of this way is to deal with the &lt;code&gt;PATH&lt;/code&gt; variable. You need to run the command &lt;code&gt;tlmgr path add&lt;/code&gt;, but &lt;code&gt;tlmgr&lt;/code&gt; won&amp;rsquo;t be on &lt;code&gt;PATH&lt;/code&gt; if you have moved the default installation directory, so you have to execute &lt;code&gt;tlmgr&lt;/code&gt; through its full path, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# assume you moved ~/.TinyTeX on Linux to /opt/tinytex
/opt/tinytex/bin/*/tlmgr path add
        
# assume you moved ~/Library/TinyTeX on macOS to /opt/tinytex
/opt/tinytex/bin/*/tlmgr path add
        
# assume you moved %APPDATA%\TinyTeX on Windows to C:\Software\TinyTeX
&amp;quot;C:\Software\TinyTeX\bin\win32\tlmgr&amp;quot; path add
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You only need to do this once. If you installed TinyTeX using the approach in FAQ 7, you need &lt;code&gt;sudo&lt;/code&gt; to run &lt;code&gt;tlmgr path add&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;How can I use TinyTeX on a USB drive or other portable devices?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I said, TinyTeX is a portable version of TeX Live, so you can simply copy it to a portable device. The only thing you need to do after you plug the device to another computer is run the command &lt;code&gt;tlmgr path add&lt;/code&gt;. Again, you need the full path to &lt;code&gt;tlmgr&lt;/code&gt; in your portable device (see the the previous FAQ). After you run this command and restart the application, you should be able to run &lt;code&gt;tlmgr&lt;/code&gt; without its full path.&lt;/p&gt;

&lt;p&gt;Note that TinyTeX installed on one platform will only work for the same platform, e.g., the Windows version only works for Windows. You cannot copy, for example, a macOS version of TinyTeX, and use it on a Windows machine.&lt;/p&gt;

&lt;p&gt;This is a great way to get rid of IT or system admins. You don&amp;rsquo;t have to request them to install or upgrade LaTeX packages for you. You can do everything by yourself.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Why doesn&amp;rsquo;t the default installation path contain the year of TeX Live?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TeX Live installs itself to a directory named by the year by default (so does MacTeX), e.g., &lt;code&gt;/usr/local/texlive/2017&lt;/code&gt;. I don&amp;rsquo;t think it makes much sense to average users. Who would want multiple versions of TeX Live to be installed on the same computer except TeX Live developers? The full TeX Live is gigantic, and you probably do not want it to eat your disk space year by year.&lt;/p&gt;

&lt;p&gt;Again, if you want to change the installation path of TinyTeX, you certainly can.&lt;/p&gt;

&lt;p&gt;One TinyTeX user told me he was not aware of the fact that every year he actually installed TeX Live (MacTeX) to a different folder. If it were not for testing TinyTeX, he would never have discovered that he had got 15GB of TeX Live in several folders (like &lt;code&gt;/usr/local/texlive/2015&lt;/code&gt;, &lt;code&gt;.../2016&lt;/code&gt;, and &lt;code&gt;.../2017&lt;/code&gt;, etc.). That confirmed my guess: users often do not know they installed a new version of TeX Live without uninstalling or overriding the installation from the previous year, so this monster just keeps growing every year. Yes, disk space is cheap nowadays, but that does not mean you have to waste it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do I upgrade TinyTeX yearly after I had installed it in the previous year? I got a message like &amp;ldquo;tlmgr: Remote repository is newer than local (2017 &amp;lt; 2018)&amp;ldquo;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can install TinyTeX again, as the installation script always installs the very latest version. However, the currently installed LaTeX packages will be lost. If you want to reinstall these packages, too, you may use the R function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tinytex::reinstall_tinytex()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do not use R, you can retrieve the list of packages and install them later:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;TL_INSTALLED_PKGS=$(tlmgr info --list --only-installed --data name | sed &#39;s/\..*$//&#39; | uniq | tr &#39;\n&#39; &#39; &#39;)
# Then reinstall TinyTeX using the script on the homepage.
# After TinyTeX has been reinstalled, reinstall packages:
tlmgr install $TL_INSTALLED_PKGS
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Which LaTeX packages do I need to use the R package tikzDevice?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To use the graphical device &lt;code&gt;tikzDevice::tikz()&lt;/code&gt;, you need at these LaTeX packages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tlmgr install pgf preview xcolor
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;I see a warning &amp;ldquo;not verified: gpg unavailable&amp;rdquo; every time when running &lt;code&gt;tlmgr&lt;/code&gt;. How to get rid of this warning?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As the message indicates, your system does not have &lt;code&gt;gpg&lt;/code&gt; (GnuPG):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tlmgr: package repository http://example.org/.../tlnet (not verified:
  gpg unavailable)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For TeX Live users on Windows and macOS, the easiest way to install &lt;code&gt;gpg&lt;/code&gt; is probably &lt;a href=&#34;http://www.preining.info/tlgpg/&#34;&gt;http://www.preining.info/tlgpg/&lt;/a&gt;. The &amp;ldquo;one-time installation&amp;rdquo; suffices.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;How can I install TinyTeX and/or LaTeX packages through HTTP/HTTPS/FTP proxies?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may create a &lt;code&gt;~/.wgetrc&lt;/code&gt; file (&lt;code&gt;~&lt;/code&gt; denotes your HOME directory), and add variables &lt;code&gt;http_proxy&lt;/code&gt;, &lt;code&gt;https_proxy&lt;/code&gt;, and/or &lt;code&gt;ftp_proxy&lt;/code&gt; in it, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-config&#34;&gt;http_proxy=http://user:password@proxy.example.com:8001/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href=&#34;https://www.tug.org/texlive/acquire-netinstall.html&#34;&gt;this page on tug.org&lt;/a&gt; and &lt;a href=&#34;https://www.gnu.org/software/wget/manual/html_node/Proxies.html&#34;&gt;the documentation page of &lt;code&gt;wget&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Can I use Homebrew to install TinyTeX on macOS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, but there are no obvious advantages, so I don&amp;rsquo;t really recommend this approach:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install -v yihui/tinytex/tinytex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The formula is in the repo &lt;a href=&#34;https://github.com/yihui/homebrew-tinytex&#34;&gt;yihui/homebrew-tinytex&lt;/a&gt; on Github. If you must use this approach, here are two caveats that you should know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Homebrew manages the symlinks of TeX Live (via &lt;code&gt;brew link tinytex&lt;/code&gt;), and they are created under &lt;code&gt;/usr/local/bin&lt;/code&gt;. You&amp;rsquo;d better not run &lt;code&gt;tlmgr path add&lt;/code&gt; afterwards, because this command creates symlinks to the same location. When you install a TeX Live package (via &lt;code&gt;tlmgr install&lt;/code&gt;) that contains binaries, such as &lt;strong&gt;metafont&lt;/strong&gt; (which contains the executable &lt;code&gt;mf&lt;/code&gt;), you should run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew postinstall tinytex &amp;amp;&amp;amp; brew unlink tinytex &amp;amp;&amp;amp; brew link tinytex
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After you update &lt;strong&gt;tinytex&lt;/strong&gt; in Homebrew (e.g., via &lt;code&gt;brew update &amp;amp;&amp;amp; brew upgrade&lt;/code&gt;), the LaTeX packages that you previously installed by yourself will no longer be available, and you have to install them again. One solution is to &lt;code&gt;brew pin tinytex&lt;/code&gt;, so that this formula won&amp;rsquo;t be upgraded in the future (in fact, there should be no need to upgrade it). The other solution is to use the HEAD version of the formula:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew cleanup -s
brew remove tinytex
brew install -v --HEAD tinytex
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you feel these issues are too complicated (yes they are), just follow the simpler way on the &lt;a href=&#34;https://yihui.name/tinytex/&#34;&gt;homepage&lt;/a&gt; to install TinyTeX on macOS.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;How to open a command window (terminal) to execute the commands you mentioned?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going to answer this question for Linux users. For macOS users, &lt;code&gt;Command + Space&lt;/code&gt; to launch the Spotlight Search, and type &lt;code&gt;Terminal&lt;/code&gt;. The first result should be &lt;code&gt;Terminal.app&lt;/code&gt;. That is it. For Windows users, click the &lt;code&gt;Start&lt;/code&gt; menu, select &lt;code&gt;Run&lt;/code&gt;, and type &lt;code&gt;cmd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you are an &lt;a href=&#34;https://www.rstudio.com&#34;&gt;RStudio&lt;/a&gt; user, it can be easier. RStudio (&amp;gt;= v1.1) has &lt;a href=&#34;https://blog.rstudio.com/2017/08/11/rstudio-v1-1-preview-terminal/&#34;&gt;built-in support for terminals&lt;/a&gt;, and you can open a terminal right inside RStudio.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

        
      </description>
    </item>
    
    <item>
      <title>Rd2roxygen</title>
      <link>https://yihui.name/rd2roxygen/</link>
      <pubDate>Wed, 07 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/rd2roxygen/</guid>
      <description>
        

&lt;p&gt;The package &lt;a href=&#34;https://github.com/yihui/Rd2roxygen&#34;&gt;&lt;strong&gt;Rd2roxygen&lt;/strong&gt;&lt;/a&gt; helps R package developers who
used to write R documentation in the raw LaTeX-like commands but now want to
switch their documentation to &lt;a href=&#34;https://cran.rstudio.org/package=roxygen2&#34;&gt;&lt;strong&gt;roxygen2&lt;/strong&gt;&lt;/a&gt;, which is a
convenient tool for developers, since we can write documentation as inline
comments, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## the source code of the function `parse_and_save`
ex.file = system.file(&amp;quot;examples&amp;quot;, &amp;quot;parse_and_save.R&amp;quot;, package = &amp;quot;Rd2roxygen&amp;quot;)
cat(readLines(ex.file), sep = &amp;quot;\n&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##&#39; Parse the input Rd file and save the roxygen documentation into a file.
##&#39;
##&#39; @param path the path of the Rd file
##&#39; @param file the path to save the roxygen documentation
##&#39; @param usage logical: whether to include the usage section in the output
##&#39; @return a character vector if \code{file} is not specified, or write the vector
##&#39; into a file
##&#39; @export
##&#39; @author Hadley Wickham; modified by Yihui Xie &amp;lt;\url{http://yihui.name}&amp;gt;
parse_and_save &amp;lt;- function(path, file, usage = FALSE) {
  parsed &amp;lt;- parse_file(path)
  output &amp;lt;- create_roxygen(parsed, usage = usage)
  if (missing(file)) output else
    cat(paste(output, collapse = &amp;quot;\n&amp;quot;), file = file)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;strong&gt;roxygen2&lt;/strong&gt; (typically using &lt;code&gt;roxygenize()&lt;/code&gt;), we can create the real
Rd file from the above source code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rd.file = system.file(&amp;quot;examples&amp;quot;, &amp;quot;parse_and_save.Rd&amp;quot;, package = &amp;quot;Rd2roxygen&amp;quot;)
cat(readLines(rd.file), sep = &amp;quot;\n&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;\name{parse_and_save}
\alias{parse_and_save}
\title{Parse the input Rd file and save the roxygen documentation into a file.}
\usage{parse_and_save(path, file, usage=FALSE)}
\description{Parse the input Rd file and save the roxygen documentation into a file.}
\value{a character vector if \code{file} is not specified, or write the vector
into a file}
\author{Hadley Wickham; modified by Yihui Xie &amp;lt;\url{http://yihui.name}&amp;gt;}
\arguments{\item{path}{the path of the Rd file}
\item{file}{the path to save the roxygen documentation}
\item{usage}{logical: whether to include the usage section in the output}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;Rd2roxygen&lt;/strong&gt; package goes exactly in the &lt;em&gt;opposite&lt;/em&gt; way &amp;ndash; it parses
the Rd files and turns them back to roxygen comments. We can either do this
job on single Rd files, or just convert the whole package. The latter might
be more useful for developers who are considering the transition from Rd to
roxygen.&lt;/p&gt;

&lt;h1 id=&#34;convert-a-whole-package&#34;&gt;Convert a whole package&lt;/h1&gt;

&lt;p&gt;The function &lt;code&gt;Rd2roxygen::Rd2roxygen()&lt;/code&gt; can take a path of a source package, parse all
the Rd files under the &lt;code&gt;man&lt;/code&gt; directory, and write the roxygen comments right
above the source code of the functions under the &lt;code&gt;R&lt;/code&gt; directory. See
&lt;code&gt;?Rd2roxygen&lt;/code&gt; for an example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Rd2roxygen::Rd2roxygen(&amp;quot;path/to/source/pkg&amp;quot;)
## there must be &#39;man&#39; and &#39;R&#39; directories under this path
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the path to the package should not be &lt;code&gt;.&lt;/code&gt;. You are recommended to call this function in the directory that contains the source package.&lt;/p&gt;

&lt;h1 id=&#34;parse-a-single-rd-file&#34;&gt;Parse a single Rd file&lt;/h1&gt;

&lt;p&gt;We can parse a single Rd file and create the roxygen comments as well with
&lt;code&gt;parse_file()&lt;/code&gt; and &lt;code&gt;create_roxygen()&lt;/code&gt;, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(Rd2roxygen)
## we can specify the roxygen comments prefix (#&#39; by default)
options(roxygen.comment = &amp;quot;##&#39; &amp;quot;)
str(info &amp;lt;- parse_file(rd.file))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;List of 9
 $ title   : chr &amp;quot;Parse the input Rd file and save the roxygen documentation into a file.&amp;quot;
 $ usage   : chr &amp;quot;parse_and_save(path, file, usage=FALSE)&amp;quot;
 $ desc    : chr &amp;quot;Parse the input Rd file and save the roxygen documentation into a file.&amp;quot;
 $ section : chr(0) 
 $ value   : chr &amp;quot;a character vector if \\code{file} is not specified, or write the vector\ninto a file&amp;quot;
 $ author  : chr &amp;quot;Hadley Wickham; modified by Yihui Xie &amp;lt;\\url{http://yihui.name}&amp;gt;&amp;quot;
 $ name    : chr &amp;quot;parse_and_save&amp;quot;
 $ keywords: list()
 $ params  : chr [1:3] &amp;quot;path the path of the Rd file&amp;quot; &amp;quot;file the path to save the roxygen documentation&amp;quot; &amp;quot;usage logical: whether to include the usage section in the output&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# parse_and_save() combines these two steps
cat(create_roxygen(info), sep = &amp;quot;\n&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##&#39; Parse the input Rd file and save the roxygen documentation into a file.
##&#39; 
##&#39; Parse the input Rd file and save the roxygen documentation into a file.
##&#39; 
##&#39; 
##&#39; @param path the path of the Rd file
##&#39; @param file the path to save the roxygen documentation
##&#39; @param usage logical: whether to include the usage section in the output
##&#39; @return a character vector if \code{file} is not specified, or write the
##&#39; vector into a file
##&#39; @author Hadley Wickham; modified by Yihui Xie &amp;lt;\url{http://yihui.name}&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;roxygenize-and-build-a-package&#34;&gt;Roxygenize and build a package&lt;/h1&gt;

&lt;p&gt;This package also provides a tool &lt;code&gt;roxygen_and_build()&lt;/code&gt; (or in short &lt;code&gt;rab()&lt;/code&gt;)
to help us build the package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rab(pkg, build = TRUE, build.opts = &amp;quot;--no-manual&amp;quot;, install = FALSE, 
  install.opts = if (build) &amp;quot;&amp;quot; else &amp;quot;--with-keep.source&amp;quot;, check = FALSE, 
  check.opts = &amp;quot;--as-cran --no-manual&amp;quot;, remove.check = TRUE, 
  reformat = TRUE, before = NULL, ...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main feature of &lt;code&gt;rab()&lt;/code&gt; is the option to &amp;ldquo;reformat&amp;rdquo; the code in the
usage and example sections. If we specify &lt;code&gt;reformat = TRUE&lt;/code&gt; in &lt;code&gt;rab()&lt;/code&gt;, the
code will be reformated like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## original code
rab=function(pkg,build=TRUE,install=FALSE,
check=FALSE,check.opts=&#39;&#39;,remove.check=TRUE,reformat=TRUE,...){}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## the reformatted code; note the spaces and indent
rab = function(pkg, build = TRUE, install = FALSE, check = FALSE, 
  check.opts = &amp;quot;&amp;quot;, remove.check = TRUE, reformat = TRUE, ...) {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note this functionality depends on the package &lt;a href=&#34;https://yihui.name/formatR&#34;&gt;&lt;strong&gt;formatR&lt;/strong&gt;&lt;/a&gt;, and
sometimes it might not be possible to reformat the code, e.g. the
&lt;code&gt;\dontrun{}&lt;/code&gt; command in Rd can contain arbitrary texts, which means there
could be illegal R expressions and &lt;strong&gt;formatR&lt;/strong&gt; will be unable to format the
code. In this case, the original code will not be reformatted and a message
will be printed on screen.&lt;/p&gt;

&lt;h1 id=&#34;about-this-vignette&#34;&gt;About this vignette&lt;/h1&gt;

&lt;p&gt;This vignette was built using the vignette engine &lt;code&gt;knitr::rmarkdown&lt;/code&gt;
in the &lt;a href=&#34;https://yihui.name/knitr&#34;&gt;&lt;strong&gt;knitr&lt;/strong&gt;&lt;/a&gt; package. You can find the source
in the &lt;a href=&#34;https://github.com/yihui/Rd2roxygen/tree/master/vignettes&#34;&gt;Rd2roxygen
repository&lt;/a&gt; on
Github, or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;system.file(&amp;quot;doc&amp;quot;, &amp;quot;Rd2roxygen.Rmd&amp;quot;, package = &amp;quot;Rd2roxygen&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>An Introduction to the printr Package</title>
      <link>https://yihui.name/printr/</link>
      <pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/printr/</guid>
      <description>
        

&lt;p&gt;The &lt;strong&gt;printr&lt;/strong&gt; (read &amp;ldquo;printer&amp;rdquo; or &amp;ldquo;print R&amp;rdquo;) package is a companion package to
&lt;a href=&#34;https://yihui.name/knitr/&#34;&gt;&lt;strong&gt;knitr&lt;/strong&gt;&lt;/a&gt;. Its main purpose is to extend the S3
generic function &lt;code&gt;knit_print()&lt;/code&gt; in &lt;strong&gt;knitr&lt;/strong&gt;, which is the default value of the
chunk option &lt;code&gt;render&lt;/code&gt;, as explained in the vignette
&lt;a href=&#34;https://cran.rstudio.org/web/packages/knitr/vignettes/knit_print.html&#34;&gt;knit_print.html&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;To enable the printing methods defined in this package, just &lt;code&gt;library(printr)&lt;/code&gt; or &lt;code&gt;loadNamespace(&#39;printr&#39;)&lt;/code&gt;
in a code chunk (in the beginning) of your &lt;strong&gt;knitr&lt;/strong&gt; document. Then some objects
will be printed differently with what you would have seen in a normal R console.
For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;matrices, data frames, and contingency tables are printed as tables (LaTeX,
HTML, or Markdown, depending on your output format)&lt;/li&gt;
&lt;li&gt;the help page (from &lt;code&gt;?foo&lt;/code&gt; or &lt;code&gt;help(foo)&lt;/code&gt;) can be rendered as HTML, LaTeX, or
plain text, and you can also specify which section(s) of the help page to
include in the output&lt;/li&gt;
&lt;li&gt;the results from &lt;code&gt;browseVignettes()&lt;/code&gt;, &lt;code&gt;help.search()&lt;/code&gt;, &lt;code&gt;data()&lt;/code&gt;, and
&lt;code&gt;vignette()&lt;/code&gt; are rendered as tables&lt;/li&gt;
&lt;li&gt;the package information from &lt;code&gt;library(help = &#39;foo&#39;)&lt;/code&gt; is rendered as plain text&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To disable the printing methods in this package, you can call
&lt;code&gt;detach(&#39;package:printr&#39;, unload = TRUE)&lt;/code&gt; if you &lt;em&gt;attached&lt;/em&gt; the package via
&lt;code&gt;library(printr)&lt;/code&gt; before, or &lt;code&gt;unloadNamespace(&#39;printr&#39;)&lt;/code&gt; if you &lt;em&gt;loaded&lt;/em&gt; it via
&lt;code&gt;loadNamespace(&#39;printr&#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This package aims to be portable in the sense that it should work in most
document formats, including &lt;code&gt;*.Rnw&lt;/code&gt; (R + LaTeX), &lt;code&gt;*.Rmd&lt;/code&gt; (R Markdown), and
&lt;code&gt;*.Rhtml&lt;/code&gt; (R + HTML) files, etc.&lt;/p&gt;

&lt;p&gt;You can find the package source as well as installation instructions on &lt;a href=&#34;https://github.com/yihui/printr&#34;&gt;Github&lt;/a&gt;,
and you are welcome to contribute code via pull requests, or file feature
requests and bug reports via &lt;a href=&#34;https://github.com/yihui/printr/issues&#34;&gt;Github
issues&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;

&lt;p&gt;First we take a look at a quick example of printing some R objects in the R
console:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; # R uses plain text representation for data frames/matrices/...
&amp;gt; head(mtcars)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;                   mpg cyl disp  hp drat    wt  qsec vs am gear carb
Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; head(iris)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we attach the &lt;strong&gt;printr&lt;/strong&gt; package in this R session, and see how things
change later:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(printr)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;matrices-data-frames-tables&#34;&gt;Matrices/data frames/tables&lt;/h2&gt;

&lt;p&gt;Matrices and data frames are printed as tables using the &lt;code&gt;kable()&lt;/code&gt; function in
&lt;strong&gt;knitr&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;options(digits = 4)
set.seed(123)
x = matrix(rnorm(40), 5)
x
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;-0.5605&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7151&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.2241&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7869&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.0678&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.6867&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.4265&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.6886&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;-0.2302&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.4609&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.3598&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.4979&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.2180&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.8378&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.2951&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.5539&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1.5587&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.2651&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.4008&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.9666&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.0260&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1534&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.8951&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0619&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0.0705&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.6869&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1107&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.7014&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.7289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.1381&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.8781&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.3060&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0.1293&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.4457&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.5558&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.4728&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.6250&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.2538&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.8216&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.3805&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# with colunm names
dimnames(x) = list(NULL, head(LETTERS, ncol(x)))
x
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;A&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;B&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;C&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;E&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;F&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;G&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;H&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;-0.5605&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7151&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.2241&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7869&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.0678&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.6867&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.4265&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.6886&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;-0.2302&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.4609&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.3598&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.4979&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.2180&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.8378&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.2951&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.5539&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1.5587&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.2651&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.4008&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.9666&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.0260&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1534&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.8951&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0619&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0.0705&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.6869&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1107&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.7014&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.7289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.1381&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.8781&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.3060&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0.1293&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.4457&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.5558&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.4728&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.6250&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.2538&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.8216&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.3805&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# further customization via kable(), e.g. digits and captions
knitr::kable(x, digits = 2, caption = &amp;quot;A table produced by printr.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;A&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;B&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;C&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;E&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;F&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;G&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;H&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;-0.56&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.79&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.69&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.43&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.69&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;-0.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.46&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.36&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.84&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.55&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1.56&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.40&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.90&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.06&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.69&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.70&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.73&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.88&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.31&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.45&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.56&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.47&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.63&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.82&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.38&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(mtcars)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mpg&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;cyl&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;disp&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;hp&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;drat&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;wt&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;qsec&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;vs&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;am&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;gear&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;carb&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Mazda RX4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;160&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.90&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.620&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.46&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Mazda RX4 Wag&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;160&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.90&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.875&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Datsun 710&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;108&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;93&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.85&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.320&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.61&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Hornet 4 Drive&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;258&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.215&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.44&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Hornet Sportabout&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;360&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;175&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.440&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Valiant&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;225&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;105&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.76&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.460&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(iris, 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;Sepal.Length&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Sepal.Width&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Petal.Length&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Petal.Width&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Species&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For contingency tables, 1-d tables are printed as a 1-row matrix, 2-d tables are
printed an &lt;code&gt;\(n \times m\)&lt;/code&gt; matrix, and tables of higher dimensions are printed as
data frames with frequencies.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x1 = sample(letters[1:3], 1000, TRUE)
x2 = sample(letters[1:3], 1000, TRUE)
x3 = sample(letters[1:3], 1000, TRUE)
table(x1)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;a&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;b&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;c&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;332&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;342&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;326&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;table(x1, x2)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;x1/x2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;a&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;b&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;c&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;98&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;117&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;117&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;123&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;105&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;table(x1, x2, x3)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;x1&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;x2&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;x3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Freq&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;35&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;37&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;35&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;42&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;34&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;42&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;35&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;43&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;37&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;b&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;search-results-from-help-search&#34;&gt;Search results from &lt;code&gt;help.search()&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Here are some examples demonstrating the results of &lt;code&gt;help.search()&lt;/code&gt;, or you can
also use &lt;code&gt;??&lt;/code&gt; to search for a string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;??sunflower
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Package&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Topic&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;graphics&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;sunflowerplot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Produce a Sunflower Scatter Plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;grDevices&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;xyTable&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Multiplicities of (x,y) Points, e.g., for a Sunflower Plot&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;help.search(&#39;contourplot&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Package&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Topic&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;raster&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;contour&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Contour plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;raster&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;filledContour&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Filled contour plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;graphics&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;filled.contour&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Level (Contour) Plots&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;lattice&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;levelplot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Level plots and contour plots&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;lattice&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;panel.levelplot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Panel Functions for levelplot and contourplot&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;help.search(&#39;foo&#39;, package = &#39;base&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Package&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Topic&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;base&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;is.things&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Explore some properties of R objects and is.FOO() functions. Not for newbies!&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;help.search(&#39;foooooooo&#39;, package = &#39;utils&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## No results found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a normal R session, the results will be displayed as an HTML page by default,
but normally these functions are meant to be called in an interactive R session,
and &lt;strong&gt;knitr&lt;/strong&gt; documents are often compiled in non-interactive R sessions, so we
changed the printing behavior of these results, and readers will get the basic
idea of these functions when reading the &lt;strong&gt;knitr&lt;/strong&gt; output. If they want to run
these functions by themselves, they can do it in an interactive R session.&lt;/p&gt;

&lt;h2 id=&#34;help-pages&#34;&gt;Help pages&lt;/h2&gt;

&lt;p&gt;When you want to read the help page of a certain R object, you normally use &lt;code&gt;?&lt;/code&gt;
or &lt;code&gt;help()&lt;/code&gt;, which will launch a separate help page from the R session, and
require human interaction. Again, we may not desire human interactions in
&lt;strong&gt;knitr&lt;/strong&gt; documents, so the help pages are printed as static documents here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?coef
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Extract Model Coefficients

Description:

     &#39;coef&#39; is a generic function which extracts model coefficients
     from objects returned by modeling functions.  &#39;coefficients&#39; is an
     _alias_ for it.

Usage:

     coef(object, ...)
     coefficients(object, ...)
     
Arguments:

  object: an object for which the extraction of model coefficients is
          meaningful.

     ...: other arguments.

Details:

     All object classes which are returned by model fitting functions
     should provide a &#39;coef&#39; method or use the default one.  (Note that
     the method is for &#39;coef&#39; and not &#39;coefficients&#39;.)

     Class &#39;&amp;quot;aov&amp;quot;&#39; has a &#39;coef&#39; method that does not report aliased
     coefficients (see &#39;alias&#39;).

Value:

     Coefficients extracted from the model object &#39;object&#39;.

     For standard model fitting classes this will be a named numeric
     vector.  For &#39;&amp;quot;maov&amp;quot;&#39; objects (produced by &#39;aov&#39;) it will be a
     matrix.

References:

     Chambers, J. M. and Hastie, T. J. (1992) _Statistical Models in
     S_.  Wadsworth &amp;amp; Brooks/Cole.

See Also:

     &#39;fitted.values&#39; and &#39;residuals&#39; for related methods; &#39;glm&#39;, &#39;lm&#39;
     for model fitting.

Examples:

     x &amp;lt;- 1:5; coef(lm(c(1:3, 7, 6) ~ x))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When help pages are really long, we can use the chunk option
&lt;code&gt;printr.help.sections&lt;/code&gt; to select
a few sections to display, e.g. we only show the sections &lt;code&gt;description&lt;/code&gt; and
&lt;code&gt;usage&lt;/code&gt; of the &lt;code&gt;paste()&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?paste
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Concatenate Strings

Description:

     Concatenate vectors after converting to character.

Usage:

     paste (..., sep = &amp;quot; &amp;quot;, collapse = NULL)
     paste0(..., collapse = NULL)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;vignette-dataset-lists&#34;&gt;Vignette/dataset lists&lt;/h2&gt;

&lt;p&gt;We can print the lists of vignettes and datasets in packages using &lt;code&gt;vignette()&lt;/code&gt;
and &lt;code&gt;data()&lt;/code&gt;, respectively.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vignette(package = &amp;quot;rpart&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Item&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;longintro&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Introduction to Rpart (source, pdf)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;usercode&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;User Written Split Functions (source, pdf)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vignette(package = c(&amp;quot;rpart&amp;quot;, &amp;quot;knitr&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Package&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Item&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;rpart&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;longintro&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Introduction to Rpart (source, pdf)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;rpart&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;usercode&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;User Written Split Functions (source, pdf)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;knitr&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;knitr-html&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;An R HTML Vignette with knitr (source, html)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;knitr&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;knitr-markdown&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;An R Markdown Vignette with knitr (source, html)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;knitr&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;knit_print&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Custom Print Methods (source, html)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;knitr&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;datatables&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Display Tables with the JavaScript Library DataTables (source, html)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;knitr&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;knitr-refcard&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;knitr Reference Card (source, pdf)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;knitr&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;knitr-intro&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Not an Introduction to knitr (source, html)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;knitr&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;docco-classic&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;R Markdown with the Docco Classic Style (source, html)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;knitr&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;docco-linear&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;R Markdown with the Docco Linear Style (source, html)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;knitr&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;knit_expand&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Templating with knit_expand() (source, html)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(package = &amp;quot;lattice&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Item&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;USMortality&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mortality Rates in US by Cause and Gender&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;USRegionalMortality&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mortality Rates in US by Cause and Gender&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;barley&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yield data from a Minnesota barley trial&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;environmental&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Atmospheric environmental conditions in New York City&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ethanol&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Engine exhaust fumes from burning ethanol&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;melanoma&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Melanoma skin cancer incidence&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;singer&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Heights of New York Choral Society singers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(package = c(&amp;quot;rpart&amp;quot;, &amp;quot;lattice&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Package&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Item&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;rpart&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;car.test.frame&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Automobile Data from &amp;lsquo;Consumer Reports&amp;rsquo; 1990&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;rpart&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;car90&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Automobile Data from &amp;lsquo;Consumer Reports&amp;rsquo; 1990&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;rpart&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;cu.summary&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Automobile Data from &amp;lsquo;Consumer Reports&amp;rsquo; 1990&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;rpart&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;kyphosis&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Data on Children who have had Corrective Spinal Surgery&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;rpart&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;solder&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Soldering of Components on Printed-Circuit Boards&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;rpart&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;stagec&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Stage C Prostate Cancer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;lattice&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;USMortality&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mortality Rates in US by Cause and Gender&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;lattice&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;USRegionalMortality&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mortality Rates in US by Cause and Gender&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;lattice&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;barley&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yield data from a Minnesota barley trial&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;lattice&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;environmental&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Atmospheric environmental conditions in New York City&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;lattice&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ethanol&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Engine exhaust fumes from burning ethanol&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;lattice&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;melanoma&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Melanoma skin cancer incidence&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;lattice&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;singer&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Heights of New York Choral Society singers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(package = &amp;quot;knitr&amp;quot;)  # no datasets here
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Data sets not found
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;browseVignettes(package = &amp;quot;knitr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Vignette&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;knitr-html.html&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;An R HTML Vignette with knitr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;knitr-markdown.html&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;An R Markdown Vignette with knitr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;knit_print.html&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Custom Print Methods&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;datatables.html&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Display Tables with the JavaScript Library DataTables&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;knitr-refcard.pdf&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;knitr Reference Card&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;knitr-intro.html&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Not an Introduction to knitr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;docco-classic.html&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;R Markdown with the Docco Classic Style&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;docco-linear.html&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;R Markdown with the Docco Linear Style&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;knit_expand.html&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Templating with knit_expand()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;package-info&#34;&gt;Package info&lt;/h2&gt;

&lt;p&gt;A description of a package can be printed via &lt;code&gt;library(help = &#39;foo&#39;)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(help = &amp;quot;printr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;        Information on package &#39;printr&#39;

Description:

Package:            printr
Type:               Package
Title:              Automatically Print R Objects to Different Formats According to the
                    &#39;knitr&#39; Output Format
Version:            0.1
Date:               2017-05-19
Author:             Yihui Xie
Maintainer:         Yihui Xie &amp;lt;xie@yihui.name&amp;gt;
Description:        Extends the S3 generic function knit_print() in knitr to
                    automatically print some objects using an appropriate format such as
                    Markdown or LaTeX. For example, data frames are automatically printed
                    as tables, and the help() pages can also be rendered in knitr
                    documents.
Imports:            knitr (&amp;gt;= 1.11)
Suggests:           tools, rmarkdown
License:            GPL
URL:                http://yihui.name/printr
BugReports:         https://github.com/yihui/printr/issues
VignetteBuilder:    knitr
LazyData:           TRUE
RoxygenNote:        6.0.1
NeedsCompilation:   no
Packaged:           2017-05-18 20:44:47 UTC; yihui
Built:              R 3.4.0; ; 2017-05-18 20:44:47 UTC; unix

Index:

printr                  Print R objects in &#39;knitr&#39; documents nicely

Further information is available in the following vignettes in directory
&#39;/Users/yihui/R/printr/doc&#39;:

printr: An Introduction to the printr Package (source, pdf)
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>BM.circle()</title>
      <link>https://yihui.name/animation/example/bm-circle/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/bm-circle/</guid>
      <description>
        &lt;p&gt;Several points moving randomly in a circle.&lt;/p&gt;

&lt;p&gt;This is a solution to the question raised in R-help:
&lt;a href=&#34;https://stat.ethz.ch/pipermail/r-help/2008-December/183018.html&#34;&gt;https://stat.ethz.ch/pipermail/r-help/2008-December/183018.html&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(interval = 0.1, nmax = 100)
par(mar = rep(0.5, 4))
BM.circle(cex = 2, pch = 19)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/BM-circle/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>MC.hitormiss()</title>
      <link>https://yihui.name/animation/example/mc-hitormiss/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/mc-hitormiss/</guid>
      <description>
        &lt;p&gt;Integrate a function using the Hit-or-Miss Monte Carlo algorithm.&lt;/p&gt;

&lt;p&gt;We compute the proportion of points hitting the area under the curve, and the
integral can be estimated by the proportion multiplied by the total area of
the rectangle (from xmin to xmax, ymin to ymax).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(interval = 0.2, nmax = 100)

## should be close to 1/6
MC.hitormiss()$est
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/MC-hitormiss/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code&gt;## [1] 0.1725
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## should be close to 1/12
MC.hitormiss(from = 0.5, to = 1)$est
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/MC-hitormiss/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code&gt;## [1] 0.07874
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>MC.samplemean()</title>
      <link>https://yihui.name/animation/example/mc-samplemean/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/mc-samplemean/</guid>
      <description>
        &lt;p&gt;Integrate a function from 0 to 1 using the Sample Mean Monte Carlo algorithm&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample Mean Monte Carlo&lt;/strong&gt; integration can compute&lt;/p&gt;

&lt;p&gt;&lt;code&gt;\(I=\int_0^1 f(x) dx\)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;by drawing random numbers &lt;code&gt;\(x_i\)&lt;/code&gt; from Uniform(0, 1) distribution and
average the values of &lt;code&gt;\(f(x_i)\)&lt;/code&gt;. As &lt;code&gt;\(n\)&lt;/code&gt; goes to infinity, the sample
mean will approach to the expectation of &lt;code&gt;\(f(X)\)&lt;/code&gt; by Law of Large Numbers.&lt;/p&gt;

&lt;p&gt;The height of the &lt;code&gt;\(i\)&lt;/code&gt;-th rectangle in the animation is &lt;code&gt;\(f(x_i)\)&lt;/code&gt; and
the width is &lt;code&gt;\(1/n\)&lt;/code&gt;, so the total area of all the rectangles is &lt;code&gt;\(\sum_{i=1}^{n}\frac{1}{n}f(x_i)\)&lt;/code&gt;, which is just the sample mean. We can compare the area of
rectangles to the curve to see how close is the area to the real integral.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(interval = 0.2, nmax = 50)
par(mar = c(4, 4, 1, 1))

## when the number of rectangles is large, use border = NA
MC.samplemean(border = NA)$est
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/MC-samplemean/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code&gt;## [1] 0.1638
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;integrate(function(x) x - x^2, 0, 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## 0.1667 with absolute error &amp;lt; 1.9e-15
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## when adj.x = FALSE, use semi-transparent colors
MC.samplemean(adj.x = FALSE, col.rect = c(rgb(0, 0, 0, 0.3), 
  rgb(1, 0, 0)), border = NA)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## another function to be integrated
MC.samplemean(FUN = function(x) x^3 - 0.5^3, border = NA)$est
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/MC-samplemean/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code&gt;## [1] 0.09573
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;integrate(function(x) x^3 - 0.5^3, 0, 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## 0.125 with absolute error &amp;lt; 2.4e-15
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>Rosling.bubbles()</title>
      <link>https://yihui.name/animation/example/rosling-bubbles/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/rosling-bubbles/</guid>
      <description>
        &lt;p&gt;In Hans Rosling&amp;rsquo;s attractive talk &lt;code&gt;Debunking third-world myths with the best
stats you&#39;ve ever seen&lt;/code&gt;, he used a lot of bubble plots to illustrate trends
behind the data over time. This function gives an imitation of those moving
bubbles, besides, as this function is based on &lt;code&gt;symbols&lt;/code&gt;, we can
also make use of other symbols such as squares, rectangles, thermometers,
etc.&lt;/p&gt;

&lt;p&gt;Suppose we have observations of &lt;code&gt;\(n\)&lt;/code&gt; individuals over
&lt;code&gt;ani.options(&#39;nmax&#39;)&lt;/code&gt; years. In this animation, the data of each year
will be shown in the bubbles (symbols) plot; as time goes on, certain trends
will be revealed (like those in Rosling&amp;rsquo;s talk). Please note that the
arrangement of the data for bubbles (symbols) should be a matrix like
&lt;code&gt;\(A_{ijk}\)&lt;/code&gt; in which &lt;code&gt;\(i\)&lt;/code&gt; is the individual id (from 1 to n), &lt;code&gt;\(j\)&lt;/code&gt;
denotes the &lt;code&gt;\(j\)&lt;/code&gt;-th variable (from 1 to p) and &lt;code&gt;\(k\)&lt;/code&gt; indicates the time
from 1 to &lt;code&gt;ani.options(&#39;nmax&#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And the length of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; should be equal to the number of rows
of this matrix.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(interval = 0.2, nmax = 50)

## use default arguments (random numbers); you may try to find
## the real data
par(mar = c(4, 4, 0.2, 0.2))
Rosling.bubbles()
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/Rosling-bubbles/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## rectangles
Rosling.bubbles(type = &amp;quot;rectangles&amp;quot;, data = matrix(abs(rnorm(50 * 
  10 * 2)), ncol = 2))
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/Rosling-bubbles/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>ani.options()</title>
      <link>https://yihui.name/animation/example/ani-options/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/ani-options/</guid>
      <description>
        &lt;p&gt;There are various parameters that control the behaviour of the animation,
such as time interval, maximum number of animation frames, height and width,
etc.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
## see the first example in help(animation) on how to set and
## restore animation options

## use the PDF device: remember to set &#39;ani.type&#39; accordingly
ani.options(ani.dev = &amp;quot;pdf&amp;quot;, ani.type = &amp;quot;pdf&amp;quot;, ani.height = 5, 
  ani.width = 7)

## use the Cairo PDF device if (require(&#39;Cairo&#39;)) {
## ani.options(ani.dev = CairoPDF, ani.type = &#39;pdf&#39;,
## ani.height = 6, ani.width = 6) }

## don&#39;t loop for GIF/HTML animations
ani.options(loop = FALSE)

## don&#39;t try to open the output automatically
ani.options(autobrowse = FALSE)

## it&#39;s a good habit to restore the options in the end so that
## other code will not be affected


## how to make use of the hidden option &#39;img.fmt&#39;
saveHTML(expr = {
  png(ani.options(&amp;quot;img.fmt&amp;quot;))
  for (i in 1:5) plot(runif(10))
  dev.off()
}, img.name = &amp;quot;custom_plot&amp;quot;, use.dev = FALSE, ani.type = &amp;quot;png&amp;quot;, 
  description = &amp;quot;Note how we use our own graphics device in &#39;expr&#39;.&amp;quot;, 
  htmlfile = &amp;quot;custom_device.html&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>ani.record()</title>
      <link>https://yihui.name/animation/example/ani-record/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/ani-record/</guid>
      <description>
        &lt;p&gt;These two functions use &lt;code&gt;recordPlot&lt;/code&gt; and &lt;code&gt;replayPlot&lt;/code&gt;
to record image frames and replay the animation respectively.&lt;/p&gt;

&lt;p&gt;One difficulty in capturing images in R (base graphics) is that the
off-screen graphics devices cannot capture low-level plotting commands as
&lt;strong&gt;new&lt;/strong&gt; image files &amp;ndash; only high-level plotting commands can produce new
image files; &lt;code&gt;ani.record&lt;/code&gt; uses &lt;code&gt;recordPlot&lt;/code&gt; to record
the plots when any changes are made on the current plot. For a graphical
device to be recordable, you have to call &lt;code&gt;dev.control(&#39;enable&#39;)&lt;/code&gt; before
plotting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)

n = 20
x = sort(rnorm(n))
y = rnorm(n)
## set up an empty frame, then add points one by one
par(bg = &amp;quot;white&amp;quot;)  # ensure the background color is white
plot(x, y, type = &amp;quot;n&amp;quot;)

ani.record(reset = TRUE)  # clear history before recording

for (i in 1:n) {
  points(x[i], y[i], pch = 19, cex = 2)
  ani.record()  # record the current frame
}

## now we can replay it, with an appropriate pause between
## frames
oopts = ani.options(interval = 0.5)
ani.replay()

## or export the animation to an HTML page
saveHTML(ani.replay(), img.name = &amp;quot;record_plot&amp;quot;)

## record plots and replay immediately
saveHTML({
  dev.control(&amp;quot;enable&amp;quot;)  # enable recording
  par(bg = &amp;quot;white&amp;quot;)  # ensure the background color is white
  plot(x, y, type = &amp;quot;n&amp;quot;)
  for (i in 1:n) {
    points(x[i], y[i], pch = 19, cex = 2)
    ani.record(reset = TRUE, replay.cur = TRUE)  # record the current frame
  }
})

ani.options(oopts)
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>animation-package()</title>
      <link>https://yihui.name/animation/example/animation-package/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/animation-package/</guid>
      <description>
        &lt;p&gt;This package contains a variety functions for animations in statistics which
could probably aid in teaching statistics and data analysis; it also has
several utilities to export R animations to other formats.&lt;/p&gt;

&lt;p&gt;This package mainly makes use of HTML &amp;amp; JavaScript and R windows graphics
devices (such as &lt;code&gt;x11&lt;/code&gt;) to demonstrate animations in statistics;
other kinds of output such as Flash (SWF) or GIF animations or PDF animations
are also available if required software packages have been installed. See
below for details on each type of animation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
### 1. How to setup a simple animation ###

## set some options first
ani.options(interval = 0.2, nmax = 10)
## use a loop to create images one by one
for (i in 1:ani.options(&#39;nmax&#39;)) {
  plot(rnorm(30))
  ani.pause()   ## pause for a while (&#39;interval&#39;)
}
## restore the options


## see ?ani.record for an alternative way to set up an animation

### 2. Animations in HTML pages ###
saveHTML({
  ani.options(interval = 0.05, nmax = 30)
  par(mar = c(3, 3, 2, 0.5), mgp = c(2, .5, 0), tcl = -0.3,
      cex.axis = 0.8, cex.lab = 0.8, cex.main = 1)
  brownian.motion(pch = 21, cex = 5, col = &#39;red&#39;, bg = &#39;yellow&#39;,
                  main = &#39;Demonstration of Brownian Motion&#39;)
}, img.name = &#39;bm_plot&#39;, title = &#39;Demonstration of Brownian Motion&#39;,
         description = c(&#39;Random walk on the 2D plane: for each point&#39;,
                         &#39;(x, y), x = x + rnorm(1) and y = y + rnorm(1).&#39;))

### 3. GIF animations ###
saveGIF({
  ani.options(nmax = 30)
  brownian.motion(pch = 21, cex = 5, col = &#39;red&#39;, bg = &#39;yellow&#39;)
}, interval = 0.05, movie.name = &#39;bm_demo.gif&#39;, ani.width = 600, ani.height = 600)


### 4. Flash animations ###
saveSWF({
  par(mar = c(3, 2.5, 1, 0.2), pch = 20, mgp = c(1.5, 0.5, 0))
  buffon.needle(type = &#39;S&#39;)
}, ani.dev = &#39;pdf&#39;, ani.type = &#39;pdf&#39;, swf.name = &#39;buffon.swf&#39;,
        interval = 0.1, nmax = 40, ani.height = 7, ani.width = 7)


### 5. PDF animations ###
saveLatex({
  par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0), tcl = -0.3,
      cex.axis = 0.8, cex.lab = 0.8, cex.main = 1)
  brownian.motion(pch = 21, cex = 5, col = &#39;red&#39;, bg = &#39;yellow&#39;, main = &#39;Brownian Motion&#39;)
}, img.name = &#39;BM_plot&#39;,
          latex.filename = &#39;brownian_motion.tex&#39;),
          interval = 0.1, nmax = 20)
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>bisection.method()</title>
      <link>https://yihui.name/animation/example/bisection-method/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/bisection-method/</guid>
      <description>
        &lt;p&gt;This is a visual demonstration of finding the root of an equation &lt;code&gt;\(f(x) = 0\)&lt;/code&gt; on an interval using the Bisection Method.&lt;/p&gt;

&lt;p&gt;Suppose we want to solve the equation &lt;code&gt;\(f(x) = 0\)&lt;/code&gt;. Given two points a and
b such that &lt;code&gt;\(f(a)\)&lt;/code&gt; and &lt;code&gt;\(f(b)\)&lt;/code&gt; have opposite signs, we know by the
intermediate value theorem that &lt;code&gt;\(f\)&lt;/code&gt; must have at least one root in the
interval &lt;code&gt;\([a, b]\)&lt;/code&gt; as long as &lt;code&gt;\(f\)&lt;/code&gt; is continuous on this interval. The
bisection method divides the interval in two by computing &lt;code&gt;\(c = (a + b) / 2\)&lt;/code&gt;. There are now two possibilities: either &lt;code&gt;\(f(a)\)&lt;/code&gt; and &lt;code&gt;\(f(c)\)&lt;/code&gt; have
opposite signs, or &lt;code&gt;\(f(c)\)&lt;/code&gt; and &lt;code&gt;\(f(b)\)&lt;/code&gt; have opposite signs. The
bisection algorithm is then applied recursively to the sub-interval where the
sign change occurs.&lt;/p&gt;

&lt;p&gt;During the process of searching, the mid-point of subintervals are annotated
in the graph by both texts and blue straight lines, and the end-points are
denoted in dashed red lines. The root of each iteration is also plotted in
the right margin of the graph.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(nmax = 30)

## default example
xx = bisection.method()
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/bisection-method/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xx$root  # solution
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## a cubic curve
f = function(x) x^3 - 7 * x - 10
xx = bisection.method(f, c(-3, 5))
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/bisection-method/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## interaction: use your mouse to select the two end-points
if (interactive()) bisection.method(f, c(-3, 5), interact = TRUE)
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>boot.iid()</title>
      <link>https://yihui.name/animation/example/boot-iid/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/boot-iid/</guid>
      <description>
        &lt;p&gt;Use a sunflower scatter plot to illustrate the results of resampling, and a
histogram to show the distribution of the statistic of interest.&lt;/p&gt;

&lt;p&gt;This is actually a very naive version of bootstrapping but may be useful for
novices. By default, the circles denote the original dataset, while the red
sunflowers (probably) with leaves denote the points being resampled; the
number of leaves just means how many times these points are resampled, as
bootstrap samples &lt;strong&gt;with&lt;/strong&gt; replacement. The x-axis is the sample values,
and y-axis is the indices of sample points.&lt;/p&gt;

&lt;p&gt;The whole process has illustrated the steps of resampling, computing the
statistic and plotting its distribution based on bootstrapping.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
## bootstrap for 20 random numbers from U(0, 1)
par(mar = c(1.5, 3, 1, 0.1), cex.lab = 0.8, cex.axis = 0.8, mgp = c(2, 
  0.5, 0), tcl = -0.3)
ani.options(nmax = 50)
## don&#39;t want the titles
boot.iid(main = c(&amp;quot;&amp;quot;, &amp;quot;&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/boot-iid/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## for the median of 15 points from chi-square(5)
boot.iid(x = rchisq(15, 5), statistic = median, main = c(&amp;quot;&amp;quot;, 
  &amp;quot;&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/boot-iid/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## change the layout; or you may try &#39;mat = matrix(1:2, 1)&#39;
par(mar = c(1.5, 3, 2.5, 0.1), cex.main = 1)
boot.iid(heights = c(1, 2))
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/boot-iid/demo-c.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-c&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>boot.lowess()</title>
      <link>https://yihui.name/animation/example/boot-lowess/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/boot-lowess/</guid>
      <description>
        &lt;p&gt;Sample the original data with replacement and fit LOWESS curves accordingly.&lt;/p&gt;

&lt;p&gt;We keep on resampling the data and finally we will see several bootstrapped
LOWESS curves, which may give us a rough idea about a &lt;code&gt;confidence interval&lt;/code&gt;
of the LOWESS fit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(nmax = 100, interval = 0.02)

boot.lowess(cars, pch = 20, xlab = &amp;quot;speed&amp;quot;, ylab = &amp;quot;dist&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/boot-lowess/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boot.lowess(cars, f = 1/3, pch = 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/boot-lowess/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>brownian.motion()</title>
      <link>https://yihui.name/animation/example/brownian-motion/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/brownian-motion/</guid>
      <description>
        &lt;p&gt;Brownian motion, or random walk, can be regarded as the trace of some
cumulative normal random numbers.&lt;/p&gt;

&lt;p&gt;The location of the next step is &lt;code&gt;current location + random Gaussian numbers&lt;/code&gt;, i.e.,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$$x_{k+1} = x_{k} + rnorm(1)$$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$$y_{k + 1} = y_{k} + rnorm(1)$$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;where &lt;code&gt;\((x, y)\)&lt;/code&gt; stands for the location of a point.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(interval = 0.05, nmax = 150)
brownian.motion(pch = 21, cex = 5, col = &amp;quot;red&amp;quot;, bg = &amp;quot;yellow&amp;quot;, 
  main = &amp;quot;Demonstration of Brownian Motion&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/brownian-motion/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>buffon.needle()</title>
      <link>https://yihui.name/animation/example/buffon-needle/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/buffon-needle/</guid>
      <description>
        &lt;p&gt;This function provides a simulation for the problem of Buffon&amp;rsquo;s Needle, which
is one of the oldest problems in the field of geometrical probability.&lt;/p&gt;

&lt;p&gt;This is quite an old problem in probability. For mathematical background,
please refer to &lt;http://en.wikipedia.org/wiki/Buffon&#39;s_needle&gt; or
&lt;a href=&#34;http://www.mste.uiuc.edu/reese/buffon/buffon.html&#34;&gt;http://www.mste.uiuc.edu/reese/buffon/buffon.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;lsquo;Needles&amp;rsquo; are denoted by segments on the 2D plane, and dropped randomly to
check whether they cross the parallel lines. Through many times of &amp;lsquo;dropping&amp;rsquo;
needles, the approximate value of &lt;code&gt;\(\pi\)&lt;/code&gt; can be calculated out.&lt;/p&gt;

&lt;p&gt;There are three graphs made in each step: the top-left one is a simulation of
the scenario, the top-right one is to help us understand the connection
between dropping needles and the mathematical method to estimate &lt;code&gt;\(\pi\)&lt;/code&gt;,
and the bottom one is the result for each drop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
## it takes several seconds if &#39;redraw = TRUE&#39;
ani.options(nmax = 400, 1)
par(mar = c(3, 2.5, 0.5, 0.2), pch = 20, mgp = c(1.5, 0.5, 0))
buffon.needle()
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/buffon-needle/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;
 

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## this will be faster
ani.options(nmax = 400, 1)
buffon.needle(redraw = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/buffon-needle/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>clt.ani()</title>
      <link>https://yihui.name/animation/example/clt-ani/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/clt-ani/</guid>
      <description>
        &lt;p&gt;First of all, a number of &lt;code&gt;obs&lt;/code&gt; observations are generated from a
certain distribution for each variable &lt;code&gt;\(X_j\)&lt;/code&gt;, &lt;code&gt;\(j = 1, 2, \cdots, n\)&lt;/code&gt;, and &lt;code&gt;\(n = 1, 2, \cdots, nmax\)&lt;/code&gt;, then
the sample means are computed, and at last the density of these sample means
is plotted as the sample size &lt;code&gt;\(n\)&lt;/code&gt; increases (the theoretical limiting
distribution is denoted by the dashed line), besides, the P-values from the
normality test &lt;code&gt;shapiro.test&lt;/code&gt; are computed for each &lt;code&gt;\(n\)&lt;/code&gt; and
plotted at the same time.&lt;/p&gt;

&lt;p&gt;As long as the conditions of the Central Limit Theorem (CLT) are satisfied,
the distribution of the sample mean will be approximate to the Normal
distribution when the sample size &lt;code&gt;n&lt;/code&gt; is large enough, no matter what is
the original distribution. The largest sample size is defined by &lt;code&gt;nmax&lt;/code&gt;
in &lt;code&gt;ani.options&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(interval = 0.1, nmax = 150)
op = par(mar = c(3, 3, 1, 0.5), mgp = c(1.5, 0.5, 0), tcl = -0.3)
clt.ani(type = &amp;quot;s&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/clt-ani/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;par(op)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## other distributions: Chi-square with df = 5 (mean = df, var
## = 2*df)
f = function(n) rchisq(n, 5)
clt.ani(FUN = f, mean = 5, sd = sqrt(2 * 5))
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/clt-ani/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>conf.int()</title>
      <link>https://yihui.name/animation/example/conf-int/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/conf-int/</guid>
      <description>
        &lt;p&gt;This function gives a demonstration of the concept of confidence intervals in
mathematical statistics.&lt;/p&gt;

&lt;p&gt;Keep on drawing samples from the Normal distribution N(0, 1), computing the
intervals based on a given confidence level and plotting them as segments in
a graph. In the end, we may check the coverage rate against the given
confidence level.&lt;/p&gt;

&lt;p&gt;Intervals that cover the true parameter are denoted in color &lt;code&gt;cl[2]&lt;/code&gt;,
otherwise in color &lt;code&gt;cl[1]&lt;/code&gt;. Each time we draw a sample, we can compute
the corresponding confidence interval. As the process of drawing samples goes
on, there will be a legend indicating the numbers of the two kinds of
intervals respectively and the coverage rate is also denoted in the top-left
of the plot.&lt;/p&gt;

&lt;p&gt;The argument &lt;code&gt;nmax&lt;/code&gt; in &lt;code&gt;ani.options&lt;/code&gt; controls the maximum
times of drawing samples.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(interval = 0.1, nmax = 100)
## 90% interval
conf.int(0.9, main = &amp;quot;Demonstration of Confidence Intervals&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/conf-int/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

&lt;p&gt;This animation shows the concept of the confidence interval which depends on the observations: if the samples change, the interval changes too. At last we can see that the coverage rate will be approximate to the confidence level.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>cv.ani()</title>
      <link>https://yihui.name/animation/example/cv-ani/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/cv-ani/</guid>
      <description>
        &lt;p&gt;This function uses rectangles to illustrate the &lt;code&gt;\(k\)&lt;/code&gt; folds and
mark the test set and the training set with different colors.&lt;/p&gt;

&lt;p&gt;Briefly speaking, the process of cross-validation is just to split
the whole data set into several parts and select one part as the
test set and the rest parts as the training set.&lt;/p&gt;

&lt;p&gt;The computation of sample sizes is base on &lt;code&gt;kfcv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a naive demonstration for the k-fold cross validation. The k rectangles in the plot denote the k folds of data. Each time a fold will be used as the test set and the rest parts as the training set.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(interval = 1, nmax = 15)
cv.ani(main = &amp;quot;Demonstration of the k-fold Cross Validation&amp;quot;, 
  bty = &amp;quot;l&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/cv-ani/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## leave-one-out CV
cv.ani(x = runif(15), k = 15)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/cv-ani/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>cv.nfeaturesLDA()</title>
      <link>https://yihui.name/animation/example/cv-nfeatureslda/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/cv-nfeatureslda/</guid>
      <description>
        &lt;p&gt;This function provids an illustration of the process of finding out the
optimum number of variables using k-fold cross-validation in a linear
discriminant analysis (LDA).&lt;/p&gt;

&lt;p&gt;For a classification problem, usually we wish to use as less variables as
possible because of difficulties brought by the high dimension.&lt;/p&gt;

&lt;p&gt;The selection procedure is like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Split the whole data randomly into &lt;code&gt;\(k\)&lt;/code&gt; folds:&lt;/li&gt;
&lt;li&gt;For the number of features &lt;code&gt;\(g = 1, 2, \cdots, g_{max}\)&lt;/code&gt;, choose &lt;code&gt;\(g\)&lt;/code&gt; features that have the largest discriminatory
power (measured by the F-statistic in ANOVA):&lt;/li&gt;
&lt;li&gt;For the fold &lt;code&gt;\(i\)&lt;/code&gt; ( &lt;code&gt;\(i = 1, 2, \cdots, k\)&lt;/code&gt; ):&lt;/li&gt;
&lt;li&gt;Train a LDA model without the &lt;code&gt;\(i\)&lt;/code&gt;-th fold data, and predict with the &lt;code&gt;\(i\)&lt;/code&gt;-th fold for a proportion of correct predictions &lt;code&gt;\(p_{gi}\)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Average the &lt;code&gt;\(k\)&lt;/code&gt; proportions to get the correct rate &lt;code&gt;\(p_g\)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Determine the optimum number of features with the largest &lt;code&gt;\(p\)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that &lt;code&gt;\(g_{max}\)&lt;/code&gt; is set by &lt;code&gt;ani.options(&#39;nmax&#39;)&lt;/code&gt; (i.e. the
maximum number of features we want to choose).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(nmax = 10)
par(mar = c(3, 3, 0.2, 0.7), mgp = c(1.5, 0.5, 0))
cv.nfeaturesLDA(pch = 19)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Loading required namespace: MASS
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/cv-nfeaturesLDA/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

&lt;p&gt;This animation provides an illustration of the process of finding out the optimum number of variables using k-fold cross-validation in a linear discriminant analysis (LDA).&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>flip.coin()</title>
      <link>https://yihui.name/animation/example/flip-coin/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/flip-coin/</guid>
      <description>
        &lt;p&gt;This function provides a simulation to the process of flipping coins and
computes the frequencies for &lt;code&gt;heads&lt;/code&gt; and &lt;code&gt;tails&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;faces&lt;/code&gt; is a single integer, say 2, a sequence of integers from 1 to
&lt;code&gt;faces&lt;/code&gt; will be used to denote the faces of a coin; otherwise this
character vector just gives the names of each face.&lt;/p&gt;

&lt;p&gt;When the &lt;code&gt;\(i\)&lt;/code&gt;-th face shows up, a colored thin rectangle will be added to
the corresponding place (the &lt;code&gt;\(i\)&lt;/code&gt;-th bar), and there will be corresponding
annotations for the number of tosses and frequencies.&lt;/p&gt;

&lt;p&gt;The special argument &lt;code&gt;grid&lt;/code&gt; is for consideration of a too large number
of flipping, in which case if you still draw horizontal lines in these
rectangles, the rectangles will be completely covered by these lines, thus we
should specify it as &lt;code&gt;NA&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At last the frequency for each face will be computed and shown in the header
of the plot &amp;ndash; this shall be close to &lt;code&gt;prob&lt;/code&gt; if &lt;code&gt;ani.options(&#39;nmax&#39;)&lt;/code&gt; is large enough.&lt;/p&gt;

&lt;p&gt;This animation has provided a simulation of flipping coins which might be helpful in understanding the concept of probability.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(interval = 0.2, nmax = 100)
## a coin would stand on the table?? just kidding :)
flip.coin(faces = c(&amp;quot;Head&amp;quot;, &amp;quot;Stand&amp;quot;, &amp;quot;Tail&amp;quot;), type = &amp;quot;n&amp;quot;, prob = c(0.45, 
  0.1, 0.45), col = c(1, 2, 4))
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/flip-coin/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flip.coin(bg = &amp;quot;yellow&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/flip-coin/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>grad.desc()</title>
      <link>https://yihui.name/animation/example/grad-desc/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/grad-desc/</guid>
      <description>
        &lt;p&gt;This function provids a visual illustration for the process of minimizing a
real-valued function through Gradient Descent Algorithm.&lt;/p&gt;

&lt;p&gt;Gradient descent is an optimization algorithm. To find a local minimum of a
function using gradient descent, one takes steps proportional to the negative
of the gradient (or the approximate gradient) of the function at the current
point. If instead one takes steps proportional to the gradient, one
approaches a local maximum of that function; the procedure is then known as
gradient ascent.&lt;/p&gt;

&lt;p&gt;The arrows are indicating the result of iterations and the process of
minimization; they will go to a local minimum in the end if the maximum
number of iterations &lt;code&gt;ani.options(&#39;nmax&#39;)&lt;/code&gt; has not been reached.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
## default example
ani.options(interval = 0.3, nmax = 50)
xx = grad.desc()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xx$par  # solution
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##          x          y 
## -0.0675852  0.0009736
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xx$persp(col = &amp;quot;lightblue&amp;quot;, phi = 30)  # perspective plot
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/grad-desc/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## define more complex functions; a little time-consuming
f1 = function(x, y) x^2 + 3 * sin(y)
xx = grad.desc(f1, pi * c(-2, -2, 2, 2), c(-2 * pi, 2))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xx$persp(col = &amp;quot;lightblue&amp;quot;, theta = 30, phi = 30)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/grad-desc/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## need to provide the gradient when deriv() cannot handle the
## function
grad.desc(FUN = function(x1, x2) {
  x0 = cos(x2)
  x1^2 + x0
}, gr = function(x1, x2) {
  c(2 * x1, -sin(x2))
}, rg = c(-3, -1, 3, 5), init = c(-3, 0.5), main = expression(x[1]^2 + 
  cos(x[2])))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Warning in grad.desc(FUN = function(x1, x2) {: Maximum
## number of iterations reached!
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/grad-desc/demo-c.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-c&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## or a even more complicated function
ani.options(interval = 0, nmax = 200)
f2 = function(x, y) sin(1/2 * x^2 - 1/4 * y^2 + 3) * cos(2 * 
  x + 1 - exp(y))
xx = grad.desc(f2, c(-2, -2, 2, 2), c(-1, 0.5), gamma = 0.1, 
  tol = 1e-04)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/grad-desc/demo-d.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-d&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## click your mouse to select a start point
if (interactive()) {
  xx = grad.desc(f2, c(-2, -2, 2, 2), interact = TRUE, tol = 1e-04)
  xx$persp(col = &amp;quot;lightblue&amp;quot;, theta = 30, phi = 30)
}
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>im.convert()</title>
      <link>https://yihui.name/animation/example/im-convert/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/im-convert/</guid>
      <description>
        &lt;p&gt;The main purpose of these two functions is to create GIF animations.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;im.convert&lt;/code&gt; simply wraps the arguments of the
&lt;code&gt;convert&lt;/code&gt; utility of ImageMagick to make it easier to call
ImageMagick in R.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
## generate some images
owd = setwd(tempdir())
ani.options(interval = 0.05, nmax = 20)
png(&amp;quot;bm%03d.png&amp;quot;)
brownian.motion(pch = 21, cex = 5, col = &amp;quot;red&amp;quot;, bg = &amp;quot;yellow&amp;quot;, 
  main = &amp;quot;Demonstration of Brownian Motion&amp;quot;)
dev.off()

## filenames with a wildcard *
im.convert(&amp;quot;bm*.png&amp;quot;, output = &amp;quot;bm-animation1.gif&amp;quot;)
## use GraphicsMagick
gm.convert(&amp;quot;bm*.png&amp;quot;, output = &amp;quot;bm-animation2.gif&amp;quot;)

## or a filename vector
bm.files = sprintf(&amp;quot;bm%03d.png&amp;quot;, 1:20)
im.convert(files = bm.files, output = &amp;quot;bm-animation3.gif&amp;quot;)
setwd(owd)
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>kmeans.ani()</title>
      <link>https://yihui.name/animation/example/kmeans-ani/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/kmeans-ani/</guid>
      <description>
        &lt;p&gt;This function provides a demo of the k-Means cluster algorithm for data
containing only two variables (columns).&lt;/p&gt;

&lt;p&gt;The k-Means cluster algorithm may be regarded as a series of iterations of:
finding cluster centers, computing distances between sample points, and
redefining cluster membership.&lt;/p&gt;

&lt;p&gt;The data given by &lt;code&gt;x&lt;/code&gt; is clustered by the &lt;code&gt;\(k\)&lt;/code&gt;-means method, which
aims to partition the points into &lt;code&gt;\(k\)&lt;/code&gt; groups such that the sum of squares
from points to the assigned cluster centers is minimized. At the minimum, all
cluster centres are at the mean of their Voronoi sets (the set of data points
which are nearest to the cluster centre).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
## set larger &#39;interval&#39; if the speed is too fast
ani.options(interval = 1)
par(mar = c(3, 3, 1, 1.5), mgp = c(1.5, 0.5, 0))
kmeans.ani()
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/kmeans-ani/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;
 

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## the kmeans() example; very fast to converge!
x = rbind(matrix(rnorm(100, sd = 0.3), ncol = 2), matrix(rnorm(100, 
  mean = 1, sd = 0.3), ncol = 2))
colnames(x) = c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;)
kmeans.ani(x, centers = 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/kmeans-ani/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;
 

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## what if we cluster them into 3 groups?
kmeans.ani(x, centers = 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/kmeans-ani/demo-c.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-c&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>knn.ani()</title>
      <link>https://yihui.name/animation/example/knn-ani/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/knn-ani/</guid>
      <description>
        &lt;p&gt;Demonstrate the process of k-Nearest Neighbour classification on the 2D
plane.&lt;/p&gt;

&lt;p&gt;For each row of the test set, the &lt;code&gt;\(k\)&lt;/code&gt; nearest (in Euclidean distance)
training set vectors are found, and the classification is decided by majority
vote, with ties broken at random. For a single test sample point, the basic
steps are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;locate the test point&lt;/li&gt;
&lt;li&gt;compute the distances between the test point and all points in the training set&lt;/li&gt;
&lt;li&gt;find &lt;code&gt;\(k\)&lt;/code&gt; shortest distances and the corresponding training set points&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;vote for the result (find the maximum in the table for the true classifications)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As there are four steps in an iteration, the total number of animation frames
should be &lt;code&gt;4 * min(nrow(test), ani.options(&#39;nmax&#39;))&lt;/code&gt; at last.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
## a binary classification problem
ani.options(interval = 1, nmax = 10)
x = matrix(c(rnorm(80, mean = -1), rnorm(80, mean = 1)), ncol = 2, 
  byrow = TRUE)
y = matrix(rnorm(20, mean = 0, sd = 1.2), ncol = 2)
knn.ani(train = x, test = y, cl = rep(c(&amp;quot;first class&amp;quot;, &amp;quot;second class&amp;quot;), 
  each = 40), k = 30)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/knn-ani/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;
 

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x = matrix(c(rnorm(30, mean = -2), rnorm(30, mean = 2), rnorm(30, 
  mean = 0)), ncol = 2, byrow = TRUE)
y = matrix(rnorm(20, sd = 2), ncol = 2)
knn.ani(train = x, test = y, cl = rep(c(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;, &amp;quot;third&amp;quot;), 
  each = 15), k = 25, cl.pch = c(2, 3, 19), dist.lty = 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/knn-ani/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## an interactive demo: choose the test set by mouse-clicking
if (interactive()) {
  ani.options(nmax = 5)
  knn.ani(interact = TRUE)
}
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>least.squares()</title>
      <link>https://yihui.name/animation/example/least-squares/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/least-squares/</guid>
      <description>
        &lt;p&gt;This is a simple demonstration of the meaning of least squares in univariate
linear regression.&lt;/p&gt;

&lt;p&gt;With either the intercept or the slope changing, the lines will be moving in
the graph and corresponding residuals will be plotted. We can finally see the
best estimate of the intercept and the slope from the residual plot.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
par(mar = c(5, 4, 0.5, 0.1))
ani.options(interval = 0.3, nmax = 50)

## default animation: with slope changing
least.squares()
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/least-squares/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## intercept changing
least.squares(ani.type = &amp;quot;intercept&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/least-squares/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;

&lt;p&gt;We want to find an estimate for the slope in 50 candidate slopes, so we just compute the RSS one by one.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>lln.ani()</title>
      <link>https://yihui.name/animation/example/lln-ani/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/lln-ani/</guid>
      <description>
        &lt;p&gt;This function plots the sample mean as the sample size grows to check whether
the sample mean approaches to the population mean.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;np&lt;/code&gt; points are plotted to denote the distribution of the sample mean;
we will observe that the range of the sample mean just becomes smaller and
smaller as the sample size increases and ultimately there will be an obvious
trend that the sample mean converges to the population mean &lt;code&gt;mu&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The parameter &lt;code&gt;nmax&lt;/code&gt; in &lt;code&gt;ani.options&lt;/code&gt; means the maximum
sample size.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(interval = 0.01, nmax = 150)

lln.ani(pch = &amp;quot;.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/lln-ani/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## chi-square distribution; population mean = df
lln.ani(FUN = function(n, mu) rchisq(n, df = mu), mu = 5, cex = 0.6)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/lln-ani/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;

&lt;p&gt;The sample mean approaches to the population mean as the sample size n grows&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>moving.block()</title>
      <link>https://yihui.name/animation/example/moving-block/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/moving-block/</guid>
      <description>
        &lt;p&gt;For a long numeric vector or matrix (or data frame), we can plot only a
subset of its elements to take a closer look at its structure. With a moving
&amp;lsquo;block&amp;rsquo; from the beginning to the end of a vector or matrix or any R
objects to which we can apply &lt;code&gt;subset&lt;/code&gt;, all elements inside the block
are plotted as a line or scatter plot or any customized plots.&lt;/p&gt;

&lt;p&gt;For a vector, the elments from &lt;code&gt;i + 1&lt;/code&gt; to &lt;code&gt;i + block&lt;/code&gt; will be
plotted in the &lt;code&gt;i&lt;/code&gt;-th step; similarly for a matrix or data frame, a (scatter)
plot will be created from the &lt;code&gt;i + 1&lt;/code&gt;-th row to &lt;code&gt;i + block&lt;/code&gt;-th row.&lt;/p&gt;

&lt;p&gt;However, this function is not limited to scatter plots or lines &amp;ndash; we can
customize the function &lt;code&gt;FUN&lt;/code&gt; as we wish.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
## (1) Brownian motion block length: 101 (i.e. 300-200+1)
ani.options(nmax = 200, 0.1)
# plot y = dat against x = i + 1:block customize xlab and
# ylab with &#39;i&#39; and &#39;block&#39; restrict ylim using the range of
# &#39;dat&#39;
moving.block(dat = cumsum(rnorm(300)), FUN = function(..., dat = dat, 
  i = i, block = block) {
  plot(..., x = i + 1:block, xlab = sprintf(&amp;quot;block length = %d&amp;quot;, 
    block), ylim = range(dat), ylab = sprintf(&amp;quot;x[%s:%s]&amp;quot;, 
    i + 1, i + block))
}, type = &amp;quot;o&amp;quot;, pch = 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/moving-block/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;
 

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## (2) Word counts of Hu&#39;s speech (block = 10;
## length(HuSpeech) = 75) see any pattern in the President&#39;s
## speech?
ani.options(nmax = 66, 1)
moving.block(dat = HuSpeech, FUN = function(..., dat = dat, i = i, 
  block = block) {
  plot(..., x = i + 1:block, xlab = &amp;quot;paragraph index&amp;quot;, ylim = range(dat), 
    ylab = sprintf(&amp;quot;HuSpeech[%s:%s]&amp;quot;, i + 1, i + block))
}, type = &amp;quot;o&amp;quot;, pch = 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/moving-block/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;
 

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## (3) sunspot data: observe the 11-year cycles block = 11
## years x 12 months/year = 132 set interval greater than 0 if
## your computer really rocks!
ani.options(nmax = 2857, 0.1)
spt.att = tsp(sunspot.month)
# the time index (we need it to correctly draw the ticks of
# x-axis)
ts.idx = seq(spt.att[1], spt.att[2], 1/spt.att[3])
moving.block(dat = sunspot.month, block = 132, FUN = function(..., 
  dat = dat, i = i, block = block) {
  plot(..., x = ts.idx[i + 1:block], xlab = sprintf(&amp;quot;block length = %d&amp;quot;, 
    block), ylim = range(dat), ylab = sprintf(&amp;quot;sunspot.month[%s:%s]&amp;quot;, 
    i + 1, i + block))
}, type = &amp;quot;o&amp;quot;, pch = 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Warning in moving.block(dat = sunspot.month, block = 132,
## FUN = function(..., : block length is too short; try to
## adjust &#39;block&#39; or ani.options(&#39;nmax&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/moving-block/demo-c.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-c&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## (4) earth quake: order the data by &#39;depth&#39; first see how
## the locations change as &#39;depth&#39; increases
ani.options(nmax = 900, 0.1)
# compute the mean depth for each block of data
moving.block(quakes[order(quakes$depth), c(&amp;quot;long&amp;quot;, &amp;quot;lat&amp;quot;)], FUN = function(..., 
  dat = dat, i = i, block = block) {
  plot(..., xlab = sprintf(&amp;quot;%s[%s:%s]&amp;quot;, colnames(dat)[1], i + 
    1, i + block), ylab = sprintf(&amp;quot;%s[%s:%s]&amp;quot;, colnames(dat)[2], 
    i + 1, i + block), xlim = range(dat[, 1]), ylim = range(dat[, 
    2]), main = sprintf(&amp;quot;Mean Depth = %.3f&amp;quot;, mean(sort(quakes$depth)[i + 
    1:block])))
}, pch = 20, col = rgb(0, 0, 0, 0.5))
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/moving-block/demo-d.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-d&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>mwar.ani()</title>
      <link>https://yihui.name/animation/example/mwar-ani/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/mwar-ani/</guid>
      <description>
        &lt;p&gt;This function just fulfills a very naive idea about moving window regression
using rectangles to denote the &lt;code&gt;windows&lt;/code&gt; and move them, and the
corresponding AR(1) coefficients as long as rough confidence intervals are
computed for data points inside the &lt;code&gt;windows&lt;/code&gt; during the process of moving.&lt;/p&gt;

&lt;p&gt;The AR(1) coefficients are computed by &lt;code&gt;arima&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
## moving window along a sin curve
ani.options(interval = 0.1, nmax = 50)
par(mar = c(2, 3, 1, 0.5), mgp = c(1.5, 0.5, 0))
mwar.ani(lty.rect = 3, pch = 21, col = &amp;quot;red&amp;quot;, bg = &amp;quot;yellow&amp;quot;, 
  type = &amp;quot;o&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/mwar-ani/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## for the data &#39;pageview&#39;
mwar.ani(pageview$visits, k = 30)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/mwar-ani/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>newton.method()</title>
      <link>https://yihui.name/animation/example/newton-method/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/newton-method/</guid>
      <description>
        &lt;p&gt;This function provides an illustration of the iterations in Newton&amp;rsquo;s method.&lt;/p&gt;

&lt;p&gt;Newton&amp;rsquo;s method (also known as the Newton-Raphson method or the
Newton-Fourier method) is an efficient algorithm for finding approximations
to the zeros (or roots) of a real-valued function f(x).&lt;/p&gt;

&lt;p&gt;The iteration goes on in this way:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$$x_{k + 1} = x_{k} - \frac{FUN(x_{k})}{FUN&#39;(x_{k})}$$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From the starting value &lt;code&gt;\(x_0\)&lt;/code&gt;, vertical lines and points are plotted to
show the location of the sequence of iteration values &lt;code&gt;\(x_1, x_2, \ldots\)&lt;/code&gt;;
tangent lines are drawn to illustrate the
relationship between successive iterations; the iteration values are in the
right margin of the plot.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(interval = 1, nmax = 50)
par(pch = 20)

## default example
xx = newton.method()
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/newton-method/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xx$root  # solution
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## take a long long journey
newton.method(function(x) 5 * x^3 - 7 * x^2 - 40 * x + 100, 7.15, 
  c(-6.2, 7.1))
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/newton-method/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## another function
ani.options(interval = 0.5)
xx = newton.method(function(x) exp(-x) * x, rg = c(0, 10), init = 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/newton-method/demo-c.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-c&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## does not converge!
xx = newton.method(function(x) atan(x), rg = c(-5, 5), init = 1.5)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/newton-method/demo-d.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-d&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xx$root  # Inf
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] Inf
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## interaction: use your mouse to select the starting point
if (interactive()) {
  ani.options(interval = 0.5, nmax = 50)
  xx = newton.method(function(x) atan(x), rg = c(-2, 2), interact = TRUE)
}
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>pdftk()</title>
      <link>https://yihui.name/animation/example/pdftk/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/pdftk/</guid>
      <description>
        &lt;p&gt;If the toolkit Pdftk is available in the system, it will be called to
manipulate the PDF files (especially to compress the PDF files).&lt;/p&gt;

&lt;p&gt;This is a wrapper to call &lt;code&gt;pdftk&lt;/code&gt;. The path of &lt;code&gt;pdftk&lt;/code&gt; should
be set via &lt;code&gt;ani.options(pdftk = &#39;path/to/pdftk&#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;See the reference for detailed usage of &lt;code&gt;pdftk&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
pdf(&amp;quot;huge-plot.pdf&amp;quot;)
plot(rnorm(50000))
dev.off()

## Windows
ani.options(pdftk = &amp;quot;D:/Installer/pdftk.exe&amp;quot;)
pdftk(&amp;quot;huge-plot.pdf&amp;quot;, output = &amp;quot;huge-plot0.pdf&amp;quot;)

## Linux (does not work??)
ani.options(pdftk = &amp;quot;pdftk&amp;quot;)
pdftk(&amp;quot;huge-plot.pdf&amp;quot;, output = &amp;quot;huge-plot1.pdf&amp;quot;)

ani.options(pdftk = NULL)

file.info(c(&amp;quot;huge-plot.pdf&amp;quot;, &amp;quot;huge-plot0.pdf&amp;quot;, &amp;quot;huge-plot1.pdf&amp;quot;))[&amp;quot;size&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>price.ani()</title>
      <link>https://yihui.name/animation/example/price-ani/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/price-ani/</guid>
      <description>
        &lt;p&gt;Demonstrate stock prices in animations&lt;/p&gt;

&lt;p&gt;This function can display the frequencies of stock prices in a certain time
span with the span changing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
## see more examples in ?vanke1127
price.ani(vanke1127$price, vanke1127$time, lwd = 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/price-ani/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>qpdf()</title>
      <link>https://yihui.name/animation/example/qpdf/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/qpdf/</guid>
      <description>
        &lt;p&gt;If the tool qpdf is available in the system, it will be called to manipulate
the PDF files (especially to compress the PDF files).&lt;/p&gt;

&lt;p&gt;This is a wrapper to call &lt;code&gt;qpdf&lt;/code&gt;. The path of &lt;code&gt;qpdf&lt;/code&gt; should
be set via &lt;code&gt;ani.options(qpdf = &#39;path/to/qpdf&#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;See the reference for detailed usage of &lt;code&gt;qpdf&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
pdf(&amp;quot;huge-plot.pdf&amp;quot;)
plot(rnorm(50000))
dev.off()

## Windows
ani.options(qpdf = &amp;quot;D:/Installer/qpdf/bin/qpdf.exe&amp;quot;)
qpdf(&amp;quot;huge-plot.pdf&amp;quot;, output = &amp;quot;huge-plot0.pdf&amp;quot;)

## Linux
ani.options(qpdf = &amp;quot;qpdf&amp;quot;)
qpdf(&amp;quot;huge-plot.pdf&amp;quot;, output = &amp;quot;huge-plot1.pdf&amp;quot;)

ani.options(qpdf = NULL)

file.info(c(&amp;quot;huge-plot.pdf&amp;quot;, &amp;quot;huge-plot0.pdf&amp;quot;, &amp;quot;huge-plot1.pdf&amp;quot;))[&amp;quot;size&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>quincunx()</title>
      <link>https://yihui.name/animation/example/quincunx/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/quincunx/</guid>
      <description>
        &lt;p&gt;Demonstration of the Quincunx (Bean Machine/Galton Box)&lt;/p&gt;

&lt;p&gt;Simulates the quincunx with &amp;lsquo;balls&amp;rsquo; (beans) falling through several layers
(denoted by triangles) and the distribution of the final locations at which
the balls hit is denoted by a histogram.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;quincunx()&lt;/code&gt; is used to model intergenerational variation: balls are dropped from the top and cascade randomly through rows of alternating offset pins, landing in compartments at the bottom as a binomial or approximately normal distribution&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;quincunx2()&lt;/code&gt; is afforded insight into regression to the mean. When the pellets in an upper compartment are released, their average final position is directly below. But what if we ask of a compartment at the lower level, from where did these pellets come? The answer was not &amp;lsquo;on average, directly above&amp;rsquo;. Rather, it was &amp;lsquo;on average, more towards the middle&amp;rsquo;, for the simple reason that there were more pellets above it towards the middle that could wander left than there were in the left extreme that could wander to the right, inwards&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The bean machine, also known as the quincunx or Galton box, is a device
invented by Sir Francis Galton to demonstrate the law of error and the normal
distribution.&lt;/p&gt;

&lt;p&gt;When a ball falls through a layer, it can either go to the right or left side
with the probability 0.5. At last the location of all the balls will show us
the bell-shaped distribution.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
set.seed(123)
ani.options(nmax = 200 + 15 - 2, 2)
freq = quincunx(balls = 200, col.balls = rainbow(200))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## frequency table
barplot(freq, space = 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/quincunx/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Darwin, Galton and the Statistical Enlightenment, &lt;a href=&#34;http://onlinelibrary.wiley.com/doi/10.1111/j.1467-985X.2010.00643.x/full&#34;&gt;http://onlinelibrary.wiley.com/doi/10.1111/j.1467-985X.2010.00643.x/full&lt;/a&gt; 
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

        
      </description>
    </item>
    
    <item>
      <title>quincunx2()</title>
      <link>https://yihui.name/animation/example/quincunx2/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/quincunx2/</guid>
      <description>
        &lt;p&gt;Demonstration of the Quincunx (Bean Machine/Galton Box)&lt;/p&gt;

&lt;p&gt;Simulates the quincunx with &amp;lsquo;balls&amp;rsquo; (beans) falling through several layers
(denoted by triangles) and the distribution of the final locations at which
the balls hit is denoted by a histogram.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;quincunx()&lt;/code&gt; is used to model intergenerational variation: balls are dropped from
the top and cascade randomly through rows of alternating offset pins, landing in
compartments at the bottom as a binomial or approximately normal distribution&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;quincunx2()&lt;/code&gt; is afforded insight into regression to the mean. When the pellets
in an upper compartment are released, their average final position is directly
below. But what if we ask of a compartment at the lower level, from where did
these pellets come? The answer was not &amp;lsquo;on average, directly above&amp;rsquo;. Rather,
it was &amp;lsquo;on average, more towards the middle&amp;rsquo;, for the simple reason that there
were more pellets above it towards the middle that could wander left than there
were in the left extreme that could wander to the right, inwards&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The bean machine, also known as the quincunx or Galton box, is a device
invented by Sir Francis Galton to demonstrate the law of error and the normal
distribution.&lt;/p&gt;

&lt;p&gt;When a ball falls through a layer, it can either go to the right or left side
with the probability 0.5. At last the location of all the balls will show us
the bell-shaped distribution.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
set.seed(123)
ani.options(nmax = 200 + 15 - 2, 2)
freq = quincunx2(balls = 200, col.balls = rainbow(200))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## frequency table
barplot(freq$top, space = 0)  # top layers
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;barplot(freq$bottom, space = 0)  # bottom layers
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/quincunx2/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Darwin, Galton and the Statistical Enlightenment, &lt;a href=&#34;http://onlinelibrary.wiley.com/doi/10.1111/j.1467-985X.2010.00643.x/full&#34;&gt;http://onlinelibrary.wiley.com/doi/10.1111/j.1467-985X.2010.00643.x/full&lt;/a&gt; 
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

        
      </description>
    </item>
    
    <item>
      <title>sample.cluster()</title>
      <link>https://yihui.name/animation/example/sample-cluster/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/sample-cluster/</guid>
      <description>
        &lt;p&gt;Each rectangle stands for a cluster, and the simple random sampling without
replacement is performed for each cluster. All points in the clusters being
sampled will be drawn out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(nmax = 50)
par(mar = rep(1, 4))
sample.cluster(col = c(&amp;quot;bisque&amp;quot;, &amp;quot;white&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/sample-cluster/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>sample.ratio()</title>
      <link>https://yihui.name/animation/example/sample-ratio/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/sample-ratio/</guid>
      <description>
        &lt;p&gt;This function demonstrates the advantage of ratio estimation when further
information (ratio) about x and y is available.&lt;/p&gt;

&lt;p&gt;From this demonstration we can clearly see that the ratio estimation is
generally better than the simple sample average when the ratio &lt;strong&gt;R&lt;/strong&gt;
really exists, otherwise ratio estimation may not help.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(interval = 1, nmax = 50)

## observe the location of the red line (closer to the
## population mean)
res = sample.ratio()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## absolute difference with the true mean
matplot(abs(cbind(res$ybar.ratio, res$ybar.simple) - res$Ybar), 
  type = &amp;quot;l&amp;quot;)
legend(&amp;quot;topleft&amp;quot;, c(&amp;quot;Ratio Estimation&amp;quot;, &amp;quot;Sample Average&amp;quot;), lty = 1:2, 
  col = 1:2)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/sample-ratio/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## if the ratio does not actually exist:
sample.ratio(X = rnorm(50), Y = rnorm(50))
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/sample-ratio/demo-b.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-b&lt;/p&gt;&lt;/video&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## ratio estimation may not be better than the simple average
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>sample.simple()</title>
      <link>https://yihui.name/animation/example/sample-simple/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/sample-simple/</guid>
      <description>
        &lt;p&gt;The whole sample frame is denoted by a matrix (&lt;code&gt;nrow * ncol&lt;/code&gt;) in the
plane just for convenience, and the points being sampled are marked out (by
red circles by default). Each member of the population has an equal and known
chance of being selected.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(nmax = 50)
par(mar = rep(1, 4))
sample.simple()
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/sample-simple/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>sample.strat()</title>
      <link>https://yihui.name/animation/example/sample-strat/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/sample-strat/</guid>
      <description>
        &lt;p&gt;Each rectangle stands for a stratum, and the simple random sampling without
replacement is performed within each stratum. The points being sampled are
marked out (by red circles by default).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(nmax = 50)
par(mar = rep(1, 4), lwd = 2)
sample.strat(col = c(&amp;quot;bisque&amp;quot;, &amp;quot;white&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/sample-strat/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>sample.system()</title>
      <link>https://yihui.name/animation/example/sample-system/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/sample-system/</guid>
      <description>
        &lt;p&gt;The whole sample frame is denoted by a matrix (&lt;code&gt;nrow * ncol&lt;/code&gt;) in the
plane, and the sample points with equal intervals are drawn out according to
a random starting point. The points being sampled are marked by red circles.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(nmax = 50)
par(mar = rep(1, 4), lwd = 2)
sample.system()
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/sample-system/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>saveGIF()</title>
      <link>https://yihui.name/animation/example/savegif/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/savegif/</guid>
      <description>
        &lt;p&gt;This function opens a graphical device (specified in
&lt;code&gt;ani.options(&#39;ani.dev&#39;)&lt;/code&gt;) first to generate a sequence of images based
on &lt;code&gt;expr&lt;/code&gt;, then makes use of the command &lt;code&gt;convert&lt;/code&gt; in
&amp;lsquo;ImageMagick&amp;rsquo; to convert these images to a single animated movie (as a GIF or
MPG file). An alternative software package is GraphicsMagick (use
&lt;code&gt;convert = &#39;gm convert&#39;&lt;/code&gt;), which is smaller than ImageMagick.&lt;/p&gt;

&lt;p&gt;This function calls &lt;code&gt;im.convert&lt;/code&gt; (or &lt;code&gt;gm.convert&lt;/code&gt;,
depending on the argument &lt;code&gt;convert&lt;/code&gt;) to convert images to a single
animation.&lt;/p&gt;

&lt;p&gt;The advantage of this function is that it can create a single movie file,
however, there are two problems too: (1) we need a special (free) software
ImageMagick or GraphicsMagick; (2) the speed of the animation will be beyond
our control, as the &lt;code&gt;interval&lt;/code&gt; option is fixed. Other approaches in this
package may have greater flexibilities, e.g. the HTML approach (see
&lt;code&gt;saveHTML&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;ani.options&lt;/code&gt; for the options that may affect the output,
e.g.  the graphics device (including the height/width specifications), the
file extension of image frames, and the time interval between image frames,
etc.  Note that &lt;code&gt;ani.options(&#39;interval&#39;)&lt;/code&gt; can be a numeric vector!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
## make sure ImageMagick has been installed in your system
saveGIF({
  for (i in 1:10) plot(runif(10), ylim = 0:1)
})

## if the above conversion was successful, the option
## &#39;convert&#39; should not be NULL under Windows
ani.options(&amp;quot;convert&amp;quot;)
## like &#39;C:/Software/LyX/etc/ImageMagick/convert.exe&#39;

saveGIF({
  brownian.motion(pch = 21, cex = 5, col = &amp;quot;red&amp;quot;, bg = &amp;quot;yellow&amp;quot;)
}, movie.name = &amp;quot;brownian_motion.gif&amp;quot;, interval = 0.1, nmax = 30, 
  ani.width = 600)

## non-constant intervals between image frames
saveGIF({
  brownian.motion(pch = 21, cex = 5, col = &amp;quot;red&amp;quot;, bg = &amp;quot;yellow&amp;quot;)
}, movie.name = &amp;quot;brownian_motion2.gif&amp;quot;, interval = runif(30, 
  0.01, 1), nmax = 30)
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>saveHTML()</title>
      <link>https://yihui.name/animation/example/savehtml/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/savehtml/</guid>
      <description>
        &lt;p&gt;This function first records all the plots in the R expression as bitmap
images, then inserts them into an HTML page and finally creates the animation
using the SciAnimator library.&lt;/p&gt;

&lt;p&gt;It mainly uses the SciAnimator library, which is based on jQuery. It has a
neat interface (both technically and visually) and is much easier to use or
extend. Moreover, this function allows multiple animations in a single HTML
page &amp;ndash; just use the same HTML filename.&lt;/p&gt;

&lt;p&gt;Optionally the source code and some session information can be added below
the animations for the sake of reproducibility (specified by the option
&lt;code&gt;ani.options(&#39;verbose&#39;)&lt;/code&gt; &amp;ndash; if &lt;code&gt;TRUE&lt;/code&gt;, the description, loaded
packages, the code to produce the animation, as well as a part of
&lt;code&gt;sessionInfo()&lt;/code&gt; will be written in the bottom of the animation;
the R code will be highlighted using the SyntaxHighlighter library for better
reading experience).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
## A quick and dirty demo
des = c(&amp;quot;This is a silly example.\n\n&amp;quot;, &amp;quot;You can describe it in more detail.&amp;quot;, 
  &amp;quot;For example, bla bla...&amp;quot;)
saveHTML({
  par(mar = c(4, 4, 0.5, 0.5))
  for (i in 1:20) {
    plot(runif(20), ylim = c(0, 1))
    ani.pause()
  }
}, img.name = &amp;quot;unif_plot&amp;quot;, imgdir = &amp;quot;unif_dir&amp;quot;, htmlfile = &amp;quot;random.html&amp;quot;, 
  autobrowse = FALSE, title = &amp;quot;Demo of 20 uniform random numbers&amp;quot;, 
  description = des)



## we can merge another animation into the former page as long
## as &#39;htmlfile&#39; is the same; this time I don&#39;t want the
## animation to autoplay, and will use text labels for the
## buttons (instead of UTF-8 symbols)
des = c(&amp;quot;When you write a long long long long description, R will try to wrap the&amp;quot;, 
  &amp;quot;words automatically.&amp;quot;, &amp;quot;Oh, really?!&amp;quot;)
saveHTML({
  par(mar = c(4, 4, 0.5, 0.5))
  ani.options(interval = 0.5)
  for (i in 1:10) {
    plot(rnorm(50), ylim = c(-3, 3))
    ani.pause()
  }
}, img.name = &amp;quot;norm_plot&amp;quot;, single.opts = &amp;quot;utf8: false&amp;quot;, autoplay = FALSE, 
  interval = 0.5, imgdir = &amp;quot;norm_dir&amp;quot;, htmlfile = &amp;quot;random.html&amp;quot;, 
  ani.height = 400, ani.width = 600, title = &amp;quot;Demo of 50 Normal random numbers&amp;quot;, 
  description = des)



## use the function brownian.motion() in this package; this
## page is created in &#39;index.html&#39; under the current working
## directory
des = c(&amp;quot;Random walk of 10 points on the 2D plane:&amp;quot;, &amp;quot;for each point (x, y),&amp;quot;, 
  &amp;quot;x = x + rnorm(1) and y = y + rnorm(1).&amp;quot;)
saveHTML({
  par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0), tcl = -0.3, 
    cex.axis = 0.8, cex.lab = 0.8, cex.main = 1)
  ani.options(interval = 0.05, nmax = 150)
  brownian.motion(pch = 21, cex = 5, col = &amp;quot;red&amp;quot;, bg = &amp;quot;yellow&amp;quot;)
}, img.name = &amp;quot;brownian_motion_a&amp;quot;, htmlfile = &amp;quot;index.html&amp;quot;, description = des)



## remove the &#39;navigator&#39; (progress bar)
saveHTML({
  par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0), tcl = -0.3, 
    cex.axis = 0.8, cex.lab = 0.8, cex.main = 1)
  ani.options(interval = 0.05, nmax = 150)
  brownian.motion(pch = 21, cex = 5, col = &amp;quot;red&amp;quot;, bg = &amp;quot;yellow&amp;quot;)
}, img.name = &amp;quot;brownian_motion_b&amp;quot;, htmlfile = &amp;quot;index.html&amp;quot;, navigator = FALSE, 
  description = c(&amp;quot;Random walk of 10 points on the 2D plane&amp;quot;, 
    &amp;quot;(without the navigation panel)&amp;quot;))


## use Rweb to create animations
if (interactive()) browseURL(system.file(&amp;quot;misc&amp;quot;, &amp;quot;Rweb&amp;quot;, &amp;quot;demo.html&amp;quot;, 
  package = &amp;quot;animation&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>saveLatex()</title>
      <link>https://yihui.name/animation/example/savelatex/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/savelatex/</guid>
      <description>
        &lt;p&gt;Record animation frames and insert them into a LaTeX document with the
&lt;code&gt;animate&lt;/code&gt; package. Compile the document if an appropriate LaTeX command
is provided.&lt;/p&gt;

&lt;p&gt;This is actually a wrapper to generate a LaTeX document using R. The document
uses the LaTeX package called &lt;code&gt;animate&lt;/code&gt; to insert animations into PDF&amp;rsquo;s.
When we pass an R expression to this function, the expression will be
evaluated and recorded by a grahpics device (typically &lt;code&gt;png&lt;/code&gt; and
&lt;code&gt;pdf&lt;/code&gt;). At last, a LaTeX document will be created and compiled if
an appropriate LaTeX command is provided. And the final PDF output will be
opened with the PDF viewer set in &lt;code&gt;getOption(&#39;pdfviewer&#39;)&lt;/code&gt; if
&lt;code&gt;ani.options(&#39;autobrowse&#39;) == TRUE&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
## brownian motion: note the &#39;loop&#39; option in ani.opts and the careful settings in documentclass

saveLatex({
  par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
      tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8, cex.main = 1)
  brownian.motion(pch = 21, cex = 5, col = &#39;red&#39;, bg = &#39;yellow&#39;,
                  main = &#39;Demonstration of Brownian Motion&#39;)
}, img.name = &#39;BM&#39;, ani.opts = &#39;controls,loop,width=0.95\\textwidth&#39;,
          latex.filename = &#39;brownian_motion.tex&#39;),
          interval = 0.1, nmax = 10,
          ani.dev = &#39;pdf&#39;, ani.type = &#39;pdf&#39;, ani.width = 7, ani.height = 7,
          documentclass = paste(&#39;\\documentclass{article}&#39;,
                                &#39;\\usepackage[papersize={7in,7in},margin=0.3in]{geometry}&#39;, sep = &#39;\n&#39;))

## the PDF graphics output is often too large because it is uncompressed; try the option ani.options(&#39;pdftk&#39;) or ani.options(&#39;qpdf&#39;) to compress the PDF graphics; see ?pdftk or ?qpdf and ?ani.options
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>saveSWF()</title>
      <link>https://yihui.name/animation/example/saveswf/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/saveswf/</guid>
      <description>
        &lt;p&gt;This function opens a graphical device first to generate a sequence of images
based on &lt;code&gt;expr&lt;/code&gt;, then makes use of the commands in SWFTools
(&lt;code&gt;png2swf&lt;/code&gt;, &lt;code&gt;jpeg2swf&lt;/code&gt;, &lt;code&gt;pdf2swf&lt;/code&gt;) to convert these
images to a single Flash animation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
## from png to swf
saveSWF({
  par(mar = c(3, 3, 1, 1.5), mgp = c(1.5, 0.5, 0))
  knn.ani(test = matrix(rnorm(16), ncol = 2), cl.pch = c(16, 
    2))
}, swf.name = &amp;quot;kNN.swf&amp;quot;, interval = 1.5, nmax = 40)

## from pdf (vector plot) to swf; can set the option &#39;pdftk&#39;
## to compress PDF
saveSWF({
  brownian.motion(pch = 21, cex = 5, col = &amp;quot;red&amp;quot;, bg = &amp;quot;yellow&amp;quot;)
}, swf.name = &amp;quot;brownian.swf&amp;quot;, interval = 0.2, nmax = 30, ani.dev = &amp;quot;pdf&amp;quot;, 
  ani.type = &amp;quot;pdf&amp;quot;, ani.height = 6, ani.width = 6)
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>saveVideo()</title>
      <link>https://yihui.name/animation/example/savevideo/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/savevideo/</guid>
      <description>
        &lt;p&gt;This function opens a graphics device to record the images produced in the
code &lt;code&gt;expr&lt;/code&gt;, then uses FFmpeg to convert these images to a video.&lt;/p&gt;

&lt;p&gt;This function uses &lt;code&gt;system&lt;/code&gt; to call FFmpeg to convert the images
to a single video. The command line used in this function is: &lt;code&gt;ffmpeg -y -r &amp;lt;1/interval&amp;gt; -i &amp;lt;img.name&amp;gt;\%d.&amp;lt;ani.type&amp;gt; other.opts video.name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;where &lt;code&gt;interval&lt;/code&gt; comes from &lt;code&gt;ani.options(&#39;interval&#39;)&lt;/code&gt;, and
&lt;code&gt;ani.type&lt;/code&gt; is from &lt;code&gt;ani.options(&#39;ani.type&#39;)&lt;/code&gt;. For more details on
the numerous options of FFmpeg, please see the reference.&lt;/p&gt;

&lt;p&gt;Some linux systems may use the alternate software &amp;lsquo;avconv&amp;rsquo; instead of &amp;lsquo;ffmpeg&amp;rsquo;. The package will attempt to determine which command is present and set &lt;code&gt;ani.options(&#39;ffmpeg&#39;)&lt;/code&gt; to an appropriate default value. This can be overridden by passing in the &lt;code&gt;ffmpeg&lt;/code&gt; argument.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
oopts = if (.Platform$OS.type == &amp;quot;windows&amp;quot;) {
  ani.options(ffmpeg = &amp;quot;D:/Installer/ffmpeg/bin/ffmpeg.exe&amp;quot;)
}
## usually Linux users do not need to worry about the ffmpeg
## path as long as FFmpeg or avconv has been installed

saveVideo({
  par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0), tcl = -0.3, 
    cex.axis = 0.8, cex.lab = 0.8, cex.main = 1)
  ani.options(interval = 0.05, nmax = 300)
  brownian.motion(pch = 21, cex = 5, col = &amp;quot;red&amp;quot;, bg = &amp;quot;yellow&amp;quot;)
}, video.name = &amp;quot;BM.mp4&amp;quot;, other.opts = &amp;quot;-pix_fmt yuv420p -b 300k&amp;quot;)
# higher bitrate, better quality

ani.options(oopts)
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>sim.qqnorm()</title>
      <link>https://yihui.name/animation/example/sim-qqnorm/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/sim-qqnorm/</guid>
      <description>
        &lt;p&gt;This demo shows the possible QQ plots created by random numbers generated
from a Normal distribution so that users can get a rough idea about how QQ
plots really look like.&lt;/p&gt;

&lt;p&gt;When the sample size is small, it is hard to get a correct inference about
the distribution of data from a QQ plot. Even if the sample size is large,
usually there are outliers far away from the straight line. Therefore, don&amp;rsquo;t
overinterpret the QQ plots.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(interval = 0.1, nmax = 100)
par(mar = c(3, 3, 2, 0.5), mgp = c(1.5, 0.5, 0), tcl = -0.3)

sim.qqnorm(n = 20, last.plot = expression(abline(0, 1)))
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/sim-qqnorm/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>vanke1127()</title>
      <link>https://yihui.name/animation/example/vanke1127/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/vanke1127/</guid>
      <description>
        &lt;p&gt;Barplots of the stock prices of Vanke Co. Ltd on 2009/11/27&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
tab.price = table(vanke1127$price)
plot(as.numeric(names(tab.price)), as.numeric(tab.price), type = &amp;quot;h&amp;quot;, 
  xlab = &amp;quot;price&amp;quot;, ylab = &amp;quot;frequency&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ani.options(interval = 0.5, loop = FALSE, title = &amp;quot;Stock price of Vanke&amp;quot;)

price.ani(vanke1127$price, vanke1127$time, span = 15 * 60, lwd = 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/vanke1127/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>vi.lilac.chaser()</title>
      <link>https://yihui.name/animation/example/vi-lilac.chaser/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/example/vi-lilac.chaser/</guid>
      <description>
        &lt;p&gt;Stare at the center cross for a few (say 30) seconds to experience the
phenomena of the illusion.&lt;/p&gt;

&lt;p&gt;Just try it out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(animation)
ani.options(interval = 0.05, nmax = 20)
par(pty = &amp;quot;s&amp;quot;)
vi.lilac.chaser()
&lt;/code&gt;&lt;/pre&gt;

&lt;video controls loop autoplay&gt;&lt;source src=&#34;https://assets.yihui.name/figures/animation/example/vi-lilac-chaser/demo-a.mp4?dl=1&#34; /&gt;&lt;p&gt;plot of chunk demo-a&lt;/p&gt;&lt;/video&gt;

        
      </description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>https://yihui.name/animation/examples/</link>
      <pubDate>Wed, 29 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/examples/</guid>
      <description>
        &lt;p&gt;Below is a list of examples (under construction &lt;i class=&#34;fa fa-spinner fa-pulse fa-fw&#34;&gt;&lt;/i&gt;) for functions in the &lt;strong&gt;animation&lt;/strong&gt; package. To see or contribute other examples, please go to the &lt;a href=&#34;../resources&#34;&gt;resources&lt;/a&gt; page.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Export animations</title>
      <link>https://yihui.name/animation/export/</link>
      <pubDate>Wed, 29 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/export/</guid>
      <description>
        &lt;p&gt;If you want to export animations from R, you may use one of these methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;saveHTML()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;saveGIF()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;saveVideo()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;saveLatex()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;saveSWF()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://yihui.name/animation/resources/</link>
      <pubDate>Wed, 29 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/animation/resources/</guid>
      <description>
        &lt;p&gt;Here we list some additional resources related to the &lt;strong&gt;animation&lt;/strong&gt; package. If you have any links to share with us, please feel free to hit the edit button above on the right to revise this page and send a pull request via Github.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.imagemagick.org&#34;&gt;ImageMagick&lt;/a&gt;: a comprehensive open-source image processing library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.graphicsmagick.org/&#34;&gt;GraphicsMagick&lt;/a&gt;: another image processing system&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ffmpeg.org/&#34;&gt;FFmpeg&lt;/a&gt;: a complete, cross-platform solution to record, convert and stream audio and video&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.swftools.org/&#34;&gt;SWFTools&lt;/a&gt;: a collection of utilities for working with Adobe Flash files (SWF files)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ctan.org/pkg/animate&#34;&gt;&lt;strong&gt;animate&lt;/strong&gt;&lt;/a&gt;: an interface to create portable, JavaScript driven PDF animations from sets of (vector) graphics or rasterized image files or from inline (vector) graphics&lt;/li&gt;
&lt;li&gt;R packages

&lt;ul&gt;
&lt;li&gt;the R package &lt;a href=&#34;https://cran.rstudio.com/package=magick&#34;&gt;&lt;strong&gt;magick&lt;/strong&gt;&lt;/a&gt; (bindings to ImageMagick)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dgrtwo/gganimate&#34;&gt;&lt;strong&gt;gganimate&lt;/strong&gt;&lt;/a&gt;: Create easy animations with &lt;strong&gt;ggplot2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Frequently Asked Questions</title>
      <link>https://yihui.name/knitr/faq/</link>
      <pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/faq/</guid>
      <description>
        &lt;p&gt;This FAQ is compiled from the &lt;a href=&#34;https://github.com/yihui/knitr/issues&#34;&gt;issues&lt;/a&gt; and messages I received from blog posts and emails, etc. Personally I&amp;rsquo;m not big fan of FAQ&amp;rsquo;s, and I believe sometimes FAQ&amp;rsquo;s are nearly bugs. Software package authors should think why users ask some questions so frequently (it is unlikely that users are always stupid). At least I&amp;rsquo;m not patient enough to read, say, 128 FAQ&amp;rsquo;s one by one, so I won&amp;rsquo;t let you do it, either.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;knitr&lt;/strong&gt; does not work&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Please first update all your R packages (use &lt;code&gt;update.packages()&lt;/code&gt;) and probably R itself (&lt;a href=&#34;https://cran.rstudio.com&#34;&gt;what is the current R version?&lt;/a&gt;), then see if it works; if not, please file an &lt;a href=&#34;https://github.com/yihui/knitr/issues&#34;&gt;issue&lt;/a&gt; to me with a minimal reproducible example and the output of &lt;code&gt;library(knitr); sessionInfo()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;What is the best place to ask questions when the package website is not helpful?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Depending what you want to ask, you may use these tools (I keep track of the first two more frequently):

&lt;ul&gt;
&lt;li&gt;(Recommended) &lt;a href=&#34;http://stackoverflow.com/questions/tagged/knitr&#34;&gt;StackOverflow&lt;/a&gt;: general questions (more experts and quicker answers there). Don&amp;rsquo;t forget to use both the tags &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;knitr&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yihui/knitr/issues&#34;&gt;Github issues&lt;/a&gt;: bug reports and feature requests only.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/group/knitr&#34;&gt;knitr mailing list&lt;/a&gt; or &lt;a href=&#34;http://www.r-project.org/mail.html&#34;&gt;R-help&lt;/a&gt; list: general questions and feedback via email in public.&lt;/li&gt;
&lt;li&gt;Private emails &lt;a href=&#34;https://yihui.name/en/2017/08/so-gh-email/&#34;&gt;are not recommended&lt;/a&gt; unless there are really private issues.&lt;/li&gt;
&lt;li&gt;Twitter (&lt;a href=&#34;http://twitter.com/xieyihui&#34;&gt;@xieyihui&lt;/a&gt;) if you really believe it is a simple question.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;What is the best editor for writing &lt;strong&gt;knitr&lt;/strong&gt; source documents?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For beginners, perhaps &lt;a href=&#34;https://www.rstudio.com&#34;&gt;RStudio&lt;/a&gt;; &lt;strong&gt;knitr&lt;/strong&gt; is also supported in &lt;a href=&#34;https://yihui.name/knitr/demo/lyx/&#34;&gt;LyX&lt;/a&gt;, &lt;a href=&#34;http://ess.r-project.org/&#34;&gt;Emacs/ESS&lt;/a&gt;, WinEdt, Tinn-R and a variety of &lt;a href=&#34;https://yihui.name/knitr/demo/editors/&#34;&gt;editors&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Where are those prompt characters &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt;? I feel uncomfortable reading R output without them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They are removed by default, because &lt;a href=&#34;https://yihui.name/en/2013/01/code-pollution-with-command-prompts/&#34;&gt;I believe they make no sense&lt;/a&gt;. This is the reason why I dislike books on R which used &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt;; they twist my mind and make my eyes bleed when I read the R code in the books. For those who really want to read R code like &lt;code&gt;&amp;gt; 1+1&lt;/code&gt; instead of &lt;code&gt;1 + 1&lt;/code&gt;, you have the &lt;a href=&#34;https://yihui.name/knitr/options/&#34;&gt;chunk option&lt;/a&gt; &lt;code&gt;prompt&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;What is the working directory? Can I change my working directory in my code chunks?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You&amp;rsquo;d better not do this. Your working directory is always &lt;code&gt;getwd()&lt;/code&gt; (all output files will be written here), but the code chunks are evaluated under the directory where your input document comes from. Changing working directories while running R code is a bad practice in general. See &lt;a href=&#34;https://github.com/yihui/knitr/issues/38&#34;&gt;#38&lt;/a&gt; for a discussion. You should also try to avoid absolute directories whenever possible (use relative directories instead), because it makes things less reproducible.  If you do still decide to use &lt;code&gt;setwd&lt;/code&gt; in a code chunk, beware that the new working directory will only apply to that specific code chunk, and any following code chunks will revert back to use the original working directory.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The gray (shading) box is too narrow for my output.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No, it is not because the box is too narrow (the box uses the current line width); it is because your output is too wide. Use a smaller &lt;code&gt;width&lt;/code&gt; option to avoid text output exceeding the page margin, e.g. &lt;code&gt;options(width = 60)&lt;/code&gt; (see &lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/038-output-width.Rnw&#34;&gt;example 038&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;How can I write a literal / verbatim code chunk? i.e., write a code chunk that is not parsed (which can be useful for tutorials).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You need to destroy the chunk header, e.g., add an empty string before or after the chunk header like &lt;code&gt;```{r}`r &#39;&#39;`&lt;/code&gt; (&lt;a href=&#34;https://github.com/yihui/knitr/issues/443&#34;&gt;#443&lt;/a&gt;), or add a &lt;a href=&#34;http://en.wikipedia.org/wiki/Zero-width_space&#34;&gt;zero-width space&lt;/a&gt; into the chunk header; see &lt;a href=&#34;https://github.com/yihui/knitr-examples&#34;&gt;example 065&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```{r, eval=TRUE}`r &#39;&#39;`
1 + 1
```
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For inline R code, you may use the function &lt;code&gt;knitr::inline_expr()&lt;/code&gt; (available in knitr &amp;gt;= v1.8). If you are writing an R Markdown document, you can use a trick: break the line &lt;em&gt;right after&lt;/em&gt; &lt;code&gt;`r&lt;/code&gt; (no spaces after it), and wrap the whole inline expression in a pair of double backticks, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This will show a verbatim inline R expression `` `r
1+1` `` in the output.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href=&#34;https://yihui.name/en/2017/11/knitr-verbatim-code-chunk/&#34;&gt;this post&lt;/a&gt; for explanations if you are curious.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;What can I do for you?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can donate to me if you want (&lt;a href=&#34;https://paypal.me/YihuiXie&#34;&gt;paypal&lt;/a&gt;), &lt;a href=&#34;https://twitter.com/xieyihui&#34;&gt;tweet&lt;/a&gt; funny GIF animations to me, or fork the &lt;strong&gt;knitr&lt;/strong&gt; repository on Github and contribute code.&lt;/li&gt;
&lt;li&gt;Cite the package and the &lt;a href=&#34;http://amzn.com/1498716962&#34;&gt;knitr book&lt;/a&gt;; see &lt;code&gt;citation(&#39;knitr&#39;)&lt;/code&gt; in R.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;How can I submit a documentation fix or other minor changes?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To fix anything in the R package: navigate to the file within the &lt;a href=&#34;https://github.com/yihui/knitr&#34;&gt;repository&lt;/a&gt;; click the Edit button on the top-right toolbar; make the necessary changes; add a descriptive commit summary, click on &lt;strong&gt;Propose file change&lt;/strong&gt;, and submit the pull request.&lt;/li&gt;
&lt;li&gt;To fix anything or propose changes on any page of this website, please click on the menu &lt;code&gt;Edit this page&lt;/code&gt; on the left of the page, and follow the same steps on Github.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

        
      </description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>https://yihui.name/knitr/demos/</link>
      <pubDate>Fri, 03 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demos/</guid>
      <description>
        &lt;p&gt;Note there is a larger collection of examples in the &lt;a href=&#34;https://github.com/yihui/knitr-examples&#34;&gt;knitr-examples&lt;/a&gt; repository on Github. This page is more for the documentation purpose. You can take a look at the &lt;a href=&#34;../demo/showcase&#34;&gt;collection of knitr applications&lt;/a&gt; by other users as well.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Hooks</title>
      <link>https://yihui.name/knitr/hooks/</link>
      <pubDate>Fri, 03 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/hooks/</guid>
      <description>
        

&lt;p&gt;The object &lt;code&gt;knit_hooks&lt;/code&gt; in the &lt;strong&gt;knitr&lt;/strong&gt; package is used to set hooks; the basic usage is &lt;code&gt;knit_hooks$set(param = FUN)&lt;/code&gt; (see &lt;a href=&#34;../objects&#34;&gt;objects&lt;/a&gt; for details) where &lt;code&gt;param&lt;/code&gt; is the name of a chunk option (can be arbitrary), and &lt;code&gt;FUN&lt;/code&gt; is a function. There are two types of hooks: chunk hooks and output hooks. Hook functions may have different forms, depending what they are designed to do.&lt;/p&gt;

&lt;h1 id=&#34;chunk-hooks&#34;&gt;Chunk hooks&lt;/h1&gt;

&lt;p&gt;Chunk hooks are functions to be called before or after a code chunk when the chunk option is not &lt;code&gt;NULL&lt;/code&gt; (it basically means as long as you set a option, the hook will be run), and they should be defined with three arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;foo_hook = function(before, options, envir) {
    if (before) {
        ## code to be run before a chunk
    } else {
        ## code to be run after a chunk
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When &lt;strong&gt;knitr&lt;/strong&gt; is processing the document, &lt;code&gt;foo_hook(before = TRUE)&lt;/code&gt; will be called before a code chunk is executed (unless the chunk is cached or set not to be evaluated), and &lt;code&gt;foo_hook(before = FALSE)&lt;/code&gt; is called after a chunk; the argument &lt;code&gt;options&lt;/code&gt; is a list of &lt;a href=&#34;options&#34;&gt;options&lt;/a&gt; in the current chunk (e.g. &lt;code&gt;options$label&lt;/code&gt; is the label of the current chunk), and &lt;code&gt;envir&lt;/code&gt; is the environment in which the code chunk is evaluated. The latter two arguments can be optionally used in a chunk hook. For example, if we set a hook for the &lt;code&gt;small.mar&lt;/code&gt; option as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;knit_hooks$set(small.mar = function(before, options, envir) {
    if (before) par(mar = c(4, 4, .1, .1))  # smaller margin on top and right
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then this function will be called for a chunk like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;% small.mar does not have to be TRUE, it can be any non-null value
&amp;lt;&amp;lt;myplot, small.mar=TRUE&amp;gt;&amp;gt;=
hist(rnorm(100), main = &#39;&#39;)  # no main title
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;strong&gt;knitr&lt;/strong&gt;, hooks can also be used to insert texts into the output. To do this, the hook function must return a character result. This feature can greatly extend the power of hooks. Take the &lt;strong&gt;rgl&lt;/strong&gt; package for example: if we want to insert 3D snapshots produced in &lt;strong&gt;rgl&lt;/strong&gt; into our LaTeX document, we may consider this hook function (see the more sophisticated &lt;code&gt;hook_rgl()&lt;/code&gt; in this package):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;knit_hooks$set(rgl = function(before, options, envir) {
  if (!before) {
    ## after a chunk has been evaluated
    if (rgl.cur() == 0) return()  # no active device
    name = paste(options$fig.path, options$label, sep = &#39;&#39;)
    rgl.snapshot(paste(name, &#39;.png&#39;, sep = &#39;&#39;), fmt = &#39;png&#39;)
    return(paste(&#39;\\includegraphics{&#39;, name, &#39;}\n&#39;, sep = &#39;&#39;))
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the code chunk may look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;&amp;lt;fancy-rgl, rgl=TRUE&amp;gt;&amp;gt;=
library(rgl)  # example taken from ?plot3d
open3d()
x = sort(rnorm(1000)); y = rnorm(1000); z = rnorm(1000) + atan2(x,y)
plot3d(x, y, z, col = rainbow(1000))
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the LaTeX output, we will see &lt;code&gt;\includegraphics{fancy-rgl}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To sum up,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the hook can be set in &lt;code&gt;knit_hooks&lt;/code&gt; by &lt;code&gt;knit_hooks$set(foo = FUN)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;the chunk option &lt;code&gt;foo&lt;/code&gt; should take a non-&lt;code&gt;NULL&lt;/code&gt; value in this chunk for the hook function to run;&lt;/li&gt;
&lt;li&gt;a hook can be run before and/or after a chunk;&lt;/li&gt;
&lt;li&gt;character results returned by hooks will be written into the output without modifications;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;See &lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/045-chunk-hook.md&#34;&gt;045-chunk-hook.md&lt;/a&gt; (&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/045-chunk-hook.Rmd&#34;&gt;source&lt;/a&gt;) for further examples.&lt;/p&gt;

&lt;h1 id=&#34;output-hooks&#34;&gt;Output hooks&lt;/h1&gt;

&lt;p&gt;Output hooks are used to customize and polish the &lt;em&gt;raw&lt;/em&gt; output from chunks. There are 8 output hooks in all to deal with different types of output:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt;: the source code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output&lt;/code&gt;: ordinary R output (i.e., what would have been printed in an R terminal) except warnings, messages and errors&lt;/li&gt;
&lt;li&gt;&lt;code&gt;warning&lt;/code&gt;: warnings from &lt;code&gt;warning()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message&lt;/code&gt;: messages from &lt;code&gt;message()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error&lt;/code&gt;: errors from &lt;code&gt;stop()&lt;/code&gt; (applies to errors in both code chunks and inline R code)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plot&lt;/code&gt;: graphics output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt;: output of inline R code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chunk&lt;/code&gt;: all the output of a chunk (i.e., those produced by the previous hooks)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document&lt;/code&gt;: the output of the whole document (is &lt;code&gt;base::identity&lt;/code&gt; by default)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these hooks should be of the form &lt;code&gt;function(x, options)&lt;/code&gt; (except the &lt;code&gt;inline&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt; hooks which only have one argument &lt;code&gt;x&lt;/code&gt;), where &lt;code&gt;x&lt;/code&gt; is the character string of the output, and &lt;code&gt;options&lt;/code&gt; is a list of current chunk options. Unlike chunk hooks which are empty by default, output hooks all come with default values.&lt;/p&gt;

&lt;p&gt;This package tried hard to set reasonable default output hooks for different parts of output and to accommodate different output formats such as LaTeX, HTML and even Jekyll. A series of functions of the form &lt;code&gt;render_xxx()&lt;/code&gt; are provided to set built-in output hooks for different output formats, e.g. &lt;code&gt;render_latex()&lt;/code&gt; and &lt;code&gt;render_html()&lt;/code&gt;, etc. Details for these formats:&lt;/p&gt;

&lt;h2 id=&#34;latex-render-latex&#34;&gt;LaTeX: render_latex()&lt;/h2&gt;

&lt;p&gt;If the output file type is LaTeX, default hooks will put most output in the &lt;code&gt;verbatim&lt;/code&gt; environment, and numeric &lt;code&gt;inline&lt;/code&gt; output will be formatted in scientific notation (see &lt;a href=&#34;../demo/output/&#34;&gt;output demo&lt;/a&gt; for details); &lt;code&gt;plot&lt;/code&gt; and &lt;code&gt;chunk&lt;/code&gt; hooks are more complicated:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the default &lt;code&gt;plot&lt;/code&gt; hook takes many factors into account to give a reasonable output, for example, if the graphics device is &lt;code&gt;tikz&lt;/code&gt;, the command &lt;code&gt;\input{}&lt;/code&gt; will be used, otherwise it uses the normal &lt;code&gt;\includegraphics{}&lt;/code&gt;; depending on the &lt;code&gt;out.width&lt;/code&gt; and &lt;code&gt;out.height&lt;/code&gt; options, the hook will reset the size of the plot (e.g. &lt;code&gt;\includegraphics[width=.8\textwidth]{file}&lt;/code&gt;); if there are multiple plots per chunk, we can set the option &lt;code&gt;fig.show=&#39;hold&#39;&lt;/code&gt; with an appropriate width so more than one plot can be arranged in a row (e.g., &lt;code&gt;.45\textwidth&lt;/code&gt; means 2 plots per row); note this is not true for tikz graphics because they are inserted by &lt;code&gt;\input{}&lt;/code&gt;, however, the chunk option &lt;code&gt;resize.width&lt;/code&gt; and &lt;code&gt;resize.height&lt;/code&gt; can be used to arrange multiple tikz plots in a row (via &lt;code&gt;\resizebox{resize.width}{resize.height}{file.tikz}&lt;/code&gt;; if one option is &lt;code&gt;NULL&lt;/code&gt;, it will be replaced by &lt;code&gt;!&lt;/code&gt;; see LaTeX package &lt;code&gt;graphicx&lt;/code&gt; for details); this hook function gives the user full power of using graphics in automatic report generation &amp;ndash; not only multiple plots per chunk and setting sizes of plots become possible, but also we can even put base graphics and grid graphics (e.g. &lt;strong&gt;ggplot2&lt;/strong&gt;) or multiple grid plots side by side (think how hard it is, if not possible, for one to put two such plots in one window in R); there are four values for the &lt;code&gt;fig.align&lt;/code&gt; option to decide how to align plots (&lt;code&gt;default&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;center&lt;/code&gt;), e.g., it is easy to center the plots (set chunk option &lt;code&gt;fig.align=&#39;center&#39;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;the default &lt;code&gt;chunk&lt;/code&gt; hook is mainly used to decorate chunks; if the LaTeX package &lt;code&gt;framed&lt;/code&gt; is available in the user&amp;rsquo;s TeX software package (TeXLive or MikTeX or other packages), the chunk hook will put the whole output in the &lt;code&gt;kframe&lt;/code&gt; environment with customizable background colors (default is very light gray), which makes the chunks cognitively better (they stands out from other normal texts yet do not have a too strong visual impact); in the end, all the output is wrapped in a &lt;code&gt;knitrout&lt;/code&gt; environment, and the user can redefine this environment in LaTeX&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sweave-render-sweave&#34;&gt;Sweave: render_sweave()&lt;/h2&gt;

&lt;p&gt;Put source code in the &lt;code&gt;Sinput&lt;/code&gt; environment, output in the &lt;code&gt;Soutput&lt;/code&gt; environment and the whole chunk in the &lt;code&gt;Schunk&lt;/code&gt; environment. The style file &lt;code&gt;Sweave.sty&lt;/code&gt; is required to use this theme, or at least these three environments have to be defined.&lt;/p&gt;

&lt;h2 id=&#34;listings-render-listings&#34;&gt;Listings: render_listings()&lt;/h2&gt;

&lt;p&gt;Similar to Sweave, and &lt;a href=&#34;https://github.com/yihui/knitr/blob/master/inst/misc/Sweavel.sty&#34;&gt;&lt;code&gt;Sweavel.sty&lt;/code&gt;&lt;/a&gt; is used instead.&lt;/p&gt;

&lt;h2 id=&#34;html-render-html&#34;&gt;HTML: render_html()&lt;/h2&gt;

&lt;p&gt;To write output into an HTML file, the hooks will be automatically adjusted. Basically the output from chunks is put in &lt;code&gt;div&lt;/code&gt; layers with classes, e.g. source code is in &lt;code&gt;&amp;lt;div class=&amp;quot;knitr source&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;; the whole chunk output is in &lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt;; inline output is in &lt;code&gt;&amp;lt;code class=&amp;quot;knitr inline&amp;quot;&amp;gt;&amp;lt;/code&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;markdown-render-markdown&#34;&gt;Markdown: render_markdown()&lt;/h2&gt;

&lt;p&gt;The source code and output will be indented by 4 spaces. For GitHub Flavored Markdown, the source code is put in between &lt;code&gt;```r&lt;/code&gt; and &lt;code&gt;```&lt;/code&gt;; output is between &lt;code&gt;```&lt;/code&gt; and &lt;code&gt;```&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;jekyll-render-jekyll&#34;&gt;Jekyll: render_jekyll()&lt;/h2&gt;

&lt;p&gt;I need to build this site so I also set up some hooks especially for Jekyll, and they are actually quite simple: R source code is put in a highlight environment with the language set to &lt;code&gt;r&lt;/code&gt;, and the rest of output belongs to the highlight environment with the &lt;code&gt;text&lt;/code&gt; language (nearly no highlighting at all). Currently plots are written out according to the syntax of Markdown.&lt;/p&gt;

&lt;h2 id=&#34;restructuredtext-render-rst&#34;&gt;reStructuredText: render_rst()&lt;/h2&gt;

&lt;p&gt;Code is put after &lt;code&gt;::&lt;/code&gt; and indented by 4 spaces, or in the &lt;code&gt;sourcecode&lt;/code&gt; directive.&lt;/p&gt;

&lt;h1 id=&#34;option-hooks&#34;&gt;Option hooks&lt;/h1&gt;

&lt;p&gt;Sometimes you may want to change certain chunk options according to the values of other chunk options, and you may use the object &lt;code&gt;opts_hooks&lt;/code&gt; to set up an option hook to do it. An option hook is executed when a corresponding chunk option is not &lt;code&gt;NULL&lt;/code&gt;. For example, we can tweak the &lt;code&gt;figure.width&lt;/code&gt; option so that it is always no smaller than &lt;code&gt;fig.height&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;opts_hooks$set(fig.width = function(options) {
  if (options$fig.width &amp;lt; options$fig.height) {
    options$fig.width = options$fig.height
  }
  options
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because &lt;code&gt;fig.width&lt;/code&gt; will never be &lt;code&gt;NULL&lt;/code&gt;, this hook function is always executed before a code chunk to update its chunk options. For the code chunk below, the actual value of &lt;code&gt;fig.width&lt;/code&gt; will be 6 instead of the initial 5 if the above option hook has been set up:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;```{r fig.width = 5, fig.height = 6}
plot(1:10)
```
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>Objects</title>
      <link>https://yihui.name/knitr/objects/</link>
      <pubDate>Fri, 03 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/objects/</guid>
      <description>
        &lt;p&gt;The &lt;strong&gt;knitr&lt;/strong&gt; package uses a special object to control options and settings (denoted as &lt;code&gt;obj&lt;/code&gt; below); it has the following methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;obj$get(name)&lt;/code&gt;: returns an option named &lt;code&gt;name&lt;/code&gt; or a list of several options if &lt;code&gt;name&lt;/code&gt; is a character vector of length greater than 1, and it returns all the options if &lt;code&gt;name&lt;/code&gt; not provided&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obj$set(...)&lt;/code&gt;: permanently changes options; the argument &lt;code&gt;...&lt;/code&gt; can be of the form &lt;code&gt;tag = value&lt;/code&gt; or a list of options &lt;code&gt;list(opt1 = value1, opt2 = value2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obj$merge(values)&lt;/code&gt;: temporarily merges a list of new options into the current list and returns the merged list (original list not changed)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obj$restore()&lt;/code&gt;: restores the object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These objects are visible to users in &lt;strong&gt;knitr&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../options/#chunk_options&#34;&gt;&lt;code&gt;opts_chunk&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;opts_current&lt;/code&gt;: manages &lt;strong&gt;opt&lt;/strong&gt;ions for code &lt;strong&gt;chunk&lt;/strong&gt;s&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../options/#package_options&#34;&gt;&lt;code&gt;opts_knit&lt;/code&gt;&lt;/a&gt;: manages &lt;strong&gt;opt&lt;/strong&gt;ions for the &lt;strong&gt;knit&lt;/strong&gt;r package&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../hooks&#34;&gt;&lt;code&gt;knit_hooks&lt;/code&gt;&lt;/a&gt;: manages hook functions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../patterns&#34;&gt;&lt;code&gt;knit_patterns&lt;/code&gt;&lt;/a&gt;: manages regular expressions to extract R code from the input document&lt;/li&gt;
&lt;li&gt;&lt;code&gt;knit_engines&lt;/code&gt;: functions to deal with other languages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Except &lt;code&gt;knit_patterns&lt;/code&gt;, all other objects are initialized with default values, and &lt;code&gt;knit_patterns&lt;/code&gt; will be automatically determined according to the type of input document if not provided. The &lt;code&gt;knit_hooks&lt;/code&gt; object is supposed to be used most frequently, and the other three are usually not to be used directly. For example, &lt;code&gt;opts_chunk&lt;/code&gt; is usually set in the input document rather than using the command line directly.&lt;/p&gt;

&lt;p&gt;Knitr&amp;rsquo;s settings &lt;em&gt;must&lt;/em&gt; be set in a chunk before any chunks which rely
on those settings to be active. It is recommended to create a &lt;strong&gt;knit&lt;/strong&gt;
configuration chunk as the first chunk in a script with &lt;code&gt;cache =
FALSE&lt;/code&gt; and &lt;code&gt;include = FALSE&lt;/code&gt; options set. This chunk &lt;em&gt;must not&lt;/em&gt; contain
any commands which expect the settings in the configuration chunk to
be in effect at the time of execution. The configuration chunk could
look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;&amp;lt;setup, cache=FALSE, include=FALSE&amp;gt;&amp;gt;=
library(knitr)
opts_knit$set(upload.fun = imgur_upload, self.contained = FALSE,
              root.dir = &#39;~/R/project&#39;)
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On a technical note, these objects are similar to closures &amp;ndash; they
consist of a list of functions returned by a function. For details,
see the unexported function &lt;code&gt;knitr:::new_defaults&lt;/code&gt;. The chunk options
are also managed by closures.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Options</title>
      <link>https://yihui.name/knitr/options/</link>
      <pubDate>Fri, 03 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/options/</guid>
      <description>
        

&lt;p&gt;The &lt;strong&gt;knitr&lt;/strong&gt; package shares most options with Sweave, but some were
dropped or changed, and some new options were added. The default values are in
the parentheses below. Note that the chunk label for each chunk is assumed
to be unique, i.e., no two chunks should share the same label. This is especially
important for cache and plot filenames. Chunks without labels will be
assigned labels like &lt;code&gt;unnamed-chunk-i&lt;/code&gt; where &lt;code&gt;i&lt;/code&gt; is an incremental number.&lt;/p&gt;

&lt;h1 id=&#34;chunk-options&#34;&gt;Chunk Options&lt;/h1&gt;

&lt;p&gt;Take Rnw files as an example: usually we write chunk options in the form
&lt;code&gt;tag=value&lt;/code&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;```{r, mychunk, cache=TRUE, eval=FALSE, dpi=100}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And &lt;code&gt;opts_chunk$set()&lt;/code&gt; can change the default global options in a document
(e.g. put this in a code chunk: &lt;code&gt;knitr::opts_chunk$set(comment=NA, fig.width=6,
fig.height=6)&lt;/code&gt;). A few special notes on the options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Chunk options must be written in one line; no line breaks are allowed
inside chunk options;&lt;/li&gt;
&lt;li&gt;Avoid spaces  and periods &lt;code&gt;.&lt;/code&gt; in chunk labels and directory names; if
your output is a TeX document, these characters can cause troubles (in
general it is recommended to use alphabetic characters with words
separated by &lt;code&gt;-&lt;/code&gt; and avoid other characters), e.g. &lt;code&gt;setup-options&lt;/code&gt;
is a good label, whereas &lt;code&gt;setup.options&lt;/code&gt; and &lt;code&gt;chunk 1&lt;/code&gt; are bad;
&lt;code&gt;fig.path=&#39;figures/mcmc-&#39;&lt;/code&gt; is a good prefix for figure output, and &lt;code&gt;fig.path=&#39;markov chain/monte carlo&#39;&lt;/code&gt; is bad;
non-alphanumeric characters except &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; in figure filenames will be
replaced with &lt;code&gt;_&lt;/code&gt; automatically;&lt;/li&gt;
&lt;li&gt;All option values must be &lt;em&gt;valid R expressions&lt;/em&gt; just like how we write
function arguments;

&lt;ul&gt;
&lt;li&gt;for example, options that take &lt;em&gt;character&lt;/em&gt; values must be quoted as you
do in R (e.g. should write &lt;code&gt;fig.path=&amp;quot;abc&amp;quot;&lt;/code&gt; instead of &lt;code&gt;fig.path=abc&lt;/code&gt;,
and &lt;code&gt;out.width=&#39;\\textwidth&#39;&lt;/code&gt; instead of &lt;code&gt;out.width=\textwidth&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;in theory, the chunk label should be quoted as well, but the sake of
convenience it will be automatically quoted if you did not quote it
(e.g. &lt;code&gt;```{r, 2a}&lt;/code&gt; will become &lt;code&gt;```{r, &#39;2a&#39;}&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;for logical options, &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;FALSE&lt;/code&gt; are OK, and &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; will
not work as you might have expected because &lt;code&gt;true&lt;/code&gt; is not &lt;code&gt;TRUE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;you can write arbitrarily complicated expressions as you want as long as
they are legitimate R code&lt;/li&gt;
&lt;li&gt;Sweave users please read the &lt;a href=&#34;../demo/sweave/&#34;&gt;transition page&lt;/a&gt;
carefully because the syntax is different&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below is a list of chunk options in &lt;strong&gt;knitr&lt;/strong&gt;. Note the options &lt;code&gt;background&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; only apply to &lt;code&gt;.Rnw&lt;/code&gt; documents.&lt;/p&gt;

&lt;h2 id=&#34;code-evaluation&#34;&gt;Code Evaluation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eval&lt;/code&gt;: (&lt;code&gt;TRUE&lt;/code&gt;; logical) whether to evaluate the code chunk; it can also
be a numeric vector to select which R expression(s) to evaluate, e.g.
&lt;code&gt;eval=c(1, 3, 4)&lt;/code&gt; or &lt;code&gt;eval=-(4:5)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;text-results&#34;&gt;Text Results&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;echo&lt;/code&gt;: (&lt;code&gt;TRUE&lt;/code&gt;; logical or numeric) whether to include R source code in
the output file; besides &lt;code&gt;TRUE&lt;/code&gt;/&lt;code&gt;FALSE&lt;/code&gt; which completely turns on/off the
source code, we can also use a numeric vector to select which R
expression(s) to echo in a chunk, e.g. &lt;code&gt;echo=2:3&lt;/code&gt; means only echo the 2nd
and 3rd expressions, and &lt;code&gt;echo=-4&lt;/code&gt; means to exclude the 4th expression&lt;/li&gt;
&lt;li&gt;&lt;code&gt;results&lt;/code&gt;: (&lt;code&gt;&#39;markup&#39;&lt;/code&gt;; character) takes these possible values

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;markup&lt;/code&gt;: mark up the results using the output hook, e.g. put results in
a special LaTeX environment&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asis&lt;/code&gt;: output as-is, i.e., write raw results from R into the output
document&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hold&lt;/code&gt;: hold all the output pieces and push them to the end of a chunk&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hide&lt;/code&gt; (or &lt;code&gt;FALSE&lt;/code&gt;): hide results; this option only applies to normal R output (not
warnings, messages or errors)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collapse&lt;/code&gt;: (&lt;code&gt;FALSE&lt;/code&gt;; logical; applies to Markdown output only) whether
to, if possible, collapse all the source and output blocks from one code
chunk into a single block (by default, they are written to separate
&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt; blocks)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;warning&lt;/code&gt;: (&lt;code&gt;TRUE&lt;/code&gt;; logical) whether to preserve warnings (produced by
&lt;code&gt;warning()&lt;/code&gt;) in the output like we run R code in a terminal (if &lt;code&gt;FALSE&lt;/code&gt;,
all warnings will be printed in the console instead of the output
document); it can also take numeric values as indices to select a subset
of warnings to include in the output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error&lt;/code&gt;: (&lt;code&gt;TRUE&lt;/code&gt;; logical) whether to preserve errors (from &lt;code&gt;stop()&lt;/code&gt;); by
default, the evaluation will not stop even in case of errors!! if we want
R to stop on errors, we need to set this option to &lt;code&gt;FALSE&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;when the chunk option &lt;code&gt;include = FALSE&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt; &lt;strong&gt;knitr&lt;/strong&gt; will stop on
error, because it is easy to overlook potential errors in this case&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message&lt;/code&gt;: (&lt;code&gt;TRUE&lt;/code&gt;; logical) whether to preserve messages emitted by
&lt;code&gt;message()&lt;/code&gt; (similar to &lt;code&gt;warning&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split&lt;/code&gt;: (&lt;code&gt;FALSE&lt;/code&gt;; logical) whether to split the output from R into separate
files and include them into LaTeX by &lt;code&gt;\input{}&lt;/code&gt; or HTML by
&lt;code&gt;&amp;lt;iframe&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;; this option only works for &lt;code&gt;.Rnw&lt;/code&gt;, &lt;code&gt;.Rtex&lt;/code&gt;, and &lt;code&gt;.Rhtml&lt;/code&gt;
documents (it does not work for R Markdown)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include&lt;/code&gt;: (&lt;code&gt;TRUE&lt;/code&gt;; logical) whether to include the chunk output in the final
output document; if &lt;code&gt;include=FALSE&lt;/code&gt;, nothing will be written into the
output document, but the code is still evaluated and plot files are
generated if there are any plots in the chunk, so you can manually insert
figures; note this is the only chunk option that is not cached, i.e.,
changing it will not invalidate the cache&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strip.white&lt;/code&gt;: (&lt;code&gt;TRUE&lt;/code&gt;; logical) whether to remove the white lines in the
beginning or end of a source chunk in the output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;render&lt;/code&gt;: (&lt;code&gt;knitr::knit_print&lt;/code&gt;; &lt;code&gt;function(x, options, ...)&lt;/code&gt;)
the function which formats the result of the chunk for the final output
format. The function is given the chunk result as first argument and
the list of chunk options as a named argument &lt;code&gt;options&lt;/code&gt;. If the function
contains further arguments which match names of chunk options, they are
filled with the respective values. The function is expected to return
one string which is then rendered appropriately for the current output
format. For more information, invoke the help about custom chunk
rendering: Invoke in R: &lt;code&gt;vignette(&#39;knit_print&#39;, package = &#39;knitr&#39;)&lt;/code&gt;
and &lt;code&gt;?knitr::knit_print&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class.output&lt;/code&gt;: (NULL; character) useful for HTML output, appends classes that
can be used in conjunction with css, so you can apply custom formatting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;code-decoration&#34;&gt;Code Decoration&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tidy&lt;/code&gt;: (&lt;code&gt;FALSE&lt;/code&gt;) whether to reformat the R code; other possible values are:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TRUE&lt;/code&gt; (equivalent to &lt;code&gt;&#39;formatR&#39;&lt;/code&gt;): use &lt;code&gt;formatR::tidy_source()&lt;/code&gt; to reformat the code;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;styler&#39;&lt;/code&gt;: use &lt;code&gt;styler::style_text()&lt;/code&gt; to reformat the code;&lt;/li&gt;
&lt;li&gt;a custom function of the form &lt;code&gt;function(code, ...) {}&lt;/code&gt; to return the reformatted code;&lt;/li&gt;
&lt;li&gt;if reformatting failed, the original R code will not be changed (with a warning)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tidy.opts&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;; list) a list of options to be passed to the function determined by the &lt;code&gt;tidy&lt;/code&gt; option, e.g., &lt;code&gt;tidy.opts = list(blank = FALSE, width.cutoff = 60)&lt;/code&gt; for &lt;code&gt;tidy = &#39;formatR&#39;&lt;/code&gt; to remove blank lines and set the approximate line width to be 60&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prompt&lt;/code&gt;: (&lt;code&gt;FALSE&lt;/code&gt;; logical) whether to add the prompt characters in the R code (see &lt;code&gt;prompt&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; in &lt;code&gt;?base::options&lt;/code&gt;; note that adding prompts can make it difficult for readers to copy R code from the output, so &lt;code&gt;prompt=FALSE&lt;/code&gt; may be a better choice

&lt;ul&gt;
&lt;li&gt;this option may not work well when the chunk option &lt;code&gt;engine&lt;/code&gt; is not &lt;code&gt;R&lt;/code&gt; (&lt;a href=&#34;https://github.com/yihui/knitr/issues/1274&#34;&gt;#1274&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;comment&lt;/code&gt;: (&lt;code&gt;&#39;##&#39;&lt;/code&gt;; character) the prefix to be put before source code output; default is to comment out the output by &lt;code&gt;##&lt;/code&gt;, which is good for readers to copy R source code since output is masked in comments (set &lt;code&gt;comment=NA&lt;/code&gt; to disable this feature)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;highlight&lt;/code&gt;: (&lt;code&gt;TRUE&lt;/code&gt;; logical) whether to highlight the source code (it is &lt;code&gt;FALSE&lt;/code&gt; by default if the output is Sweave or listings)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt;: (&lt;code&gt;&#39;normalsize&#39;&lt;/code&gt;; character) font size for the default LaTeX output (see &lt;code&gt;?highlight&lt;/code&gt; in the &lt;strong&gt;highlight&lt;/strong&gt; package for a list of possible values)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background&lt;/code&gt;: (&lt;code&gt;&#39;#F7F7F7&#39;&lt;/code&gt;; character or numeric) background color of chunks in LaTeX output (passed to the LaTeX package &lt;strong&gt;framed&lt;/strong&gt;); the color model is &lt;code&gt;rgb&lt;/code&gt;; it can be either a numeric vector of length 3, with each element between 0 and 1 to denote red, green and blue, or any built-in color in R like &lt;code&gt;red&lt;/code&gt; or &lt;code&gt;springgreen3&lt;/code&gt; (see &lt;code&gt;colors()&lt;/code&gt; for a full list), or a hex string like &lt;code&gt;#FFFF00&lt;/code&gt;, or an integer (all these colors will be converted to the RGB model; see &lt;code&gt;?col2rgb&lt;/code&gt; for details)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class.source&lt;/code&gt;: (NULL; character) useful for HTML output, appends classes that
can be used in conjunction with css, so you can apply custom formatting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a hidden option &lt;code&gt;indent&lt;/code&gt; which stores the possible leading white spaces of the chunk, e.g. for the chunk below, &lt;code&gt;indent&lt;/code&gt; is a character string of two spaces:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;  ```{r}
  rnorm(10)
  ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Currently this option is only used to indent markdown output, because
leading white spaces have special meanings in markdown.&lt;/p&gt;

&lt;h2 id=&#34;cache&#34;&gt;Cache&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cache&lt;/code&gt;: (&lt;code&gt;FALSE&lt;/code&gt;; logical) whether to cache a code chunk; when evaluating
code chunks, the cached chunks are skipped, but the objects created in
these chunks are (lazy-) loaded from previously saved databases (&lt;code&gt;.rdb&lt;/code&gt;
and &lt;code&gt;.rdx&lt;/code&gt;) files, and these files are saved when a chunk is evaluated for
the first time, or when cached files are not found (e.g. you may have
removed them by hand); note the filename consists of the chunk label with
an MD5 digest of the R code in the chunk (the MD5 string is a summary of
the chunk text, and any changes in the chunk will produce a different MD5
digest); unlike the &lt;strong&gt;cacheSweave&lt;/strong&gt; package which uses &lt;strong&gt;stashR&lt;/strong&gt;, this
package directly uses internal functions in base R for cache, and another
difference is that results of the code will &lt;em&gt;still&lt;/em&gt; be included in the
output even when cache is used (whereas &lt;strong&gt;cacheSweave&lt;/strong&gt; has no output when
a chunk is cached), because &lt;strong&gt;knitr&lt;/strong&gt; also caches the printed output of a
code chunk as a character string

&lt;ul&gt;
&lt;li&gt;for advanced users, &lt;code&gt;cache&lt;/code&gt; can be more granular and takes numeric
values &lt;code&gt;0, 1, 2, 3&lt;/code&gt;; see the &lt;a href=&#34;../demo/cache&#34;&gt;cache example&lt;/a&gt; page
for &amp;ldquo;More granular cache&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cache.path&lt;/code&gt;: (&lt;code&gt;&#39;cache/&#39;&lt;/code&gt;; character) a prefix to be used for the names of
cache files (by default they are saved to a directory named &lt;code&gt;cache&lt;/code&gt;
relative to the current working directory; you can also use an absolute
dir here, e.g. &lt;code&gt;/home/foo/bar-&lt;/code&gt; or &lt;code&gt;D:\\abc\\mycache&lt;/code&gt;, but it is not
recommended since such absolute directories may not exist in other
people&amp;rsquo;s systems, therefore it is recommended to use relative directories)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cache.vars&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;) a character vector of variable names to be saved in
the cache database; by default all variables created in the current chunks
are identified and saved, but we can manually set the variables to be saved&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cache.globals&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;) a character vector of the names of variables that are not created from the current chunk; this option is mainly for &lt;code&gt;autodep = TRUE&lt;/code&gt; to work more precisely &amp;ndash; a chunk B depends on chunk A when any of B&amp;rsquo;s global variables are A&amp;rsquo;s local variables; by default, the detection of global variables in a chunk is very conservative &amp;ndash; it detects all possible variables in the chunk, no matter if they are local or global&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cache.lazy&lt;/code&gt;: (&lt;code&gt;TRUE&lt;/code&gt;) whether to &lt;code&gt;lazyLoad()&lt;/code&gt; or directly &lt;code&gt;load()&lt;/code&gt; objects;
for very large objects, lazyloading may not work, so &lt;code&gt;cache.lazy=FALSE&lt;/code&gt;
may be desirable (see &lt;a href=&#34;https://github.com/yihui/knitr/issues/572&#34;&gt;#572&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cache.comments&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;) if &lt;code&gt;FALSE&lt;/code&gt;, changing comments in R code chunks will
not invalidate the cache database&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cache.rebuild&lt;/code&gt;: (&lt;code&gt;FALSE&lt;/code&gt;) if &lt;code&gt;TRUE&lt;/code&gt;, the chunk is evaluated even if &lt;code&gt;cache=TRUE&lt;/code&gt;
and no changes are made. This is useful when given an R code argument.
For example: &lt;code&gt;cache.rebuild=!file.exists(&amp;quot;path/to/file.ext&amp;quot;)&lt;/code&gt;
(see &lt;a href=&#34;https://github.com/yihui/knitr/issues/238&#34;&gt;#238&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependson&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;; character or numeric) a character vector of chunk labels
to specify which other chunks this chunk depends on; this option applies
to cached chunks only &amp;ndash; sometimes the objects in a cached chunk may
depend on other cached chunks, so when other chunks are changed, this
chunk must be updated accordingly

&lt;ul&gt;
&lt;li&gt;if &lt;code&gt;dependson&lt;/code&gt; is a numeric vector, it means the indices of chunk labels,
e.g. &lt;code&gt;dependson=1&lt;/code&gt; means this chunk depends on the first chunk in the
document, and &lt;code&gt;dependson=c(-1, -2)&lt;/code&gt; means it depends on the previous two
chunks (negative indices stand for numbers of chunks before this chunk,
and note they are always relative to the current chunk)&lt;/li&gt;
&lt;li&gt;please note this option does not work when set as a global chunk option
via &lt;code&gt;opts_chunk$set()&lt;/code&gt;; it must be set as a local chunk option&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autodep&lt;/code&gt;: (&lt;code&gt;FALSE&lt;/code&gt;; logical) whether to figure out the dependencies among
chunks automatically by analyzing the global variables in the code (may
not be reliable) so that &lt;code&gt;dependson&lt;/code&gt; does not need to be set explicitly&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;plots&#34;&gt;Plots&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fig.path&lt;/code&gt;: (&lt;code&gt;&#39;figure/&#39;&lt;/code&gt;; character) prefix to be used for figure filenames (&lt;code&gt;fig.path&lt;/code&gt; and chunk labels are concatenated to make filenames); it may contain a directory like &lt;code&gt;figure/prefix-&lt;/code&gt; (will be created if it does not exist); this path is relative to the current working directory; if the prefix ends in a trailing slash, e.g. &lt;code&gt;output/figures/&lt;/code&gt;, figures will be saved in the specified directory without any changes to filename prefix, thus providing a relative filepath alternative to the package-level option &lt;code&gt;base.dir&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.keep&lt;/code&gt;: (&lt;code&gt;&#39;high&#39;&lt;/code&gt;; character) how plots in chunks should be kept; it takes five possible character values or a numeric vector (see the end of this section for an example)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;high&lt;/code&gt;: only keep high-level plots (merge low-level changes into high-level plots);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;: discard all plots;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all&lt;/code&gt;: keep all plots (low-level plot changes may produce new plots)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first&lt;/code&gt;: only keep the first plot&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last&lt;/code&gt;: only keep the last plot&lt;/li&gt;
&lt;li&gt;if set to a numeric vector: interpret value as index of (low-level) plots to keep&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.show&lt;/code&gt;: (&lt;code&gt;&#39;asis&#39;&lt;/code&gt;; character) how to show/arrange the plots; four possible values are

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;asis&lt;/code&gt;: show plots exactly in places where they were generated (as if the code were run in an R terminal);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hold&lt;/code&gt;: hold all plots and output them in the very end of a code chunk;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;animate&lt;/code&gt;: wrap all plots into an animation if there are mutiple plots in a chunk;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hide&lt;/code&gt;: generate plot files but hide them in the output document&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dev&lt;/code&gt;: (&lt;code&gt;&#39;pdf&#39;&lt;/code&gt; for LaTeX output and &lt;code&gt;&#39;png&#39;&lt;/code&gt; for HTML/markdown; character) the function name which will be used as a graphical device to record plots; for the convenience of usage, this package has included all the graphics devices in base R as well as those in &lt;strong&gt;Cairo&lt;/strong&gt;, &lt;strong&gt;cairoDevice&lt;/strong&gt; and &lt;strong&gt;tikzDevice&lt;/strong&gt;, e.g. if we set &lt;code&gt;dev=&#39;CairoPDF&#39;&lt;/code&gt;, the function with the same name in the &lt;strong&gt;Cairo&lt;/strong&gt; package will be used for graphics output; if none of the 20 built-in devices is appropriate, we can still provide yet another name as long as it is a legal function name which can record plots (it must be of the form &lt;code&gt;function(filename, width, height)&lt;/code&gt;); note the units for images are &lt;em&gt;always&lt;/em&gt; inches (even for bitmap devices, in which DPI is used to convert between pixels and inches); currently available devices are &lt;code&gt;bmp&lt;/code&gt;, &lt;code&gt;postscript&lt;/code&gt;, &lt;code&gt;pdf&lt;/code&gt;, &lt;code&gt;png&lt;/code&gt;, &lt;code&gt;svg&lt;/code&gt;, &lt;code&gt;jpeg&lt;/code&gt;, &lt;code&gt;pictex&lt;/code&gt;, &lt;code&gt;tiff&lt;/code&gt;, &lt;code&gt;win.metafile&lt;/code&gt;, &lt;code&gt;cairo_pdf&lt;/code&gt;, &lt;code&gt;cairo_ps&lt;/code&gt;, &lt;code&gt;CairoJPEG&lt;/code&gt;, &lt;code&gt;CairoPNG&lt;/code&gt;, &lt;code&gt;CairoPS&lt;/code&gt;, &lt;code&gt;CairoPDF&lt;/code&gt;, &lt;code&gt;CairoSVG&lt;/code&gt;, &lt;code&gt;CairoTIFF&lt;/code&gt;, &lt;code&gt;Cairo_pdf&lt;/code&gt;, &lt;code&gt;Cairo_png&lt;/code&gt;, &lt;code&gt;Cairo_ps&lt;/code&gt;, &lt;code&gt;Cairo_svg&lt;/code&gt;, &lt;code&gt;tikz&lt;/code&gt; and a series of &lt;code&gt;quartz&lt;/code&gt; devices including &lt;code&gt;quartz_pdf&lt;/code&gt;, &lt;code&gt;quartz_png&lt;/code&gt;, &lt;code&gt;quartz_jpeg&lt;/code&gt;, &lt;code&gt;quartz_tiff&lt;/code&gt;, &lt;code&gt;quartz_gif&lt;/code&gt;, &lt;code&gt;quartz_psd&lt;/code&gt;, &lt;code&gt;quartz_bmp&lt;/code&gt; which are just wrappers to the function &lt;code&gt;quartz()&lt;/code&gt; with different file types

&lt;ul&gt;
&lt;li&gt;the options &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;fig.ext&lt;/code&gt;, &lt;code&gt;fig.width&lt;/code&gt;, &lt;code&gt;fig.height&lt;/code&gt; and &lt;code&gt;dpi&lt;/code&gt; can be vectors (shorter ones will be recycled), e.g. &lt;code&gt;&amp;lt;&amp;lt;foo, dev=c(&#39;pdf&#39;, &#39;png&#39;)&amp;gt;&amp;gt;=&lt;/code&gt; creates two files for the same plot: &lt;code&gt;foo.pdf&lt;/code&gt; and &lt;code&gt;foo.png&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dev.args&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;) more arguments to be passed to the device, e.g. &lt;code&gt;dev.args=list(bg=&#39;yellow&#39;, pointsize=10)&lt;/code&gt;; note this depends on the specific device (see the device documentation); when &lt;code&gt;dev&lt;/code&gt; has multiple elements, &lt;code&gt;dev.args&lt;/code&gt; can be a list of lists of arguments with each list of arguments to be passed to each single device, e.g. &lt;code&gt;&amp;lt;&amp;lt;dev=c(&#39;pdf&#39;, &#39;tiff&#39;), dev.args=list(pdf = list(colormodel = &#39;cmyk&#39;, useDingats = TRUE), tiff = list(compression = &#39;lzw&#39;))&amp;gt;&amp;gt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.ext&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;; character) file extension of the figure output (if &lt;code&gt;NULL&lt;/code&gt;, it will be derived from the graphical device; see &lt;code&gt;knitr:::auto_exts&lt;/code&gt; for details)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dpi&lt;/code&gt;: (&lt;code&gt;72&lt;/code&gt;; numeric) the DPI (dots per inch) for bitmap devices (&lt;code&gt;dpi * inches = pixels&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.width&lt;/code&gt;, &lt;code&gt;fig.height&lt;/code&gt;: (both are &lt;code&gt;7&lt;/code&gt;; numeric) width and height of the plot, to be used in the graphics device (in inches) and have to be numeric&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.asp&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;; numeric) the aspect ratio of the plot, i.e. the ratio of height/width; when &lt;code&gt;fig.asp&lt;/code&gt; is specified, the height of a plot (the chunk option &lt;code&gt;fig.height&lt;/code&gt;) is calculated from &lt;code&gt;fig.width * fig.asp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.dim&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;; numeric) if a numeric vector of length 2, it gives &lt;code&gt;fig.width&lt;/code&gt; and &lt;code&gt;fig.height&lt;/code&gt;, e.g., &lt;code&gt;fig.dim = c(5, 7)&lt;/code&gt; is a shorthand of &lt;code&gt;fig.width = 5, fig.height = 7&lt;/code&gt;; if both &lt;code&gt;fig.asp&lt;/code&gt; and &lt;code&gt;fig.dim&lt;/code&gt; are provided, &lt;code&gt;fig.asp&lt;/code&gt; will be ignored (with a warning)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;out.width&lt;/code&gt;, &lt;code&gt;out.height&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;; character) width and height of the plot in the final output file (can be different with its real &lt;code&gt;fig.width&lt;/code&gt; and &lt;code&gt;fig.height&lt;/code&gt;, i.e. plots can be scaled in the output document); depending on the output format, these two options can take flexible values, e.g. for LaTeX output, they can be &lt;code&gt;.8\\linewidth&lt;/code&gt;, &lt;code&gt;3in&lt;/code&gt; or &lt;code&gt;8cm&lt;/code&gt; and for HTML, they may be &lt;code&gt;300px&lt;/code&gt; (do not have to be in inches like &lt;code&gt;fig.width&lt;/code&gt; and &lt;code&gt;fig.height&lt;/code&gt;; backslashes must be escaped as &lt;code&gt;\\&lt;/code&gt;); for LaTeX output, the default value for &lt;code&gt;out.width&lt;/code&gt; will be changed to &lt;code&gt;\\maxwidth&lt;/code&gt; which is defined &lt;a href=&#34;../demo/framed/&#34;&gt;here&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;out.width&lt;/code&gt; can also be a percentage, e.g. &lt;code&gt;&#39;40%&#39;&lt;/code&gt; will be translated to &lt;code&gt;0.4\linewidth&lt;/code&gt; when the output format is LaTeX&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;out.extra&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;; character) extra options for figures, e.g. &lt;code&gt;out.extra=&#39;angle=90&#39;&lt;/code&gt; in LaTeX output will rotate the figure by 90 degrees; it can be an arbitrary string, e.g. you can write multiple figure options in this option; it also applies to HTML images (extra options will be written into the &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; tag, e.g. &lt;code&gt;out.extra=&#39;style=&amp;quot;display:block;&amp;quot;&#39;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.retina&lt;/code&gt;: (&lt;code&gt;1&lt;/code&gt;; numeric) this option only applies to HTML output; for &lt;a href=&#34;http://en.wikipedia.org/wiki/Retina_Display&#34;&gt;Retina displays&lt;/a&gt;, setting this option to a ratio (usually 2) will change the chunk option &lt;code&gt;dpi&lt;/code&gt; to &lt;code&gt;dpi * fig.retina&lt;/code&gt;, and &lt;code&gt;out.width&lt;/code&gt; to &lt;code&gt;fig.width * dpi / fig.retina&lt;/code&gt; internally; for example, the physical size of an image is doubled and its display size is halved when &lt;code&gt;fig.retina = 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resize.width&lt;/code&gt;, &lt;code&gt;resize.height&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;; character) the width and height to be used in &lt;code&gt;\resizebox{}{}&lt;/code&gt; in LaTeX; these two options are not needed unless you want to resize tikz graphics because there is no natural way to do it; however, according to &lt;strong&gt;tikzDevice&lt;/strong&gt; authors, tikz graphics is not meant to be resized to maintain consistency in style with other texts in LaTeX; if only one of them is &lt;code&gt;NULL&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt; will be used (read the documentation of &lt;strong&gt;graphicx&lt;/strong&gt; if you do not understand this)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.align&lt;/code&gt;: (&lt;code&gt;&#39;default&#39;&lt;/code&gt;; character) alignment of figures in the output
document (possible values are &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; and &lt;code&gt;center&lt;/code&gt;; default is not
to make any alignment adjustments); note that for Markdown output, forcing
figure alignments will lead to the HTML tag &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; instead of the
original Markdown syntax &lt;code&gt;![]()&lt;/code&gt;, because Markdown does not have native
support for figure alignments (see
&lt;a href=&#34;https://github.com/yihui/knitr/issues/611&#34;&gt;#611&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.env&lt;/code&gt;: (&lt;code&gt;&#39;figure&#39;&lt;/code&gt;) the LaTeX environment for figures, e.g. set &lt;code&gt;fig.env=&#39;marginfigure&#39;&lt;/code&gt; to get &lt;code&gt;\begin{marginfigure}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.cap&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;; character) figure caption to be used in a figure environment in LaTeX (in &lt;code&gt;\caption{}&lt;/code&gt;); if &lt;code&gt;NULL&lt;/code&gt; or &lt;code&gt;NA&lt;/code&gt;, it will be ignored, otherwise a figure environment will be used for the plots in the chunk (output in &lt;code&gt;\begin{figure}&lt;/code&gt; and &lt;code&gt;\end{figure}&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.scap&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;; character) short caption; if &lt;code&gt;NULL&lt;/code&gt;, all the words before &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;:&lt;/code&gt; will be used as a short caption; if &lt;code&gt;NA&lt;/code&gt;, it will be ignored&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.lp&lt;/code&gt;: (&lt;code&gt;&#39;fig:&#39;&lt;/code&gt;; character) label prefix for the figure label to be used in &lt;code&gt;\label{}&lt;/code&gt;; the actual label is made by concatenating this prefix and the chunk label, e.g. the figure label for &lt;code&gt;&amp;lt;&amp;lt;foo-plot&amp;gt;&amp;gt;=&lt;/code&gt; will be &lt;code&gt;fig:foo-plot&lt;/code&gt; by default&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.pos&lt;/code&gt;: (&lt;code&gt;&#39;&#39;&lt;/code&gt;; character) a character string for the figure position arrangement to be used in &lt;code&gt;\begin{figure}[fig.pos]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.subcap&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;) captions for subfigures; when there are multiple plots in a chunk, and neither &lt;code&gt;fig.subcap&lt;/code&gt; nor &lt;code&gt;fig.cap&lt;/code&gt; is NULL, &lt;code&gt;\subfloat{}&lt;/code&gt; will be used for individual plots (you need to add &lt;code&gt;\usepackage{subfig}&lt;/code&gt; in the preamble); see &lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/067-graphics-options.Rnw&#34;&gt;067-graphics-options.Rnw&lt;/a&gt; for an example&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.ncol&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;; integer) the number of columns of subfigures; see &lt;a href=&#34;https://github.com/yihui/knitr/issues/1327#issuecomment-346242532&#34;&gt;here&lt;/a&gt; for examples (note that &lt;code&gt;fig.ncol&lt;/code&gt; and &lt;code&gt;fig.sep&lt;/code&gt; only work for LaTeX output)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.sep&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;; character) a character vector of separators to be inserted among subfigures; when &lt;code&gt;fig.ncol&lt;/code&gt; is specified, &lt;code&gt;fig.sep&lt;/code&gt; defaults to a character vector of which every N-th element is &lt;code&gt;\newline&lt;/code&gt; (where &lt;code&gt;N&lt;/code&gt; is the number of columns), e.g., &lt;code&gt;fig.ncol = 2&lt;/code&gt; means &lt;code&gt;fig.sep = c(&#39;&#39;, &#39;&#39;, &#39;\\newline&#39;, &#39;&#39;, &#39;&#39;, &#39;\\newline&#39;, &#39;&#39;, ...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.process&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;) a function to post-process a figure file; it should take a filename, and return a character string as the new source of the figure to be inserted in the output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.showtext&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;) if &lt;code&gt;TRUE&lt;/code&gt;, call &lt;code&gt;showtext::showtext.begin()&lt;/code&gt; before drawing plots; see the documentation of the &lt;a href=&#34;http://cran.rstudio.com/package=showtext&#34;&gt;&lt;strong&gt;showtext&lt;/strong&gt;&lt;/a&gt; package for details&lt;/li&gt;
&lt;li&gt;&lt;code&gt;external&lt;/code&gt;: (&lt;code&gt;TRUE&lt;/code&gt;; logical) whether to externalize tikz graphics (pre-compile tikz graphics to PDF); it is only used for the &lt;code&gt;tikz()&lt;/code&gt; device in the &lt;strong&gt;tikzDevice&lt;/strong&gt; package (i.e., when &lt;code&gt;dev=&#39;tikz&#39;&lt;/code&gt;) and it can save time for LaTeX compilation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sanitize&lt;/code&gt;: (&lt;code&gt;FALSE&lt;/code&gt;; character) whether to sanitize tikz graphics (escape special LaTeX characters); see documentation in the &lt;strong&gt;tikzDevice&lt;/strong&gt; package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note any number of plots can be recorded in a single code chunk, and this package does not need to know how many plots are in a chunk in advance &amp;ndash; it can figure out automatically, and name these images as &lt;code&gt;fig.path-label-i&lt;/code&gt; where &lt;code&gt;i&lt;/code&gt; is incremental from 1; if a code chunk does not actually produce any plots, &lt;strong&gt;knitr&lt;/strong&gt; will not record anything either (the graphics device is open &lt;em&gt;only when plots are really produced&lt;/em&gt;); in other words, it does not matter if &lt;code&gt;fig.keep=&#39;high&#39;&lt;/code&gt; but no plots were produced.&lt;/p&gt;

&lt;p&gt;Low-level plotting commands include &lt;code&gt;lines()&lt;/code&gt; and &lt;code&gt;points()&lt;/code&gt;, etc. To better understand &lt;code&gt;fig.keep&lt;/code&gt;, consider the following chunk:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;&amp;lt;test-plot&amp;gt;&amp;gt;=
plot(1)         # high-level plot
abline(0, 1)    # low-level change
plot(rnorm(10)) # high-level plot
## many low-level changes in a loop (a single R expression)
for(i in 1:10) {
    abline(v = i, lty = 2)
}
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Normally this produces 2 plots in the output (i.e. when &lt;code&gt;fig.keep=&#39;high&#39;&lt;/code&gt;); for &lt;code&gt;fig.keep=&#39;none&#39;&lt;/code&gt;, no plots will be saved; for &lt;code&gt;fig.keep=&#39;all&#39;&lt;/code&gt;, 4 plots are saved; for &lt;code&gt;fig.keep=&#39;first&#39;&lt;/code&gt;, the plot produced by &lt;code&gt;plot(1)&lt;/code&gt; is saved, and for &lt;code&gt;fig.keep=&#39;last&#39;&lt;/code&gt;, the last plot with 10 vertical lines is saved.&lt;/p&gt;

&lt;p&gt;There are two hidden options which are not designed to be set by the users: &lt;code&gt;fig.cur&lt;/code&gt; (the current figure number or index when there are multiple figures) and &lt;code&gt;fig.num&lt;/code&gt; (the total number of figures in a chunk). The purpose of these two options is to help &lt;strong&gt;knitr&lt;/strong&gt; deal with the filenames of multiple figures as well as animations. In some cases, we can make use of them to write animations into the output using plot files which are saved manually (see the &lt;a href=&#34;https://github.com/yihui/knitr/releases/download/doc/knitr-graphics.pdf&#34;&gt;graphics manual&lt;/a&gt; for examples).&lt;/p&gt;

&lt;h2 id=&#34;animation&#34;&gt;Animation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;interval&lt;/code&gt;: (&lt;code&gt;1&lt;/code&gt;; numeric) number of seconds to pause between animation frames&lt;/li&gt;
&lt;li&gt;&lt;code&gt;animation.hook&lt;/code&gt;: (&lt;code&gt;knitr::hook_ffmpeg_html&lt;/code&gt;; function or character) a hook function to create animations in HTML output; the default hook uses FFmpeg to convert images to a WebM video

&lt;ul&gt;
&lt;li&gt;another hook function is &lt;code&gt;knitr::hook_gifski&lt;/code&gt; (available in &lt;strong&gt;knitr&lt;/strong&gt; &amp;gt;= v1.20.13) based on the &lt;a href=&#34;https://cran.r-project.org/package=gifski&#34;&gt;&lt;strong&gt;gifski&lt;/strong&gt;&lt;/a&gt; package to create a GIF animation&lt;/li&gt;
&lt;li&gt;this option can also take a character string &lt;code&gt;&#39;ffmpeg&#39;&lt;/code&gt; or &lt;code&gt;&#39;gifski&#39;&lt;/code&gt; as a shorthand of the corresponding hook function (e.g., &lt;code&gt;animation.hook = &#39;gifski&#39;&lt;/code&gt; means &lt;code&gt;animation.hook = knitr::hook_gifski&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aniopts&lt;/code&gt;: (&lt;code&gt;&#39;controls,loop&#39;&lt;/code&gt;) extra options for animations; see the documentation of the &lt;a href=&#34;http://www.ctan.org/tex-archive/macros/latex/contrib/animate&#34;&gt;animate package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ffmpeg.bitrate&lt;/code&gt; (&lt;code&gt;1M&lt;/code&gt;; character) to be passed to the &lt;code&gt;-b:v&lt;/code&gt; argument of FFmpeg to control the quality of WebM videos created from FFmpeg&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ffmpeg.format&lt;/code&gt; (&lt;code&gt;webm&lt;/code&gt;; character) the video format of FFmpeg, i.e. the filename extension of the video&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;code-chunk&#34;&gt;Code Chunk&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;code&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;; character) if provided, it will override the code in the
current chunk; this allows us to programmatically insert code into the
current chunk; e.g. a chunk option &lt;code&gt;code = capture.output(dump(&#39;fivenum&#39;,
&#39;&#39;))&lt;/code&gt; will use the source code of the function &lt;code&gt;fivenum&lt;/code&gt; to replace the
current chunk; e.g. a chunk option &lt;code&gt;code = readLines(&#39;test.r&#39;)&lt;/code&gt; will use
the content of the file &lt;code&gt;test.r&lt;/code&gt; as the current chunk.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref.label&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;; character) a character vector of labels of the
chunks from which the code of the current chunk is inherited (see the demo
for &lt;a href=&#34;../demo/reference/&#34;&gt;chunk reference&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;child-documents&#34;&gt;Child Documents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;child&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;; character) a character vector of filenames of child documents to be run and input into the main document&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;language-engines&#34;&gt;Language Engines&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;engine&lt;/code&gt;: (&lt;code&gt;&#39;R&#39;&lt;/code&gt;; character) the language name of the code chunk; currently other possible values are &lt;code&gt;&#39;python&#39;&lt;/code&gt; and &lt;code&gt;&#39;awk&#39;&lt;/code&gt;/&lt;code&gt;&#39;gawk&#39;&lt;/code&gt;; the object &lt;code&gt;knit_engines&lt;/code&gt; in this package can be used to set up engines for other languages&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;engine.path&lt;/code&gt; (&lt;code&gt;NULL&lt;/code&gt;; character): the path to the executable of the &lt;code&gt;engine&lt;/code&gt;; this option makes it possible to use alternative executables in your system, e.g., the default &lt;code&gt;python&lt;/code&gt; may be at &lt;code&gt;/usr/bin/python&lt;/code&gt;, and you may set &lt;code&gt;engine.path = &#39;~/anaconda/bin/python&#39;&lt;/code&gt; to use a different version of Python&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;engine.path&lt;/code&gt; can also be a list of paths, which makes it possible to set different engine paths for different engines, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;knitr::opts_chunk$set(engine.path = list(
  python = &#39;~/anaconda/bin/python&#39;,
  ruby = &#39;/usr/local/bin/ruby&#39;
))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The names of the list correspond to the names of the engines.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;option-templates&#34;&gt;Option templates&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;opts.label&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;; character) the label of options set in &lt;code&gt;opts_template&lt;/code&gt; (see &lt;code&gt;?opts_template&lt;/code&gt;); this option can save some typing efforts for sets of frequently used chunk options&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;extracting-source-code&#34;&gt;Extracting source code&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;purl&lt;/code&gt;: (&lt;code&gt;TRUE&lt;/code&gt;; logical) when running &lt;code&gt;purl()&lt;/code&gt; to extract source code from a source document, whether to include or exclude a certain code chunk&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;other-chunk-options&#34;&gt;Other Chunk Options&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;R.options&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;) local R options for a code chunk; these options are set temporarily via &lt;code&gt;options()&lt;/code&gt; before the code chunk, and restored after the chunk&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;package-options&#34;&gt;Package Options&lt;/h1&gt;

&lt;p&gt;The package options can be changed using the object &lt;a href=&#34;objects&#34;&gt;&lt;code&gt;opts_knit&lt;/code&gt;&lt;/a&gt;; for example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;opts_knit$set(progress = TRUE, verbose = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;code&gt;?opts_knit&lt;/code&gt; for the alternative approach to setting package options using the R base function &lt;code&gt;options()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All package options are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aliases&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;) a named character vector to specify the aliases of chunk options, e.g. &lt;code&gt;c(h = &#39;fig.height&#39;, w = &#39;fig.width&#39;)&lt;/code&gt; tells &lt;strong&gt;knitr&lt;/strong&gt; that the chunk option &lt;code&gt;h&lt;/code&gt; really means &lt;code&gt;fig.height&lt;/code&gt;, and &lt;code&gt;w&lt;/code&gt; is an alias for &lt;code&gt;fig.width&lt;/code&gt;; this option can be used to save some typing efforts for long option names&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base.dir&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;) an absolute directory under which the plots are generated&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base.url&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;) the base url for HTML pages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;child.path&lt;/code&gt;: (&lt;code&gt;&#39;&#39;&lt;/code&gt;) the search path for child documents; by default child documents are searched for relative to the directory of the parent document&lt;/li&gt;
&lt;li&gt;&lt;code&gt;concordance&lt;/code&gt;: (&lt;code&gt;FALSE&lt;/code&gt;) whether to write a concordance file to map the output line numbers to the input line numbers; this enables one to navigate from the output to the input and can be helpful especially when TeX error occurs (this feature is mainly for RStudio)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval.after&lt;/code&gt;: (&lt;code&gt;fig.cap&lt;/code&gt;) a character vector of option names; these options will be evaluated &lt;em&gt;after&lt;/em&gt; a chunk is evaluated, and all other options will be evaluated before a chunk (e.g. for chunk option &lt;code&gt;fig.cap=paste(&#39;p-value is&#39;, t.test(x)$p.value)&lt;/code&gt;, it will be evaluated after the chunk according to the value of &lt;code&gt;x&lt;/code&gt; if &lt;code&gt;eval.after=&#39;fig.cap&#39;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;global.par&lt;/code&gt;: (&lt;code&gt;FALSE&lt;/code&gt;) if &lt;code&gt;TRUE&lt;/code&gt;, the &lt;code&gt;par()&lt;/code&gt; settings from the last code chunk will be preserved and applied to the next code chunk (of course, this only applies to base graphics); by default, &lt;strong&gt;knitr&lt;/strong&gt; opens a new graphics device to record plots and close it after evaluating the code, so &lt;code&gt;par()&lt;/code&gt; settings will be discarded&lt;/li&gt;
&lt;li&gt;&lt;code&gt;header&lt;/code&gt;: the text to be inserted into the output document before the document begins (e.g. after &lt;code&gt;\documentclass{article}&lt;/code&gt; in LaTeX, or &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; in HTML); this is useful for defining commands and styles in the LaTeX preamble or HTML header; the beginning of document is found using the pattern defined in &lt;code&gt;knit_patterns$get(&#39;document.begin&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;latex.options.color&lt;/code&gt;, &lt;code&gt;latex.options.graphicx&lt;/code&gt; (&lt;code&gt;NULL&lt;/code&gt;): options for the LaTeX packages &lt;strong&gt;color&lt;/strong&gt; and &lt;strong&gt;graphicx&lt;/strong&gt;, respectively&lt;/li&gt;
&lt;li&gt;&lt;code&gt;out.format&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;) possible values are &lt;code&gt;latex&lt;/code&gt;, &lt;code&gt;sweave&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;markdown&lt;/code&gt; and &lt;code&gt;jekyll&lt;/code&gt;; it will be automatically determined based on the input file, and this option will affect which set of hooks to use (see &lt;code&gt;?render_latex&lt;/code&gt; for example); note this option has to be set &lt;em&gt;before&lt;/em&gt; &lt;code&gt;knit()&lt;/code&gt; runs (i.e. it does not work if you set it in the document), or alternatively, you can use the &lt;code&gt;render_*&lt;/code&gt; series inside the document to set up the hooks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;progress&lt;/code&gt;: (&lt;code&gt;TRUE&lt;/code&gt;) whether to display a progress bar when running &lt;strong&gt;knitr&lt;/strong&gt;; note it also depends on the R option &lt;code&gt;KNITR_PROGRESS&lt;/code&gt; (it this variable is set to &lt;code&gt;FALSE&lt;/code&gt; via &lt;code&gt;options(KNITR_PROGRESS = FALSE)&lt;/code&gt;, the &lt;code&gt;progress&lt;/code&gt; option will be set to &lt;code&gt;FALSE&lt;/code&gt; when &lt;strong&gt;knitr&lt;/strong&gt; is loaded)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;root.dir&lt;/code&gt;: (&lt;code&gt;NULL&lt;/code&gt;) the root directory when evaluating code chunks; if &lt;code&gt;NULL&lt;/code&gt;, the directory of the input document will be used&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self.contained&lt;/code&gt;: (&lt;code&gt;TRUE&lt;/code&gt;) whether the output document should be self-contained (TeX styles written in the tex document, and CSS styles in HTML document); this option only applies to Rnw and Rhtml documents, and does not apply to R Markdown documents (Rmd)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unnamed.chunk.label&lt;/code&gt;: (&lt;code&gt;unnamed-chunk&lt;/code&gt;) the label prefix for unnamed chunks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;upload.fun&lt;/code&gt;: (&lt;code&gt;identity&lt;/code&gt;) a function that takes a filename as its input, processes it and returns a character string when the output format is HTML or Markdown; typically it is a function to upload a image and return the link to the image, e.g. &lt;code&gt;opts_knit$set(upload.fun = imgur_upload)&lt;/code&gt; can upload a file to &lt;a href=&#34;http://imgur.com&#34;&gt;http://imgur.com&lt;/a&gt; (see &lt;code&gt;?imgur_upload&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;verbose&lt;/code&gt;: (&lt;code&gt;FALSE&lt;/code&gt;) whether to show verbose information (e.g., R code in each chunk and message logs) or just show chunk labels and options&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt;: (&lt;code&gt;75&lt;/code&gt;) it is used to set the R session option &lt;code&gt;width&lt;/code&gt; that may affect the width of source code and text output&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Patterns</title>
      <link>https://yihui.name/knitr/patterns/</link>
      <pubDate>Fri, 03 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/patterns/</guid>
      <description>
        

&lt;p&gt;The &lt;a href=&#34;../objects&#34;&gt;object&lt;/a&gt; &lt;code&gt;knit_patterns&lt;/code&gt; manages patterns in &lt;strong&gt;knitr&lt;/strong&gt;. For example, we can use &lt;code&gt;knit_patterns$get()&lt;/code&gt; to check the current pattern list. A pattern list includes the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chunk.begin&lt;/code&gt;: the pattern for the beginning of a code chunk; it must contain a group defined by &lt;code&gt;()&lt;/code&gt;, which will be used to extract chunk options&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chunk.end&lt;/code&gt;: the pattern for the end of a chunk (the original meaning of this pattern in literate programming is different: it used to indicate the beginning of normal text; if you want the original meaning, see the &lt;a href=&#34;../options/&#34;&gt;package option&lt;/a&gt; &lt;code&gt;filter.chunk.end&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chunk.code&lt;/code&gt;: the pattern to be used to extract R code from a chunk by removing characters of this pattern&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline.code&lt;/code&gt;: the pattern to be used to extract the pieces of R code mixed inline with other texts (i.e. those which are not in separate code chunks); like &lt;code&gt;chunk.begin&lt;/code&gt;, it must contain a group&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline.comment&lt;/code&gt;: the pattern of inline comments (tokens of inline R code will be removed from lines that match with this pattern)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;header.begin&lt;/code&gt;: the pattern to find out where the document header begins; this is used to insert some header information into the output document (e.g. commands in the preamble in LaTeX, or CSS styles in HTML)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.begin&lt;/code&gt;: the pattern to find out where the body of the document begins (it can be used, for example, to extract the LaTeX preamble so we can externalize tikz graphics, or insert code for syntax highlighting)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Patterns that are &lt;code&gt;NULL&lt;/code&gt; will not be matched.&lt;/p&gt;

&lt;p&gt;Like Sweave, there are two types of R code in &lt;strong&gt;knitr&lt;/strong&gt;: code chunks (like paragraphs) and inline R code which will be executed within text lines. For chunks in a document, options are of the form &lt;code&gt;label, opt1=TRUE, opt2=FALSE, opt3=&#39;character.string&#39;&lt;/code&gt; (connected by &lt;code&gt;,&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt;; only the chunk label does not need to have a &lt;code&gt;value&lt;/code&gt;, since it is implicitly the &lt;code&gt;value&lt;/code&gt; of the chunk option &lt;code&gt;label&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&#34;built-in-patterns&#34;&gt;Built-in Patterns&lt;/h2&gt;

&lt;p&gt;There are several built-in pattern lists in &lt;strong&gt;knitr&lt;/strong&gt; which are stored in &lt;code&gt;all_patterns&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(knitr)
str(all_patterns)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Knitr&lt;/strong&gt; will first examine the content of the input to decide an appropriate set of patterns, if this automatic detection fails, then depending on the extension of the input filename, &lt;strong&gt;knitr&lt;/strong&gt; will automatically choose a pattern list from the above lists, e.g. &lt;code&gt;file.Rnw&lt;/code&gt; will use &lt;code&gt;all_patterns$rnw&lt;/code&gt;, and &lt;code&gt;file.html&lt;/code&gt; will use &lt;code&gt;all_patterns$html&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;A series of convenience functions &lt;code&gt;pat_rnw()&lt;/code&gt;, &lt;code&gt;pat_html()&lt;/code&gt;, &lt;code&gt;pat_md()&lt;/code&gt;, &lt;code&gt;pat_tex()&lt;/code&gt; and &lt;code&gt;pat_brew()&lt;/code&gt; can be used to set built-in patterns.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Write An R Package Using Literate Programming Techniques</title>
      <link>https://yihui.name/rlp/</link>
      <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/rlp/</guid>
      <description>
        

&lt;p&gt;This is an example of writing an R package using the &lt;a href=&#34;http://en.wikipedia.org/wiki/Literate_programming&#34;&gt;Literate Programming&lt;/a&gt; (LP) technique, implemented through the &lt;strong&gt;knitr&lt;/strong&gt; package and Makefile. It only shows you the idea, and I do not mean you must use &lt;strong&gt;knitr&lt;/strong&gt;, R Markdown, or Makefile. The full source code of this &lt;strong&gt;rlp&lt;/strong&gt; package is available on &lt;a href=&#34;https://github.com/yihui/rlp&#34;&gt;&lt;i class=&#34;fa fa-github&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; Github&lt;/a&gt;. To build this package, you need to install R packages &lt;strong&gt;knitr&lt;/strong&gt; and &lt;strong&gt;rmarkdown&lt;/strong&gt;. Windows users also need to install &lt;a href=&#34;http://cran.rstudio.com/bin/windows/Rtools/&#34;&gt;Rtools&lt;/a&gt;, which includes the utility &lt;code&gt;make&lt;/code&gt;. Linux and macOS users should have &lt;code&gt;make&lt;/code&gt; ready by default.&lt;/p&gt;

&lt;h1 id=&#34;literate-programming&#34;&gt;Literate Programming&lt;/h1&gt;

&lt;p&gt;Interestingly, the most popular application of the LP paradigm seems to be documenting software (using a special form of comments) for users instead of &amp;ldquo;programming&amp;rdquo; for authors. In other words, we use LP to document the &lt;em&gt;usage&lt;/em&gt; of software, instead of documenting the &lt;em&gt;source code&lt;/em&gt;. See &lt;a href=&#34;http://en.wikipedia.org/wiki/Doxygen&#34;&gt;Doxygen&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Javadoc&#34;&gt;Javadoc&lt;/a&gt;, and &lt;a href=&#34;http://cran.rstudio.com/package=roxygen2&#34;&gt;&lt;strong&gt;roxygen2&lt;/strong&gt;&lt;/a&gt; for examples. There exists one exception, though, in the LaTeX world&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:This-is-not-enti&#34;&gt;&lt;a href=&#34;#fn:This-is-not-enti&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Some LaTeX package authors write both LaTeX code and documentation in a single document, and weave it into a PDF document that contains both the source code and documentation. I&amp;rsquo;m not a LaTeX expert, and it is probably well-known that I have big headache when looking at a full screen of backslashes, from &lt;code&gt;\documentclass{}&lt;/code&gt;, &lt;code&gt;\begin{document}&lt;/code&gt;, &lt;code&gt;\alpha&lt;/code&gt;, &lt;code&gt;\beta&lt;/code&gt;, &lt;code&gt;\texttt{}&lt;/code&gt;, &amp;hellip;, and all the way to &lt;code&gt;\end{document}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I do not find LP for LaTeX appealing, but that does not mean LP itself is not an appealing idea. On the contrary, I believe it can be very interesting and useful when it is applied to your own favorite language, e.g., R for me. In my opinion, LP has at least two advantages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can write much more extensive and richer documentation than you normally could do with comments. In general, comments in code are (or should be) brief and limited to plain text. Normally you will not write five paragraphs of comments to explain a few lines of code, and you cannot write readable&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:By-readable-I-me&#34;&gt;&lt;a href=&#34;#fn:By-readable-I-me&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; math expressions or embed a video in comments.&lt;/li&gt;
&lt;li&gt;You can label code chunks and reference/reuse them using the labels, which allows you to compose your program flexibly using different pieces of code chunks. For example, you can define and explain a code chunk later in the document, but insert it in a previous code chunk using its label. This feature has been emphasized by Knuth, but I do not see it is widely adopted for some reason. Perhaps most people are more comfortable with designing a big program by smaller units like functions instead of code chunks, which is actually a good idea.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Personally I find the first advantage more convincing, although it seems some LP folks just love the second one. For R package development, I guess it will be inconvenient for unit testing if we use the LP idea instead of writing smaller functions, because testing functions is straightforward, but testing code chunks is not. Anyway, I will show both features of LP mentioned above in this document.&lt;/p&gt;

&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;

&lt;p&gt;First, I set a few &lt;strong&gt;knitr&lt;/strong&gt; chunk options:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;knitr::opts_chunk$set(eval = FALSE, tidy = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I set &lt;code&gt;eval = FALSE&lt;/code&gt; because this document mostly serves as the documentation of our R source code, and I do not really need to run the code chunks here. The code will be generated to the &lt;code&gt;R/&lt;/code&gt; directory, then built by &lt;code&gt;R CMD build&lt;/code&gt; into an R package. If you do want to execute a code chunk, you can use the chunk option &lt;code&gt;eval = TRUE&lt;/code&gt; on that code chunk. Another important reason that you may not want to evaluate some code chunks is that they may not be complete, for example, when you insert documentation in the middle of a function to explain a few lines of the function body.&lt;/p&gt;

&lt;p&gt;In this document, you will see the chunk option &lt;code&gt;purl = FALSE&lt;/code&gt; occasionally, and that means I want to exclude these code chunks when extracting the R code, but I do want to include them when compiling this document to HTML.&lt;/p&gt;

&lt;h1 id=&#34;r-code-chunks&#34;&gt;R Code Chunks&lt;/h1&gt;

&lt;p&gt;Now I write some example R code chunks using the R Markdown syntax. Here I define a boring function &lt;code&gt;add_one()&lt;/code&gt; with an argument &lt;code&gt;x&lt;/code&gt;, and it simply does &lt;code&gt;x + 1&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#&#39; A cool function
#&#39; 
#&#39; Well, not really cool. Just add 1 to x.
#&#39; @param x a numeric vector
#&#39; @export
#&#39; @examples
#&#39; add_one(1)
#&#39; add_one(1:10)
add_one = function(x) {
  x + 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Besides the R source code, I also wrote the R documentation using the &lt;strong&gt;roxygen2&lt;/strong&gt; syntax. This R code chunk will be extracted and placed under the &lt;code&gt;R/&lt;/code&gt; directory later. The critical step is how to extract the code chunk. After this step, you will be in a familiar world of &lt;code&gt;roxygen2::roxygenize()&lt;/code&gt;, or &lt;code&gt;devtools::build()&lt;/code&gt;, or &lt;code&gt;R CMD build&lt;/code&gt;, or whatever package building process you like.&lt;/p&gt;

&lt;h1 id=&#34;from-rmd-to-r&#34;&gt;From Rmd to R&lt;/h1&gt;

&lt;p&gt;I put this Rmd file under the &lt;code&gt;vignettes/&lt;/code&gt; directory, and you do not have to use this directory. I&amp;rsquo;m using it because I will get a nice by-product after &lt;code&gt;R CMD build&lt;/code&gt;, which is the &lt;em&gt;package vignette&lt;/em&gt;. I used &lt;strong&gt;rmarkdown&lt;/strong&gt; to generate an HTML vignette, which is visually pleasant to read in my eyes.&lt;/p&gt;

&lt;p&gt;To extract the code chunks from the Rmd documents, I used a &lt;code&gt;Makefile&lt;/code&gt; under the root directory of this package&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:If-you-read-the&#34;&gt;&lt;a href=&#34;#fn:If-you-read-the&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;purl=Rscript -e &amp;quot;knitr::purl(&#39;$(1)&#39;, &#39;$(2)&#39;, quiet=TRUE, documentation=0)&amp;quot;

rfiles:=$(patsubst vignettes/LP-%.Rmd,R/%-GEN.R,$(wildcard vignettes/LP-*.Rmd))

all: $(rfiles)

R/%-GEN.R: vignettes/LP-%.Rmd
    $(call purl,$^,$@)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I defined a function &lt;code&gt;purl&lt;/code&gt; in the Makefile, which calls the R function &lt;code&gt;knitr::purl()&lt;/code&gt; to extract code chunks from Rmd to R. To make sure I do not purl arbitrary Rmd documents, I added a prefix &lt;code&gt;LP-&lt;/code&gt; to the Rmd filenames, and only these files will be processed. Similarly, to make sure &lt;code&gt;make&lt;/code&gt; does not use arbitrary R files as targets, I added a suffix &lt;code&gt;-GEN&lt;/code&gt; (stands for &amp;ldquo;generated&amp;rdquo;) to the R filenames. To put it short, an Rmd file &lt;code&gt;vignettes/LP-foo.Rmd&lt;/code&gt; will generate &lt;code&gt;R/foo-GEN.R&lt;/code&gt;. The variable &lt;code&gt;rfiles&lt;/code&gt; stores all the potential R scripts to be generated. If you are familiar with &lt;code&gt;make&lt;/code&gt;, you will immediately see its advantage here: &lt;code&gt;foo-GEN.R&lt;/code&gt; will be re-generated only if &lt;code&gt;LP-foo.Rmd&lt;/code&gt; has been updated.&lt;/p&gt;

&lt;p&gt;You may have realized that this leads to two copies of R code: one copy in Rmd, and one in R. Therefore you need to remind your collaborators (if you have any) that they must not edit the R code under &lt;code&gt;R/&lt;/code&gt; that is generated from Rmd, but should edit the Rmd source documents instead.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:Or-set-the-R-scr&#34;&gt;&lt;a href=&#34;#fn:Or-set-the-R-scr&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h1 id=&#34;one-button-to-rule-them-all&#34;&gt;One Button to Rule Them All&lt;/h1&gt;

&lt;p&gt;Now we have three things to do to fully build this package:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;make&lt;/code&gt; to generate R source code to &lt;code&gt;R/&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Run &lt;strong&gt;roxygen2&lt;/strong&gt; to generate R documentation to &lt;code&gt;man/&lt;/code&gt;, &lt;code&gt;NAMESPACE&lt;/code&gt;, and other stuff;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;R CMD build&lt;/code&gt; to build the package as well as the vignettes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You certainly do not want to type these commands repeatedly. Unfortunately, due to the fact that this is not the standard process of building an R package, there is not a natural solution to combine the three steps into one. For power users, this is certainly not true &amp;ndash; you can always write a shell script to do everything. But some users just do not know how to open a terminal to type commands, and you should not blame them &amp;ndash; not all people do programming for a living, and a command window is not the only or ultimate solution of all problems.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s start hacking and find a button to click. I have been secretly hacking the &lt;code&gt;Build &amp;amp; Reload&lt;/code&gt; button in my RStudio IDE for a long time. If you open this &lt;strong&gt;rlp&lt;/strong&gt; package in RStudio, and go to &lt;code&gt;Tools -&amp;gt; Project Options -&amp;gt; Build Tools&lt;/code&gt;, you will see a weird configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-v &amp;amp;&amp;amp; Rscript -e &amp;quot;Rd2roxygen::rab(install=TRUE,before=system(&#39;make&#39;))&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this moment, I&amp;rsquo;m not going to explain what it means since it is just a dirty hack, and please do not ask me, either. Let&amp;rsquo;s wait for the RStudio IDE to give us more freedom to customize the package build options in the future. If you are interested in the idea of LP for R packages, just copy my configuration, but bear in mind that it may stop working at some point. I will update this document when that happens.&lt;/p&gt;

&lt;p&gt;Note &lt;code&gt;Rd2roxygen::rab()&lt;/code&gt; is my own way of building R packages, and you certainly do not have to follow it. For example, if you are more comfortable with &lt;strong&gt;devtools&lt;/strong&gt;, you can do&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:Remember-to-repl&#34;&gt;&lt;a href=&#34;#fn:Remember-to-repl&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-v &amp;amp;&amp;amp; make -C rlp &amp;amp;&amp;amp; Rscript -e &amp;quot;devtools::install(&#39;rlp&#39;,keep_source=T)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;call-functions-in-this-package&#34;&gt;Call Functions in This Package&lt;/h1&gt;

&lt;p&gt;You can certainly load the package and call the functions in this document, because the package vignettes are compiled &lt;em&gt;after&lt;/em&gt; the package is temporarily installed&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:If-you-use-devto&#34;&gt;&lt;a href=&#34;#fn:If-you-use-devto&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;. For example, I call &lt;code&gt;add_one()&lt;/code&gt; defined above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rlp)
add_one(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;add_one(1:10)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1]  2  3  4  5  6  7  8  9 10 11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running live examples and generating output like this may help you explain what your functions actually do, so readers can understand your source code better, otherwise they can only reason about the code in their mind.&lt;/p&gt;

&lt;h1 id=&#34;a-less-naive-example&#34;&gt;A Less Naive Example&lt;/h1&gt;

&lt;p&gt;Life is certainly not always as simple as &lt;code&gt;add_one()&lt;/code&gt;. In this section, I give a slightly more advanced example to show how LP can be useful and relevant to developing R packages. Let&amp;rsquo;s consider the maximum likelihood estimation (MLE) for the parameters of the Gamma distribution &lt;code&gt;\(\Gamma(y; \alpha, \beta)\)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I will use the function &lt;code&gt;optim()&lt;/code&gt; to optimize the log-likelihood function. First, I define an R function with arguments &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#&#39; MLE for the Gamma distribution
#&#39; 
#&#39; Estimate the parameters (alpha and beta) of the Gamma distribution
#&#39; using maximum likelihood.
#&#39; @param data the data vector assumed to be generated from the Gamma 
#&#39;   distribution
#&#39; @param start the initial values for the parameters of the Gamma
#&#39; distribution (passed to \code{\link{optim}()})
#&#39; @param vcov whether to return an approximate variance-covariance
#&#39; matrix of the parameter vector
#&#39; @return A list with elements \code{estimate} (parameter estimates
#&#39;   for alpha and beta) and, if \code{vcov = TRUE}, \code{vcov} (the
#&#39;   variance-covariance matrix of the parameter vector).
#&#39; @export
mle_gamma = function(data, start = c(1, 1), vcov = FALSE) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Gamma distribution has two commonly used parameterizations (shape-rate or shape-scale), and I will use the following probability density function (shape-rate):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$$f(x|\alpha,\beta)=\frac{\beta^{\alpha}}{\Gamma(\alpha)}x^{\alpha-1}\exp(-\beta x);\quad x&amp;gt;0$$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The log-density function is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$$\log f=\alpha\log\beta-\log\Gamma(\alpha)+(\alpha-1)\log x-\beta x$$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The log-likelihood function given the data vector &lt;code&gt;\(\mathbf{x}=[x_1,x_2,\ldots,x_n]\)&lt;/code&gt; will be:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$$L(\alpha,\beta|\mathbf{x})=n(\alpha\log(\beta)-\log(\Gamma(\alpha)))+(\alpha-1)\sum_{i=1}^{n}\log(x_{i})-\beta\sum_{i=1}^{n}x_{i}$$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And I define it in R as &lt;code&gt;loglike()&lt;/code&gt;, where &lt;code&gt;param&lt;/code&gt; is the parameter vector &lt;code&gt;\([\alpha, \beta]\)&lt;/code&gt;, and &lt;code&gt;x&lt;/code&gt; is the data vector:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;  loglike = function(param, x) {
    a = param[1]  # alpha (the shape parameter)
    b = param[2]  # beta (the rate parameter)
    n = length(x)
    n * (a * log(b) - lgamma(a)) + (a - 1) * sum(log(x)) - b * sum(x)
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is worth noting that in practice we will rarely translate the math equation to R code like that for the Gamma distribution, since R has the &lt;code&gt;dgamma()&lt;/code&gt; function that is much more efficient than the raw log-density function I used above. You would use &lt;code&gt;sum(dgamma(x, shape = param[1], rate = param[2], log = TRUE))&lt;/code&gt; instead. Anyway, I took the silly way just for demonstrating the LP idea instead of how to write efficient statistical computing code.&lt;/p&gt;

&lt;p&gt;Next I optimize the log-likelihood function by passing the initial guesses and the data vector to it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;  opt = optim(start, loglike, x = data, hessian = vcov, control = list(fnscale = -1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You need to be cautious that &lt;code&gt;optim()&lt;/code&gt; minimizes the objective function by default, and that is why I used &lt;code&gt;control = list(fnscale = -1)&lt;/code&gt;. Then I&amp;rsquo;m minimizing &lt;code&gt;-loglike&lt;/code&gt;, and essentially maximizing &lt;code&gt;loglike&lt;/code&gt;. I need to make sure the optimization has reached convergence:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;  if (opt$convergence != 0) stop(&#39;optim() failed to converge&#39;)
  res = list(estimate = opt$par)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, I give an estimate of the variance-covariance matrix &lt;code&gt;\(Var([\hat{\alpha},\hat{\beta}]&#39;)\)&lt;/code&gt; if &lt;code&gt;vcov = TRUE&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;  if (vcov) res$vcov = solve(-opt$hessian)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The estimate is the inverse of the negative Hessian matrix, because &lt;code&gt;\(Var(\hat{\theta})=I^{-1}(\theta)\)&lt;/code&gt; for the maximum likelihood estimator &lt;code&gt;\(\hat{\theta}\)&lt;/code&gt;, where &lt;code&gt;\(I(\theta)\)&lt;/code&gt; is the Information matrix, and we know &lt;code&gt;\(I(\theta) = -E(H(\theta))\)&lt;/code&gt;. In theory, &lt;code&gt;\(I(\theta)\)&lt;/code&gt; is unknown, and I just use the observed information matrix, i.e., the negative Hessian matrix returned from &lt;code&gt;optim()&lt;/code&gt;. Note the inverse matrix is computed via &lt;code&gt;solve()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;  res
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The object &lt;code&gt;res&lt;/code&gt; is returned, and we can use it to compute the confidence intervals of the parameters since MLE is asymptotically Normal. Now let&amp;rsquo;s try the function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(1228)
d = rgamma(100, shape = 5, rate = 2)  # simulate some data from Gamma(5, 2)
r = mle_gamma(d, vcov = TRUE)
str(r)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## List of 2
##  $ estimate: num [1:2] 5.3 2.06
##  $ vcov    : num [1:2, 1:2] 0.529 0.206 0.206 0.088
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The estimates are not too bad, compared to their true values. I can also give a 95% confidence interval for the parameter &lt;code&gt;\(\alpha\)&lt;/code&gt;, of which the estimate is asymptotically Normal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;a = r$estimate[1]  # estimate of alpha
s = sqrt(r$vcov[1, 1])  # standard error of the estimate of alpha
z = qnorm(1 - 0.05/2)  # 97.5% Normal quantile
c(a - z * s, a + z * s)  # a 95% CI
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 3.875568 6.726619
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Below is a histogram of the simulated data, with the true density curve, the true mean (solid vertical line), and the estimated mean (dashed line):&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:The-mean-of-the&#34;&gt;&lt;a href=&#34;#fn:The-mean-of-the&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;par(mar = c(4, 4, .2, .1))
hist(d, main = &#39;&#39;, col = &#39;darkgray&#39;, border = &#39;white&#39;, freq = FALSE)
curve(dgamma(x, shape = 5, rate = 2), 0, 6, add = TRUE, lwd = 2)
abline(v = c(5/2, r$estimate[1]/r$estimate[2]), lty = c(1, 2))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.yihui.name/figures/LP-demo1/dgamma-1.png&#34; alt=&#34;plot of chunk dgamma&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now you see I can thoroughly explain an R function using LP. I&amp;rsquo;m not saying this is what you should do for all R functions, but sometimes there are cases in which you want something beyond code comments, such as math equations and graphics.&lt;/p&gt;

&lt;p&gt;Apparently LP is more for those who want to understand your source code (including your future self!) than for end-users of your package. For most users, they probably just want to read the help page of the function, in which case they just type the question mark in R, e.g., &lt;code&gt;?mle_gamma&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;chunk-references&#34;&gt;Chunk References&lt;/h1&gt;

&lt;p&gt;I mentioned before that we could label code chunks and reference them to compose a bigger code chunk. Now I show a simple example of simulating from a bivariate Normal distribution. A bit background:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$$\left[\begin{array}{c}
X\\
Y
\end{array}\right]\sim\mathcal{N}\left(\left[\begin{array}{c}
\mu_{X}\\
\mu_{Y}
\end{array}\right],\left[\begin{array}{cc}
\sigma_{X}^{2} &amp;amp; \rho\sigma_{X}\sigma_{Y}\\
\rho\sigma_{X}\sigma_{Y} &amp;amp; \sigma_{Y}^{2}
\end{array}\right]\right)$$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;One way to simulate from the bivariate Normal distribution is to first simulate from the marginal distribution &lt;code&gt;\(f(x)\)&lt;/code&gt;, then simulate from &lt;code&gt;\(f(y|x)\)&lt;/code&gt;. Below is the final simulation function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#&#39; Sample from a bivariate Normal distribution
#&#39; 
#&#39; Simulate x from the marginal f(x), then y from f(y|x), and
#&#39; the pair (x, y) has the desired joint distribution.
#&#39; @param n the desired sample size
#&#39; @param m1,m2 the means of X and Y, respectively
#&#39; @param s1,s2 the standard deviations of X and Y, respectively
#&#39; @param rho the correlation coefficient between X and Y
#&#39; @return A numeric matrix of two columns X and Y.
#&#39; @export
rbinormal = function(n, m1 = 0, m2 = 0, s1 = 1, s2 = 1, rho = 0) {
  # warning: this is not an efficient implementation; you should use
  # vectorization in practice
  res = replicate(n, {
    x = rnorm(1, m1, s1)  # simulate from the marginal f(x)
    m2cond = m2 + s2/s1 * rho * (x - m1)  # conditional mean of Y
    s2cond = sqrt(1 - rho^2) * s2  # conditional sd of Y
    y = rnorm(1, m2cond, s2cond)  # simulate from the conditional f(y|x)
    c(x, y)
  })
  res = t(res)  # transpose the 2xn matrix to nx2
  colnames(res) = c(&#39;X&#39;, &#39;Y&#39;)
  res
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are reading the &lt;a href=&#34;https://github.com/yihui/rlp/edit/master/vignettes/LP-demo1.Rmd&#34;&gt;source R Markdown document&lt;/a&gt;, you will see &lt;code&gt;&amp;lt;&amp;lt;simulate_x&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&amp;lt;simulate_y&amp;gt;&amp;gt;&lt;/code&gt; instead of the real R code. The token &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; denotes the code chunks defined below with the chunk labels &lt;code&gt;simulate_x&lt;/code&gt; and &lt;code&gt;simulate_y&lt;/code&gt;, respectively:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x = rnorm(1, m1, s1)  # simulate from the marginal f(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The marginal distribution of &lt;code&gt;\(X\)&lt;/code&gt; is &lt;code&gt;\(\mathcal{N}(\mu_X, \sigma^2_X)\)&lt;/code&gt;, and we know the conditional distribution of &lt;code&gt;\(Y|X\)&lt;/code&gt; is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$$Y|X=x \sim \mathcal{N}\left(\mu_{Y}+\frac{\sigma_{Y}}{\sigma_{X}}\rho(x-\mu_{X}),\,(1-\rho^{2})\sigma_{Y}^{2}\right)$$&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m2cond = m2 + s2/s1 * rho * (x - m1)  # conditional mean of Y
s2cond = sqrt(1 - rho^2) * s2  # conditional sd of Y
y = rnorm(1, m2cond, s2cond)  # simulate from the conditional f(y|x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I just reused these code chunks in the function body of &lt;code&gt;rbinormal()&lt;/code&gt;, instead of cutting and pasting the code there. As usual, I can test my function by examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(1229)
z = rbinormal(500, m1 = -1, s1 = 5, m2 = 3, s2 = .5, rho = -.7)
par(mar = c(4, 4, .2, .1))
plot(z, pch = 20, col = &#39;darkgray&#39;)
# the center of the bivariate dist
points(-1, 3, pch = 19, col = &#39;red&#39;, cex = 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.yihui.name/figures/LP-demo1/binom-scatter-1.png&#34; alt=&#34;plot of chunk binom-scatter&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this example, I factored out the code from the main function as two separate code chunks, and explained each later, instead of inserting the explanations in the middle of the function body. Again, the simulation code in this example is computationally inefficient, and it is only for demo purposes&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:It-is-straightfo&#34;&gt;&lt;a href=&#34;#fn:It-is-straightfo&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h1 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;This document has demonstrated that LP can be useful for package authors to explain their code in fine detail, which may not be easy to achieve by only using comments in code. Not everyone needs or wants to understand your source code, but clear explanations of your code will benefit both your future self, and more importantly, attract potential collaborators and contributors, hence increase the &lt;a href=&#34;http://en.wikipedia.org/wiki/Bus_factor&#34;&gt;bus factor&lt;/a&gt; of your software packages, in this era of &amp;ldquo;&lt;a href=&#34;https://github.com&#34;&gt;social coding&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:This-is-not-enti&#34;&gt;This is not entirely surprising, considering Knuth&amp;rsquo;s original implementation of LP using TeX and Pascal. &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:This-is-not-enti&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:By-readable-I-me&#34;&gt;By &amp;ldquo;readable&amp;rdquo;, I mean no backslashes. Raw LaTeX math code does not count. At least it is not readable to me. I can never figure out where the brackets start and end by reading raw LaTeX code, for example, when there are more than three pairs of brackets. &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:By-readable-I-me&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:If-you-read-the&#34;&gt;If you read the R Markdown source of this document, you will see I did not copy the Makefile here, but used the &lt;code&gt;cat&lt;/code&gt; engine to write the Makefile dynamically to the output. &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:If-you-read-the&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:Or-set-the-R-scr&#34;&gt;Or set the R scripts to be read-only, e.g., use &lt;code&gt;Sys.chmod(mode = &#39;0444&#39;)&lt;/code&gt; in R. &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:Or-set-the-R-scr&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:Remember-to-repl&#34;&gt;Remember to replace &lt;code&gt;rlp&lt;/code&gt; with your package name. &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:Remember-to-repl&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:If-you-use-devto&#34;&gt;If you use &lt;strong&gt;devtools&lt;/strong&gt;, please note it does not build vignettes by default, so you have to call &lt;code&gt;devtools::install(..., build_vignettes = TRUE)&lt;/code&gt; &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:If-you-use-devto&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:The-mean-of-the&#34;&gt;The mean of the Gamma distribution is &lt;code&gt;\(\alpha/\beta\)&lt;/code&gt;. &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:The-mean-of-the&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:It-is-straightfo&#34;&gt;It is straightforward to make it much more efficient by vectorization, i.e., instead of using &lt;code&gt;replicate()&lt;/code&gt;, which is basically a loop to generate one random number at a time, you can just generate all &lt;code&gt;n&lt;/code&gt; random numbers in one step: &lt;code&gt;x = rnorm(n, m1, s1)&lt;/code&gt;, and &lt;code&gt;y = rnorm(n, m2cond, s2cond)&lt;/code&gt;. &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:It-is-straightfo&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

        
      </description>
    </item>
    
    <item>
      <title>knitr showcase</title>
      <link>https://yihui.name/knitr/demo/showcase/</link>
      <pubDate>Mon, 11 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/showcase/</guid>
      <description>
        

&lt;p&gt;Below are links related to &lt;strong&gt;knitr&lt;/strong&gt; in other websites and applications (if you have more, or you do not like your links to be listed here, please feel free to let me know).&lt;/p&gt;

&lt;h2 id=&#34;websites&#34;&gt;Websites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rpubs.com/&#34;&gt;RPubs&lt;/a&gt;: Easy web publishing from R&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kbroman.github.io/knitr_knutshell&#34;&gt;knitr in a knutshell&lt;/a&gt;, a short tutorial by Karl Broman&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ats.ucla.edu/stat/r/&#34;&gt;R learning resources&lt;/a&gt; at UCLA by Joshua Wiley et al (dynamically built with &lt;strong&gt;knitr&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sharelatex.com/learn/Knitr&#34;&gt;knitr on ShareLaTeX&lt;/a&gt; (an online LaTeX editor)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gallery.rcpp.org/&#34;&gt;Rcpp Gallery&lt;/a&gt;: Articles and code examples for the &lt;strong&gt;Rcpp&lt;/strong&gt; package&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://slidify.org/&#34;&gt;Slidify&lt;/a&gt;: reproducible HTML5 slides made easy&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://onepager.togaware.com/&#34;&gt;One Page R&lt;/a&gt; Literate Data Science by Graham Williams&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scribd.com/doc/93360631/Presentation&#34;&gt;Reproducible graphics with R and ggplot2&lt;/a&gt; by Baptiste Auguié&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/johnmyleswhite/MLNotes&#34;&gt;ML/stats notes&lt;/a&gt; by John Myles White&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://alea.fr.eu.org/pages/intro-R&#34;&gt;A French introduction to R&lt;/a&gt; by Julien Barnier (also see &lt;a href=&#34;http://cran.r-project.org/other-docs.html&#34;&gt;CRAN&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Applications of R in Business Contest (&lt;a href=&#34;http://www.inside-r.org/howto/knitr-elegant-flexible-and-fast-dynamic-report-generation-r&#34;&gt;knitr&amp;rsquo;s entry&lt;/a&gt;; &lt;a href=&#34;http://www.revolutionanalytics.com/news-events/news-room/2012/applications-of-r-in-business-competition.php&#34;&gt;announcement&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;book-reviews&#34;&gt;Book Reviews&lt;/h2&gt;

&lt;p&gt;Below is a list of the book reviews on &lt;a href=&#34;http://amzn.com/1498716962&#34;&gt;Dynamic Documents with R and knitr&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href=&#34;http://www.jstatsoft.org/v56/b02/&#34;&gt;book review&lt;/a&gt; in the &lt;em&gt;Journal of Statistical Software&lt;/em&gt; by Amelia McNamara&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;http://www.maa.org/press/maa-reviews/dynamic-documents-with-r-and-knitr-0&#34;&gt;book review&lt;/a&gt; in &lt;em&gt;MAA Reviews&lt;/em&gt; by Peter Rabinovitch&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;http://www.tug.org/books/reviews/tb109reviews-xie.html&#34;&gt;book review&lt;/a&gt; on &lt;a href=&#34;http://www.tug.org/books/#xie-knitr&#34;&gt;TUGboat&lt;/a&gt; by Boris Veytsman&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rpubs.com/safeisrisky/knitr_booksummary&#34;&gt;A book review&lt;/a&gt; on RPubs by RK&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dx.doi.org/10.1080/00031305.2015.1014676&#34;&gt;A book review&lt;/a&gt; in &lt;em&gt;The American Statistician&lt;/em&gt; by Quan Zhang&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solutions&#34;&gt;Solutions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://biostat.mc.vanderbilt.edu/wiki/Main/KnitrHowto&#34;&gt;a knitr Howto page&lt;/a&gt; in Vanderbilt Biostatistics Wiki&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kieranhealy.org/blog/archives/2014/01/23/plain-text/&#34;&gt;Plain Text, Papers, Pandoc&lt;/a&gt; by Kieran Healy&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sachsmc/tufterhandout&#34;&gt;R Markdown output formats for Tufte-style handouts&lt;/a&gt; by Michael Sachs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://brendanrocks.com/blogging-with-rmarkdown-knitr-jekyll/&#34;&gt;Blogging with Rmarkdown, knitr, and Jekyll&lt;/a&gt; by Brendan Rocks&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jfisher-usgs.github.com/r/2012/07/03/knitr-jekyll/&#34;&gt;Blog with Knitr and Jekyll&lt;/a&gt; by Jason C Fisher&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gastonsanchez.wordpress.com/2012/11/19/creating-html5-slides-with-rstudio-knitr-and-pandoc/&#34;&gt;Creating HTML5 slides with RStudio, knitr and pandoc&lt;/a&gt; by Gaston Sanchez&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jimhester/knitrBootstrap&#34;&gt;A framework to create bootstrap styled HTML reports from knitr Rmarkdown&lt;/a&gt; by Jim Hester (a &lt;a href=&#34;http://htmlpreview.github.io/?https://raw.github.com/jimhester/knitrBootstrap/master/inst/examples/all.html&#34;&gt;preview&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fishyoperations.com/creating-a-business-dashboards-in-r.html&#34;&gt;Creating a Business Dashboard in R&lt;/a&gt; by Bart Smeets&lt;/li&gt;
&lt;li&gt;Carl Boettiger has cool blog posts demonstrating how to publish a post to Wordpress.com with knitr and RWordPress purely in R, with images uploaded to &lt;a href=&#34;http://www.carlboettiger.info/archives/3974&#34;&gt;Imgur&lt;/a&gt; and &lt;a href=&#34;http://www.carlboettiger.info/archives/3988&#34;&gt;Flickr&lt;/a&gt; respectively&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://geospaced.blogspot.com/2012/05/knitr-cactus-twitterbootstrap-jquery.html&#34;&gt;knitr + cactus + TwitterBootstrap + Jquery&lt;/a&gt; by Barry Rowlingson (includes a smart use of jQuery to add links to R functions)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lamages.blogspot.co.uk/2012/05/interactive-reports-in-r-with-knitr-and.html&#34;&gt;Interactive reports in R with knitr and RStudio &lt;/a&gt; and &lt;a href=&#34;http://lamages.blogspot.com/2012/05/interactive-html-presentation-with-r.html&#34;&gt;Interactive HTML presentation with R, googleVis, knitr, pandoc and slidy &lt;/a&gt; by Markus Gesmann&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tex.stackexchange.com/a/87897/9128&#34;&gt;Stacked bar plots with several descriptive nodes&lt;/a&gt; by ADP&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wkmor1.wordpress.com/2012/07/01/rchievement-of-the-day-3-bloggin-from-r-14/&#34;&gt;Blogging from R to Wordpress&lt;/a&gt; by William K. Morris&lt;/li&gt;
&lt;li&gt;A demo on using &lt;code&gt;tidy=TRUE&lt;/code&gt; or the listings environment so code chunks can stay inside page margins (&lt;a href=&#34;http://tex.stackexchange.com/q/41471/9128&#34;&gt;link to StackExchange&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lincolnmullen.com/blog/how-to-use-knitr-with-a-rakefile/&#34;&gt;How to Use Knitr with a Rakefile&lt;/a&gt; by Lincoln A. Mullen&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ericpgreen.com/reproducible-research-with-word/&#34;&gt;Reproducible Research with Word?&lt;/a&gt; by Eric P. Green&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ramnathv.github.io/slidifyExamples/examples/popcornjs&#34;&gt;knitr, slidify, and Popcorn.js&lt;/a&gt; by Ramnath Vaidyanathan (&lt;a href=&#34;https://github.com/yihui/knitr/issues/466&#34;&gt;#466&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chogg.name/blog/2015/03/19/nanoc_knitr/&#34;&gt;Transparent, reproducible blogging with nanoc and knitr&lt;/a&gt; by Charles Hogg&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lukemiller.org/index.php/2015/11/using-knitr-and-r-to-make-instructorstudent-handout-versions/&#34;&gt;Using knitr and R to make instructor/student handout versions&lt;/a&gt; by Luke Miller&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/asardaes/R-LaTeX-Template&#34;&gt;Thesis template to generate LaTeX files using R with knitr&lt;/a&gt; by Alexis Sarda&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;r-packages&#34;&gt;R Packages&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/baptiste/cda/wiki&#34;&gt;The Github Wiki of the cda package&lt;/a&gt; by Baptiste Auguie&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tengfei.github.com/ggbio/&#34;&gt;website of ggbio package&lt;/a&gt; by Tengfei Yin&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sampsurf.r-forge.r-project.org/&#34;&gt;The sampSurf Package&lt;/a&gt; by Jeffrey H. Gove&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RevolutionAnalytics/RHadoop/wiki&#34;&gt;the RHadoop Wiki&lt;/a&gt; by Revolution Analytics&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xavier-fim.net/packages/ggmcmc/&#34;&gt;The ggmcmc package examples&lt;/a&gt; by Xavier Fernández-i-Marín&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/package=tabplot&#34;&gt;tabplot: Tableplot, a visualization of large datasets&lt;/a&gt; by Martijn Tennekes and Edwin de Jonge (see its PDF vignette)&lt;/li&gt;
&lt;li&gt;the &lt;a href=&#34;https://github.com/djmurphy420/ggplot2-transition-guide&#34;&gt;ggplot2 transition guide&lt;/a&gt; to version 0.9.0 by Dennis Murphy et al&lt;/li&gt;
&lt;li&gt;a few packages on Bioconductor: &lt;a href=&#34;http://www.bioconductor.org/packages/2.12/bioc/vignettes/ReportingTools/inst/doc/knitr.html&#34;&gt;ReportingTools&lt;/a&gt; and &lt;a href=&#34;http://www.bioconductor.org/packages/2.12/bioc/html/RGalaxy.html&#34;&gt;RGalaxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/talgalili/dendextend&#34;&gt;the dendextend package&lt;/a&gt; by Tal Galili&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chnosz.net/vignettes/anintro.html&#34;&gt;An Introduction to CHNOSZ&lt;/a&gt; vignette by Jeffrey M. Dick using Tufte style&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;courses&#34;&gt;Courses&lt;/h2&gt;

&lt;p&gt;Below is a lecture on &lt;strong&gt;knitr&lt;/strong&gt; kindly shared by Roger Peng for the Coursera
course &lt;a href=&#34;https://www.coursera.org/course/compdata&#34;&gt;&lt;em&gt;Computing for Data Analysis&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;450&#34; src=&#34;//www.youtube.com/embed/YcJb1HBc-1Q&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;And below are some other courses related to &lt;strong&gt;knitr&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kbroman.github.io/Tools4RR/&#34;&gt;BMI 826-003&lt;/a&gt; (Tools for Reproducible Research) by Karl Broman, University of Wisconsin-Madison&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/course/repdata&#34;&gt;Reproducible Research&lt;/a&gt; by Roger Peng, Coursera&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.unomaha.edu/mahbubulmajumder/data-science/fall-2014/&#34;&gt;Introduction to data science&lt;/a&gt; by Mahbubul Majumder, University of Nebraska at Omaha&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fonnesbeck.github.com/Bios301/&#34;&gt;BIOS 301&lt;/a&gt; (Introduction to Statistical Computing) by Chris Fonnesbeck, Vanderbilt University&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.calvin.edu/~rpruim/courses/m344/S12/&#34;&gt;Math 344&lt;/a&gt; (Probability and Statistics) by Randall Pruim, Calvin College&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.math.montana.edu/~jimrc/classes/stat506/&#34;&gt;Stat 506&lt;/a&gt; (Advanced Regression) by Jim Robison-Cox, Montana State University&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www1.appstate.edu/~arnholta/classes/STT3820/index.htm&#34;&gt;STT 3820&lt;/a&gt; by Alan T. Arnholt, Appalachian State University&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.math.mcmaster.ca/~bolker/classes/m747/&#34;&gt;Math 747&lt;/a&gt; (Topics in math biology) by Ben Bolker, McMaster University&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.personal.psu.edu/yoh5109/319spring2013/&#34;&gt;STAT 319&lt;/a&gt; (Applied Statistics in Science) by Yuan Huang, Penn State University (also see the tutorial &lt;a href=&#34;https://onlinecourses.science.psu.edu/statprogram/markdown&#34;&gt;Create Dynamic R Statistical Reports Using R Markdown&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bcb.dfci.harvard.edu/~aedin/courses/ReproducibleResearch/&#34;&gt;some notes&lt;/a&gt; on reproducible research by Aedin Culhane, Harvard University&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.stat.rice.edu/~marina/stat622.html&#34;&gt;STAT 622&lt;/a&gt; (Bayesian Data Analysis) by Marina Vannucci, Rice University&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://genome.duke.edu/labs/engelhardt/courses/cbb540.html&#34;&gt;STA613/CBB540&lt;/a&gt; (Statistical methods in computational biology) by Barbara Engelhardt, Duke University&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://statacumen.com/teaching/sc1/&#34;&gt;Stat 590&lt;/a&gt; (Statistical Computing) by Erik Erhardt, University of New Mexico&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://onlinecourses.science.psu.edu/stat497r/node/101&#34;&gt;STAT 497C&lt;/a&gt; (Topics in R Statistical Language) by Eric Nord, Penn State University&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.stat.washington.edu/~hoff/courses/567/&#34;&gt;CSSS-Stat 567&lt;/a&gt; (Statistical Analysis of Social Networks) by Peter Hoff, University of Washington&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msemac.redwoods.edu/~darnold/math15/&#34;&gt;Math 15&lt;/a&gt; (Statistics) by David Arnold, College of the Redwoods&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.stat.ubc.ca/~jenny/STAT545A/&#34;&gt;STAT 545A&lt;/a&gt; Exploratory Data Analysis by Jennifer Bryan, University of British Columbia&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.stat.purdue.edu/~varao/STAT545/main.html&#34;&gt;STAT545&lt;/a&gt; Introduction to Computational Statistics, by Vinayak Rao, Purdue University&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stat.duke.edu/courses/Fall14/sta101.001/&#34;&gt;Sta 101&lt;/a&gt; Data Analysis and Statistical Inference, by Mine Çetinkaya-Rundel, Duke University&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://strata.uga.edu/6370/&#34;&gt;GEOL 6370&lt;/a&gt; Data Analysis in the Geosciences, by Steven M. Holland, University of Georgia&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;workshops-and-presentations&#34;&gt;Workshops and Presentations&lt;/h2&gt;

&lt;p&gt;Below is a tutorial kindly made and shared by Joshua Wiley:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;450&#34; src=&#34;//www.youtube.com/embed/p2VBzhLVz3o&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;More text versions of presentations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/jennybc/new-tools-and-workflows-for-data-analysis&#34;&gt;New tools and workflows for data analysis&lt;/a&gt; by Jennifer Bryan (&lt;a href=&#34;http://www.fields.utoronto.ca/video-archive/2015/02/318-4374&#34;&gt;video&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.maths.lancs.ac.uk/~rowlings/Teaching/UseR2012/&#34;&gt;Geospatial Data in R and Beyond&lt;/a&gt; by Barry Rowlingson&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://davenportspatialanalytics.squarespace.com/blog/2012/6/19/notes-from-a-recent-spatial-r-class-i-gave.html&#34;&gt;Broom Spatial R Class&lt;/a&gt; by Frank Davenport (&lt;a href=&#34;https://dl.dropbox.com/u/9577903/broomspatial.pdf&#34;&gt;PDF&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://euclid.psych.yorku.ca/datavis.ca/courses/VCD/R/output/&#34;&gt;Visualizing Categorical Data&lt;/a&gt; by Michael Friendly&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ling.upenn.edu/~joseff/avml2012/&#34;&gt;ggplot2 workshop notes&lt;/a&gt; by Josef Fruehwald for AVML 2012&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.homepages.ucl.ac.uk/~uctpfos/files/introPHD.html&#34;&gt;R Introduction for UCL PhDs&lt;/a&gt; by Florian Oswald at University College London&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zfazekas.github.com/teaching/2013/02/17/ecpr-intro-to-R/&#34;&gt;Introduction to R lectures for ECPR Winter School 2013&lt;/a&gt; by Zoltán Fazekas, University of Southern Denmark&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dl.dropbox.com/u/4149392/R_for_the_brave.pdf&#34;&gt;R for the brave&lt;/a&gt; by Will Pearse&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lcolladotor.github.com/Rmd-intro/&#34;&gt;Introduction to knitr: The R Markdown (Rmd) format&lt;/a&gt; by L. Collado Torres for JHSPH Biostat computing club&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mwfrost.com/r_slides/r_slides.html&#34;&gt;Stop Clicking, Start typing&lt;/a&gt; by Matt Frost&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/wdkz/rstudio-13866958&#34;&gt;そろそろRStudioの話でもしてみようと思う&lt;/a&gt; by 和田 計也&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/vinayakh/introduction-to-data-analysis-and-visualization-using-r&#34;&gt;Introduction to Data Analysis and Visualization using R&lt;/a&gt; by Vinayak Hedge&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://metvurst.wordpress.com/2013/07/15/creating-publication-quality-graphics-using-r-3/&#34;&gt;Creating publication quality graphics using R&lt;/a&gt; by Tim Salabim&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/umd-byob/byob/tree/master/presentations/2013/0903-knitr_reproducible_research&#34;&gt;Reproducible Research Using Knitr/R&lt;/a&gt; by Keith Hughitt&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://theanalysisofdata.com/&#34;&gt;The Analysis of Data&lt;/a&gt; by Guy Lebanon (written with R Markdown)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.crcpress.com/product/isbn/9781482203530&#34;&gt;Dynamic Report Generation with R and knitr&lt;/a&gt; by Yihui Xie (written with LyX + the &lt;code&gt;knitr&lt;/code&gt; module)

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.crcpress.com/product/isbn/9781498716963&#34;&gt;Dynamic Report Generation with R and knitr, Second Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.matthewjockers.net/2013/09/03/tawr/&#34;&gt;Text Analysis with R for Students of Literature&lt;/a&gt; by Matthew L. Jockers&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leanpub.com/dataanalysisforthelifesciences&#34;&gt;Data Analysis for the Life Sciences&lt;/a&gt; by Rafael Irizarry and Michael Love&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.crcpress.com/product/isbn/9781466590731&#34;&gt;Using R for Introductory Statistics, Second Edition&lt;/a&gt; by John Verzani&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://shop.oreilly.com/product/0636920028352.do&#34;&gt;Learning R: A Step-by-Step Function Guide to Data Analysis&lt;/a&gt; by Richard Cotton (written with AsciiDoc + &lt;code&gt;knitr&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://derekogle.com/IFAR/&#34;&gt;Introductory Fisheries Analysis with R&lt;/a&gt; by Derek H. Ogle&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.math.smith.edu/~nhorton/sleuth/&#34;&gt;The Statistical Sleuth In R&lt;/a&gt; by Nicholas Horton, Kate Aloisio, and Ruobing Zhang (&lt;code&gt;knitr&lt;/code&gt; + LaTeX)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/?hl=en&amp;amp;fromgroups#!topic/knitr/bYj3Zn11hjE&#34;&gt;Regression Modeling Strategies&lt;/a&gt; (&lt;code&gt;knitr&lt;/code&gt; + LaTeX)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.baylor.edu/rlatentvariable/&#34;&gt;Latent Variable Modeling using R: A Step-By-Step Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yihui.name/en/guestbook/#comment-456270476&#34;&gt;Biolostatistical Design and Analysis using R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.experimentalecon.com/papers/estats.pdf&#34;&gt;Statistics for Experimental Economists: Elegant Analysis with R&lt;/a&gt; by Mark A. Olson&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ksbapp.com/&#34;&gt;R과 Knitr를 활용한 데이터 연동형 문서 만들기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.imta.gob.mx/biblioteca/libros_html/el-arte-de-programar-en-r/&#34;&gt;El arte de programar en R: un lenguaje para la estadística&lt;/a&gt; by Julio Sergio Santana and Efraín Mateos Farfán&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://genomicsclass.github.io/book/&#34;&gt;PH525x series - Biomedical Data Science&lt;/a&gt; by Rafael Irizarry and Michael Love&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://a.co/0axoWr6&#34;&gt;Data Science for Fundraising: Build Data-Driven Solutions Using R&lt;/a&gt; by Ashutosh Nandeshwar and Rodger Devine&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;papers-and-reports&#34;&gt;Papers and reports&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nature.com/articles/s41559-017-0160&#34;&gt;Our path to better science in less time using open data science tools&lt;/a&gt; by Julia S. Stewart Lowndes &lt;em&gt;et al&lt;/em&gt;, Nature Ecology &amp;amp; Evolution &lt;strong&gt;1&lt;/strong&gt;, Article number: 0160 (2017)&lt;/li&gt;
&lt;li&gt;Eglen, SJ; Weeks, M; Jessop, M; Simonotto, J; Jackson, T; Sernagor, E. A data repository and analysis framework for spontaneous neural activity recordings in developing retina. GigaScience 2014, 3:3 &lt;a href=&#34;http://dx.doi.org/10.1186/2047-217X-3-3&#34;&gt;http://dx.doi.org/10.1186/2047-217X-3-3&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;plus &lt;a href=&#34;http://blogs.biomedcentral.com/gigablog/2014/03/26/carmen-reproducible-research-and-push-button-papers/&#34;&gt;an interview&lt;/a&gt; to the first author&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.biomedcentral.com/gigablog/2014/04/16/qa-on-dynamic-documents/&#34;&gt;Q&amp;amp;A on dynamic documents&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nature.com/news/programming-tools-adventures-with-r-1.16609&#34;&gt;Programming tools: Adventures with R&lt;/a&gt; by Sylvia Tippmann, &lt;em&gt;Nature&lt;/em&gt; &lt;strong&gt;517&lt;/strong&gt;, 109–110 (01 January 2015) doi:10.1038/517109a&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dx.doi.org/10.1038/nbt.3202&#34;&gt;Rebooting review&lt;/a&gt;, &lt;em&gt;Nature Biotechnology&lt;/em&gt; &lt;strong&gt;33&lt;/strong&gt;, 319 (2015)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dx.doi.org/10.1038/520276a&#34;&gt;Rule rewrite aims to clean up scientific software&lt;/a&gt;, &lt;em&gt;Nature&lt;/em&gt; &lt;strong&gt;520&lt;/strong&gt;, 276–277 (2015)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.britishecologicalsociety.org/publications/guides-to/&#34;&gt;A Guide to Reproducible Code&lt;/a&gt; (Guides to Better Science), by the British Ecological Society&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kff.org/health-costs/report/2017-employer-health-benefits-survey/&#34;&gt;2017 Employer Health Benefits Survey&lt;/a&gt; by Kaiser Family Foundation (2017)

&lt;ul&gt;
&lt;li&gt;Referenced by the New York Times article &amp;ldquo;&lt;a href=&#34;https://www.nytimes.com/2017/09/19/health/health-insurance-premiums-employer.html&#34;&gt;While Premiums Soar Under Obamacare, Costs of Employer-Based Plans Are Stable&lt;/a&gt;&amp;ldquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stanford.edu/~dbroock/broockman_kalla_aronow_lg_irregularities.pdf&#34;&gt;Irregularities in LaCour (2014)&lt;/a&gt; by David Broockman, Joshua Kalla, and Peter Aronow, a rebuttal paper with retraction letter from Donald P. Green

&lt;ul&gt;
&lt;li&gt;LaCour, Michael J. &amp;amp; Donald P. Green. 2014. &amp;ldquo;When contact changes minds: An experiment on transmission of support for gay equality[2].&amp;rdquo; Science 346(6215): 1366.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Piwowar HA, Vision TJ. (2013) Data reuse and the open data citation advantage. PeerJ 1:e175 &lt;a href=&#34;http://dx.doi.org/10.7717/peerj.175&#34;&gt;http://dx.doi.org/10.7717/peerj.175&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www3.nd.edu/~mclark19/projects.html&#34;&gt;Some great short courses&lt;/a&gt; on R, generalized additive models, and machine learning, etc, by Michael Clark, Center for Social Research, Notre Dame&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JWiley/mediation&#34;&gt;An Introduction to Mediation Analysis&lt;/a&gt; by Joshua F. Wiley&lt;/li&gt;
&lt;li&gt;ORANGE REPORT: &lt;a href=&#34;http://secure.pensionsmyndigheten.se/download/18.76cf683d13f231c03cd1bc/Orange+Report+2012.pdf&#34;&gt;Annual Report of the Swedish Pension System&lt;/a&gt; by the Swedish Pensions Agency&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.alex-singleton.com/2011-census-open-atlas-project/&#34;&gt;2011 Census Open Atlas Project&lt;/a&gt; by Alex Singleton&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://arxiv.org/abs/1312.7158&#34;&gt;openWAR&lt;/a&gt;: An Open Source System for Evaluating Overall Player Performance in Major League Baseball&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.g3journal.org/content/early/2013/10/30/g3.113.008565/suppl/DC1&#34;&gt;Design and Analysis of Bar-seq Experiments&lt;/a&gt; by Robinson et al., 2014&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/timchurches/meta-analyses&#34;&gt;Data and program code for meta-analyses of population health and health services research questions&lt;/a&gt; by Tim Churches&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/EBI-predocs/knitr-example&#34;&gt;Genomic analysis using R and knitr&lt;/a&gt; by Konrad Rudolph&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grattaninstitute/Assessing-2016-Super-tax-reforms&#34;&gt;Assessing the 2016 Budget reforms&lt;/a&gt; by John Daley and Brendan Coates&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://s3.amazonaws.com/files.consumerfinance.gov/f/documents/BecomingCreditVisible_Data_Point_Final.pdf&#34;&gt;CFPB Data Point: Becoming Credit Visible&lt;/a&gt; by the CFPB Office of Research&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tomwallis/cnn_texture_appearance&#34;&gt;A parametric texture model based on deep convolutional features closely matches texture appearance for humans&lt;/a&gt; by Wallis et al.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.biorxiv.org/content/biorxiv/suppl/2016/11/21/086710.DC1/086710-1.pdf&#34;&gt;Revisiting the effect of red on competition in humans (supplementary information)&lt;/a&gt; by Laura Fortunato and Aaron Clauset&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f1000research.com/articles/7-1096/v1&#34;&gt;Epiviz Web Components: reusable and extensible component library to visualize functional genomic datasets&lt;/a&gt; by Jayaram Kancherla, Alexander Zhang, Brian Gottfried, and Hector Corrada Bravo&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;wrappers-in-other-languages&#34;&gt;Wrappers in other languages&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ropensci/knitr-ruby&#34;&gt;knitr-ruby&lt;/a&gt;: a Ruby wrapper&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fhirschmann/Flask-FlatPages-Knitr&#34;&gt;Flask-FlatPages-Knitr&lt;/a&gt;: Knitr preprocessing for Flask-FlatPages&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;blog-posts&#34;&gt;Blog posts&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://galahad.well.ox.ac.uk/repro/&#34;&gt;Using knitr and pandoc to create reproducible scientific reports&lt;/a&gt; by Peter Humburg&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://civilstat.com/?p=1521&#34;&gt;Reproducible research, training wheels, and knitr&lt;/a&gt; by Jerzy Wieczorek&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.noamross.net/blog/2013/1/7/collaborating-with-r.html&#34;&gt;Don&amp;rsquo;t R alone!&lt;/a&gt; A guide to tools for collaboration with R by Noam Ross&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jeromyanglim.blogspot.com.au/2012/05/getting-started-with-r-markdown-knitr.html&#34;&gt;Getting Started with R Markdown, knitr, and Rstudio 0.96&lt;/a&gt;, &lt;a href=&#34;http://jeromyanglim.blogspot.com/2012/06/how-to-convert-sweave-latex-to-knitr-r.html&#34;&gt;How to Convert Sweave LaTeX to knitr R Markdown&lt;/a&gt; and &lt;a href=&#34;http://jeromyanglim.blogspot.com/2012/06/converting-sweave-latex-to-knitr-latex.html&#34;&gt;Converting Sweave LaTeX to knitr LaTeX: A case study&lt;/a&gt; by Jeromy Anglim&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://conjugateprior.org/2013/03/tools-for-making-a-paper/&#34;&gt;Tools for making a paper&lt;/a&gt; by Will Lowe&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.revolutionanalytics.com/2012/09/data-reporting-knitr.html&#34;&gt;Integrate data and reporting on the Web with knitr&lt;/a&gt; by me as a guest blog post on Revolution Analytics&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rpubs.com/JoFrhwld/UseR_Sept&#34;&gt;knitr: A flexible R authoring tool&lt;/a&gt; (HTML5 slides) by Josef Fruehwald&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://citizen-statistician.org/2012/10/08/planting-seeds-of-reproducibility-with-knitr-and-markdown/&#34;&gt;Planting seeds of reproducibility with knitr and markdown&lt;/a&gt; by Mine Çetinkaya-Rundel (the Citizen-Statistician blog)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://biostat.mc.vanderbilt.edu/wiki/Main/GradStudentsHelpfulExamples&#34;&gt;A closer look at &amp;ldquo;How economists get tripped up by statistics&amp;rdquo;&lt;/a&gt; by Laurie Samuels&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://timelyportfolio.blogspot.com/2012/04/latex-allergy-cured-by-knitr.html&#34;&gt;Latex Allergy Cured by knitr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://timelyportfolio.blogspot.com/2012/04/knitr-performance-report-attempt-1.html&#34;&gt;knitr Performance Report-Attempt 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://aliquote.org/memos/2012/04/02/easier-literate-programming-with-r&#34;&gt;Easier literate programming with R&lt;/a&gt; by Christophe Lalanne&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.blogofolio.de/2012/05/knitr-eine-alternative-zu-sweave/&#34;&gt;knitR - eine Alternative zu Sweave?&lt;/a&gt; by Christian B.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.felixriedel.com/2012/05/better-r-support-in-pygments-by-monkey-patching-slexer/&#34;&gt;Better R support in pygments by monkey patching SLexer&lt;/a&gt; by f3lix&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xccds1977.blogspot.com/2012/05/knitr.html&#34;&gt;被knitr包给震撼到了&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/xccds&#34;&gt;@xccds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://torsneyt.wordpress.com/2012/05/19/reproducible-research/&#34;&gt;Reproducible Research&lt;/a&gt; by Tom Torsney-Weir (on Vim and Marked)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yangzhiping.com/tech/r-markdown-knitr.html&#34;&gt;为什么Markdown+R有较大概率成为科技写作主流？&lt;/a&gt; by 阳志平&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.russellshepherd.com/d/?q=blog/governance-indicators&#34;&gt;Governance Indicators&lt;/a&gt; by Russell Shepherd&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mcfromnz.wordpress.com/2012/07/28/petrol-prices-adjusted-for-inflation/&#34;&gt;Petrol prices adjusted for inflation&lt;/a&gt; by Matt Cooper&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.revolutionanalytics.com/2012/08/creating-beautiful-reports-from-r-with-knitr.html&#34;&gt;Creating beautiful reports from R with knitr&lt;/a&gt; by David Smith&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tomtorsneyweir.com/research-notebook/&#34;&gt;An R-based Research Notebook&lt;/a&gt; by Tom Torsney-Weir&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://learningdata.wordpress.com/2012/09/30/knitr-markdown-and-your-homework/&#34;&gt;knitR, Markdown, and Your Homework&lt;/a&gt; by Jarrett Byrnes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.trestletechnology.net/2012/10/color-palettes-in-hcl-space/&#34;&gt;Color Palettes in HCL Space&lt;/a&gt; by Trestle Technology, LLC&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fellgernon.tumblr.com/post/35587597245/introduction-to-r-and-biostatistics-2012-version&#34;&gt;Introduction to R and Biostatistics&lt;/a&gt; by Leonardo Collado Torres&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://onertipaday.blogspot.com/2012/12/italian-bio-r-day-2012-slides-on.html&#34;&gt;Reproducible Research using R and Bioconductor&lt;/a&gt; by Paolo Sonego&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://reasoniamhere.com/bioinformaticians-need-lab-notebooks-too/&#34;&gt;Bioinformaticians Need Lab Notebooks Too&lt;/a&gt; by Nacho Caballero&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://machine-master.blogspot.com/2013/03/from-openoffice-noob-to-control-freak.html&#34;&gt;From OpenOffice noob to control freak: A love story with R, LaTeX and knitr&lt;/a&gt; by Christoph Molnar&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stla.overblog.com/including-an-interactive-3d-rgl-graphic-with-knitr&#34;&gt;Including an interactive 3D rgl graphic in a html report with knitr&lt;/a&gt; by Stéphane Laurent&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rprogramming.net/create-html-or-pdf-files-with-r-knitr-miktex-and-pandoc/&#34;&gt;Create HTML or PDF Files with R, Knitr, MiKTeX, and Pandoc&lt;/a&gt; by Justin Meyer&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://quantifyingmemory.blogspot.com/2013/02/reproducible-research-with-r-knitr.html&#34;&gt;Reproducible research with R, Knitr, Pandoc and Word&lt;/a&gt; by Rolf Fredheim&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dataillumination.blogspot.com/2013/03/visualizing-farmers-markets-geo-data_19.html&#34;&gt;Visualizing Farmers&amp;rsquo; Markets Geo Data using googleVis, plyr, knitr and Markdown using R&lt;/a&gt; by Peter Chen&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scribd.com/doc/132971631/NSFstats2013&#34;&gt;2013 NSF Graduate Research Fellowship statistics&lt;/a&gt; by Elson Liu&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stevencarlislewalker.wordpress.com/2013/07/12/ben-bolkers-notes-on-workflows-pipelines-reproducible-research-etc/&#34;&gt;Ben Bolker&amp;rsquo;s notes on workflows, pipelines, reproducible research, etc.&lt;/a&gt; by Steve C Walker&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.complementarytraining.blogspot.se/2013/10/playing-with-r-ggplot2-and-knitr.html&#34;&gt;Playing with R, ggplot2 and knitr&lt;/a&gt; by Mladen Jovanović&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://watson.nci.nih.gov/~sdavis/blog/a_simple_bootstrap-based_knitr_template/&#34;&gt;A simple bootstrap-based knitr template&lt;/a&gt; by Sean Davis&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.r-enthusiasts.com/2013/12/04/automated-blogging.html&#34;&gt;Automated Blogging&lt;/a&gt; by Romain François&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mango-solutions.com/wp/2014/01/how-to-avoid-scandals-using-knitr/&#34;&gt;How to avoid scandals using knitr&lt;/a&gt; by Mango Solutions&lt;/li&gt;
&lt;li&gt;Fast-track publishing using knitr: &lt;a href=&#34;http://gforge.se/?p=928&#34;&gt;Part I&lt;/a&gt;, &lt;a href=&#34;http://gforge.se/?p=960&#34;&gt;Part II&lt;/a&gt;, &lt;a href=&#34;http://gforge.se/?p=1005&#34;&gt;Part III&lt;/a&gt; by Max Gordon&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://therostrumblog.wordpress.com/2014/01/29/basic-data-frame-manipulations-in-r/&#34;&gt;Basic data-frame manipulations in R&lt;/a&gt; by THE ROSTRUM&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dataschool.io/reproducibility-is-not-just-for-researchers/&#34;&gt;Reproducibility is not just for researchers&lt;/a&gt; by Kevin Markham&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://theincidentaleconomist.com/wordpress/tools-for-statistical-writing-and-reproducible-research/&#34;&gt;Tools for statistical writing and reproducible research&lt;/a&gt; by Bill Gardner&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hereticreader/items/a3000cb7d5b17ad71731&#34;&gt;knitr ではじめるデータ分析レポート作成 ~基礎編~&lt;/a&gt; by Yu ISHIKAWA&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://reganmian.net/blog/2014/10/14/starting-data-analysiswrangling-with-r-things-i-wish-id-been-told/&#34;&gt;Starting data analysis/wrangling with R: Things I wish I&amp;rsquo;d been told&lt;/a&gt; by Stian Håklev&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deanattali.com/2015/03/24/knitrs-best-hidden-gem-spin/&#34;&gt;Knitr&amp;rsquo;s best hidden gem: spin&lt;/a&gt; by Dean Attali&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://randomlifedata.com/2015/04/why-use-knitr-for-scientific-publishing/&#34;&gt;Why use KnitR for scientific publishing?&lt;/a&gt; by Rob Les Davidson&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.predictiveanalyticsworld.com/patimes/from-code-to-reports-with-knitr-050915/&#34;&gt;From Code to Reports with knitr &amp;amp; Markdown&lt;/a&gt; by Andrew Brooks&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rayli.net/blog/data/top-10-data-mining-algorithms-in-plain-r/&#34;&gt;Top 10 data mining algorithms in plain R&lt;/a&gt; by Ray Li&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jonzelner.net/knitr/r/reproducibility/2016/06/02/knitr/&#34;&gt;Knotes on Knitr&lt;/a&gt; by Jon Zelner&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.revolutionanalytics.com/2016/08/a-reproducibility-horror-story.html&#34;&gt;A reproducibility horror story&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gdsdata.blog.gov.uk/2017/03/27/reproducible-analytical-pipeline/&#34;&gt;Reproducible Analytical Pipeline&lt;/a&gt; by Matt Upson&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elifesciences.org/elife-news/composing-reproducible-manuscripts-using-r-markdown&#34;&gt;Composing reproducible manuscripts using R Markdown&lt;/a&gt; by Chris Hartgerink, Tilburg University&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Pandoc</title>
      <link>https://yihui.name/knitr/demo/pandoc/</link>
      <pubDate>Wed, 06 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/pandoc/</guid>
      <description>
        

&lt;p&gt;Note: you are no longer recommended to use the &lt;code&gt;pandoc()&lt;/code&gt; function in &lt;strong&gt;knitr&lt;/strong&gt;. Please try the &lt;strong&gt;rmarkdown&lt;/strong&gt; package instead: &lt;a href=&#34;http://rmarkdown.rstudio.com&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The function &lt;code&gt;pandoc()&lt;/code&gt; in &lt;strong&gt;knitr&lt;/strong&gt; (since version 1.2) was designed to
convert Markdown documents to other formats such as LaTeX/PDF, HTML and Word
(odt/docx). The main idea is to minimize the command-line call by wrapping
commands into a configuration file or embedded configurations. Normally we
call Pandoc via command line like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pandoc -s --mathjax --number-sections --bibliography=foo.bib \
  -o output.html input.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is tedious to type the same command again and again. What &lt;code&gt;pandoc()&lt;/code&gt; does
is to execute the command like above in R via &lt;code&gt;system()&lt;/code&gt;, but read the
Pandoc arguments from a config file, so that we can write all arguments in
the file once, and simply call &lt;code&gt;pandoc(&#39;input.md&#39;)&lt;/code&gt; afterwards.&lt;/p&gt;

&lt;p&gt;Please follow the instructions on the &lt;a href=&#34;http://pandoc.org&#34;&gt;Pandoc
website&lt;/a&gt; to install it.&lt;/p&gt;

&lt;h2 id=&#34;absolute-beginners&#34;&gt;Absolute beginners&lt;/h2&gt;

&lt;p&gt;If you have no experience using the command line, you can try this function
without any configurations. Write a Markdown file, say, &lt;code&gt;foo.md&lt;/code&gt;, and throw
it into &lt;code&gt;pandoc()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(knitr)
pandoc(&#39;foo.md&#39;, format=&#39;html&#39;)  # HTML
pandoc(&#39;foo.md&#39;, format=&#39;latex&#39;) # LaTeX/PDF
pandoc(&#39;foo.md&#39;, format=&#39;docx&#39;)  # MS Word
pandoc(&#39;foo.md&#39;, format=&#39;odt&#39;)   # OpenDocument
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But you often need some custom options like what we showed in the beginning.
Now we explain how to pass such options to Pandoc.&lt;/p&gt;

&lt;h2 id=&#34;a-simple-example&#34;&gt;A simple example&lt;/h2&gt;

&lt;p&gt;Suppose you want to convert Markdown to HTML with arguments in the first
command line example, you can write a config file like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;t: html
s: 
mathjax: 
number-sections: 
bibliography: foo.bib
o: output.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can save it as &lt;code&gt;foo.txt&lt;/code&gt; and run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(knitr)
pandoc(&#39;input.md&#39;, format=&#39;html&#39;, config=&#39;foo.txt&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then &lt;strong&gt;knitr&lt;/strong&gt; will parse this config file and turn it into pandoc
arguments. The empty options such as &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;mathjax&lt;/code&gt; are turned to &lt;code&gt;-s&lt;/code&gt;
and &lt;code&gt;--mathjax&lt;/code&gt; respectively, and those non-empty options like &lt;code&gt;bibliography&lt;/code&gt;
and &lt;code&gt;o&lt;/code&gt; are converted to &lt;code&gt;--bibliography=foo.bib&lt;/code&gt; and &lt;code&gt;-o output.html&lt;/code&gt;
respectively.&lt;/p&gt;

&lt;h2 id=&#34;the-config-file&#34;&gt;The config file&lt;/h2&gt;

&lt;p&gt;The config file is essentially a Debian Control File. Here are some rules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the option name and value are separated by &lt;code&gt;:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;an option can have a value of multiple lines but all the following lines
have to be indented by white spaces&lt;/li&gt;
&lt;li&gt;blank lines are used to separate records (paragraphs)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first rule is simple. For the second rule, consider &lt;code&gt;bibliography&lt;/code&gt;: when
there are multiple bibliography databases to be passed to Pandoc, we can
write the config file as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bibliography: paper1.bib
  paper2.bib
  paper3.bib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, it is converted to &lt;code&gt;--bibliography=paper1.bib
--bibliography=paper2.bib --bibliography=paper3.bib&lt;/code&gt; and passed to Pandoc.&lt;/p&gt;

&lt;p&gt;For the third rule, it is useful when we define multiple output formats in
the config file; below is an example of two records for &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;latex&lt;/code&gt;
output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;t: html
s: 
mathjax: 
number-sections: 
bibliography: foo.bib
o: output.html

t: latex
latex-engine: xelatex
s: 
number-sections: 
output: test.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this config file, we can call &lt;code&gt;pandoc(&#39;input.md&#39;, format=&#39;latex&#39;,
config=&#39;foo.txt&#39;)&lt;/code&gt; and we will get a PDF file &lt;code&gt;test.pdf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The name of the config file is obtained from &lt;code&gt;getOption(&#39;config.pandoc&#39;)&lt;/code&gt; by
default, which means you can set &lt;code&gt;options(config.pandoc =
&#39;path/to/your/config.file&#39;)&lt;/code&gt; as a global option. If this option is not set,
the &lt;code&gt;pandoc()&lt;/code&gt; function will look for a file &lt;code&gt;foo.pandoc&lt;/code&gt; where &lt;code&gt;foo&lt;/code&gt; is the
base name of the input file, e.g. it looks for &lt;code&gt;test.pandoc&lt;/code&gt; if the input
file is &lt;code&gt;test.md&lt;/code&gt;. In other words, the config file has the same name as the
Markdown file except that it has a different extension.&lt;/p&gt;

&lt;h2 id=&#34;common-options&#34;&gt;Common options&lt;/h2&gt;

&lt;p&gt;Sometimes we want to share some a few common options across different output
formats. For instance, &lt;code&gt;--number-sections&lt;/code&gt; can be used for both PDF and HTML
output. The record that does not contain the &lt;code&gt;t&lt;/code&gt; tag is treated as common
options for all formats. Now we can rewrite the above config file as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;s: 
number-sections: 

t: html
mathjax: 
bibliography: foo.bib
o: output.html

t: latex
latex-engine: xelatex
output: test.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;number-sections&lt;/code&gt; are extracted to a separate record
without a &lt;code&gt;t&lt;/code&gt; tag.&lt;/p&gt;

&lt;h2 id=&#34;embedded-configurations&#34;&gt;Embedded configurations&lt;/h2&gt;

&lt;p&gt;We may want to make the Markdown file self-contained in the sense that the
configurations are embedded in it, so we do not need to rely on an external
config file. In this case, we can use a special comment &lt;code&gt;&amp;lt;!--pandoc --&amp;gt;&lt;/code&gt; in
the Markdown file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!--pandoc
t: html
s:
mathjax:
number-sections:
bibliography: foo.bib
o: output.html
--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can pass a single file to other people and they will be able to call
&lt;code&gt;pandoc()&lt;/code&gt; to convert it to the expected format.&lt;/p&gt;

&lt;p&gt;If both the config file and embedded configurations are found, they will be
combined as if they were from a single file.&lt;/p&gt;

&lt;h2 id=&#34;complete-examples&#34;&gt;Complete examples&lt;/h2&gt;

&lt;p&gt;See the example &lt;a href=&#34;https://github.com/yihui/knitr-examples&#34;&gt;084&lt;/a&gt; (using an external
&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/084-pandoc.pandoc&#34;&gt;config file&lt;/a&gt;)
and &lt;a href=&#34;https://github.com/yihui/knitr-examples&#34;&gt;088&lt;/a&gt; (using embedded configurations).&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>WordPress</title>
      <link>https://yihui.name/knitr/demo/wordpress/</link>
      <pubDate>Sun, 10 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/wordpress/</guid>
      <description>
        &lt;p&gt;The &lt;strong&gt;RWordPress&lt;/strong&gt; package allows one to publish blog posts from R to WordPress (see the &lt;code&gt;newPost()&lt;/code&gt; function in the package). A blog post is essentially an HTML fragment, and &lt;strong&gt;knitr&lt;/strong&gt; can create such a fragment from R Markdown with the &lt;strong&gt;markdown&lt;/strong&gt; package. Below is how to do this with the function &lt;code&gt;knit2wp()&lt;/code&gt; in &lt;strong&gt;knitr&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!require(&#39;RWordPress&#39;)) {
  devtools::install_github(c(&amp;quot;duncantl/XMLRPC&amp;quot;, &amp;quot;duncantl/RWordPress&amp;quot;))
}
library(RWordPress)
options(WordpressLogin = c(user = &#39;password&#39;),
        WordpressURL = &#39;https://user.wordpress.com/xmlrpc.php&#39;)
library(knitr)
knit2wp(&#39;yourfile.Rmd&#39;, title = &#39;Your post title&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically you set your login name and password as well as the url of the WordPress server (path to &lt;code&gt;xmlrpc.php&lt;/code&gt;), so that &lt;strong&gt;RWordPress&lt;/strong&gt; can send the post to the server. If you are a WordPress.com user, you may want to use the &lt;code&gt;shortcode&lt;/code&gt; option, i.e. &lt;code&gt;knit2wp(..., shortcode = TRUE)&lt;/code&gt;. See &lt;code&gt;?knit2wp&lt;/code&gt; for details.&lt;/p&gt;

&lt;p&gt;How to upload images? There are a few possibilities. One is to &lt;a href=&#34;../upload/&#34;&gt;upload images to Imgur&lt;/a&gt;, and another is to save images to your Dropbox folder, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;opts_knit$set(base.url = &#39;https://dl.dropbox.com/u/15335397/wp/&#39;,
              base.dir = &#39;path/to/Dropbox/Public/wp/&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I created a folder named &lt;code&gt;wp&lt;/code&gt; under the &lt;code&gt;Public&lt;/code&gt; folder, and the above code tells &lt;strong&gt;knitr&lt;/strong&gt; to add a prefix to the image URL&amp;rsquo;s, and generate images in the Dropbox folder. To get the URL of a file in the Public folder, just right-click on it and copy the link from the menu.&lt;/p&gt;

&lt;p&gt;Note you can write and preview the draft in RStudio until you are comfortable to publish it. Once it is published, it is not straightforward to modify it (although you can), and that is why you, as a cool hacker, should blog with Jekyll instead of WordPress. It is always easy to deal with plain text files. Once you have got PHP, MySQL, password, plugins, &amp;hellip; things get complicated quickly.&lt;/p&gt;

&lt;p&gt;If you have your own server, I recommend you not to use the &lt;code&gt;shortcode&lt;/code&gt; option, and you should consider much nicer alternative options for syntax highlighting such as &lt;a href=&#34;http://softwaremaniacs.org/soft/highlight/en/&#34;&gt;highlight.js&lt;/a&gt;, e.g. you can add this to your WordPress template:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;http://yandex.st/highlightjs/7.3/styles/default.min.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;http://yandex.st/highlightjs/7.3/highlight.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;http://yandex.st/highlightjs/7.3/languages/r.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I thank William K. Morris for his early experiment with &lt;strong&gt;knitr&lt;/strong&gt; and WordPress. The &lt;code&gt;knit2wp()&lt;/code&gt; function was based on &lt;a href=&#34;http://wkmor1.wordpress.com/2012/07/01/rchievement-of-the-day-3-bloggin-from-r-14/&#34;&gt;his blog post&lt;/a&gt;. I also tested it &lt;a href=&#34;http://yihui.wordpress.com/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>JavaScript</title>
      <link>https://yihui.name/knitr/demo/javascript/</link>
      <pubDate>Fri, 09 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/javascript/</guid>
      <description>
        &lt;p&gt;Due to the option &lt;code&gt;results=&#39;asis&#39;&lt;/code&gt;, we can write anything to the output, including JavaScript. Here are some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://vis.supstat.com/2012/11/contour-plots-with-d3-and-r/&#34;&gt;Contour Plots with D3 and R&lt;/a&gt; (&lt;a href=&#34;https://github.com/supstat/vistat/blob/gh-pages/_source/2012-11-07-contour-plots-with-d3-and-r.Rmd&#34;&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Language engines</title>
      <link>https://yihui.name/knitr/demo/engines/</link>
      <pubDate>Fri, 04 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/engines/</guid>
      <description>
        &lt;p&gt;We can use any languages in &lt;strong&gt;knitr&lt;/strong&gt;, including but not limited to R. Here
are some simple demos with Python, Awk, Ruby, Haskell, Bash, Perl, Graphviz,
TikZ, SAS, Scala, and CoffeeScript, etc:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/023-engine-python.Rmd&#34;&gt;python.Rmd&lt;/a&gt; (&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/023-engine-python.md&#34;&gt;output&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/090-engine-c.Rmd&#34;&gt;c.Rmd&lt;/a&gt; (&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/090-engine-c.md&#34;&gt;output&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/111-engine-fortran.Rmd&#34;&gt;fortran.Rmd&lt;/a&gt; (&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/111-engine-fortran.md&#34;&gt;output&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/115-engine-sql.Rmd&#34;&gt;sql.Rmd&lt;/a&gt; (&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/115-engine-sql.md&#34;&gt;output&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/024-engine-awk.Rmd&#34;&gt;awk.Rmd&lt;/a&gt; (&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/024-engine-awk.md&#34;&gt;output&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/025-engine-ruby.Rmd&#34;&gt;ruby.Rmd&lt;/a&gt; (&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/025-engine-ruby.md&#34;&gt;output&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/026-engine-haskell.Rmd&#34;&gt;haskell.Rmd&lt;/a&gt; (&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/026-engine-haskell.md&#34;&gt;output&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/027-engine-bash.Rmd&#34;&gt;bash.Rmd&lt;/a&gt; (&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/027-engine-bash.md&#34;&gt;output&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/028-engine-perl.Rmd&#34;&gt;perl.Rmd&lt;/a&gt; (&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/028-engine-perl.md&#34;&gt;output&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/057-engine-dot.Rmd&#34;&gt;dot.Rmd&lt;/a&gt; (&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/057-engine-dot.md&#34;&gt;output&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/058-engine-tikz.Rmd&#34;&gt;tikz.Rmd&lt;/a&gt; (&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/058-engine-tikz.md&#34;&gt;output&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/060-engine-sas.Rmd&#34;&gt;sas.Rmd&lt;/a&gt; (&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/060-engine-sas.md&#34;&gt;output&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/080-engine-coffeescript.Rmd&#34;&gt;coffeescript.Rmd&lt;/a&gt; (&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/080-engine-coffeescript.md&#34;&gt;output&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/106-polyglot.Rmd&#34;&gt;polyglot.Rmd&lt;/a&gt; (&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/106-polyglot.md&#34;&gt;output&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;Scala, Python, and Bash&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These languages are easy to deal with because they can be called by pure
command line, e.g. &lt;code&gt;python -c&lt;/code&gt; can execute the code passed in as a character
string.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Rcpp&lt;/code&gt; engine is different, however. The C++ code is compiled through the
&lt;strong&gt;Rcpp&lt;/strong&gt; package. See &lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/029-engine-Rcpp.Rmd&#34;&gt;Rcpp.Rmd&lt;/a&gt;
(&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/029-engine-Rcpp.md&#34;&gt;output&lt;/a&gt;)
for example. Similarly, &lt;code&gt;C&lt;/code&gt; code is compiled via &lt;code&gt;R CMD SHLIB&lt;/code&gt;
(&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/090-engine-c.Rmd&#34;&gt;example&lt;/a&gt;/&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/090-engine-c.md&#34;&gt;output&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;A special engine &lt;code&gt;cat&lt;/code&gt; can be used to save the content of a code chunk to a
file using the &lt;code&gt;cat()&lt;/code&gt; function; see the
&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/095-pandoc-header.Rmd&#34;&gt;example 095&lt;/a&gt;
for an application.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;../../objects&#34;&gt;object&lt;/a&gt; &lt;code&gt;knit_engines&lt;/code&gt; stores a series of named
functions to handle code from different languages, and you are free to
define a function to deal with a custom language. See
&lt;a href=&#34;https://github.com/yihui/knitr/blob/master/R/engine.R&#34;&gt;engine.R&lt;/a&gt; for
examples on how I deal with Python and Awk.&lt;/p&gt;

&lt;p&gt;I do not really know much about other languages, so please feel free to
&lt;a href=&#34;https://github.com/yihui/knitr/fork_select&#34;&gt;contribute&lt;/a&gt; more language
engines to &lt;strong&gt;knitr&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note these languages work not only in Markdown, but also in other formats
like LaTeX.&lt;/p&gt;

&lt;p&gt;Except &lt;code&gt;engine=&#39;R&#39;&lt;/code&gt; (default), all chunks are executed in separate sessions,
so the variables cannot be directly shared. If we want to make use of
objects created in previous chunks, we usually have to write them to files
(as side effects). For the &lt;code&gt;bash&lt;/code&gt; engine, we can use &lt;code&gt;Sys.setenv()&lt;/code&gt; to
export variables from R to bash (&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/061-bash-variable.md&#34;&gt;example&lt;/a&gt;).
Another approach is to use the (experimental) &lt;a href=&#34;https://github.com/yihui/runr&#34;&gt;&lt;strong&gt;runr&lt;/strong&gt; package&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>HTML5 slides</title>
      <link>https://yihui.name/knitr/demo/slides/</link>
      <pubDate>Tue, 01 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/slides/</guid>
      <description>
        &lt;blockquote&gt;
&lt;p&gt;Update (2014/12/24): the &lt;strong&gt;rmarkdown&lt;/strong&gt; package has made this much much easier,
so you should probably ignore this page. Please see
&lt;a href=&#34;http://rmarkdown.rstudio.com&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is a simple demo of making DZslides with &lt;strong&gt;knitr&lt;/strong&gt; and &lt;a href=&#34;http://johnmacfarlane.net/pandoc/&#34;&gt;pandoc&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rmd source: &lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/009-slides.Rmd&#34;&gt;knitr-slides.Rmd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;markdown output: &lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/009-slides.md&#34;&gt;knitr-slides.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run the &lt;code&gt;pandoc&lt;/code&gt; command mentioned in the slides to get the HTML output. Use
Left/Right arrows to navigate through the slides.&lt;/p&gt;

&lt;p&gt;Also see slides made by other users in the &lt;a href=&#34;../showcase/&#34;&gt;showcase&lt;/a&gt; page, e.g. &lt;a href=&#34;http://gastonsanchez.wordpress.com/2012/11/19/creating-html5-slides-with-rstudio-knitr-and-pandoc/&#34;&gt;Gaston Sanchez&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Editors for knitr</title>
      <link>https://yihui.name/knitr/demo/editors/</link>
      <pubDate>Fri, 16 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/editors/</guid>
      <description>
        

&lt;p&gt;I have written about &lt;a href=&#34;../lyx/&#34;&gt;LyX&lt;/a&gt;, &lt;a href=&#34;../rstudio/&#34;&gt;RStudio&lt;/a&gt;, &lt;a href=&#34;../org/&#34;&gt;Emacs Org-mode&lt;/a&gt; and &lt;a href=&#34;../eclipse/&#34;&gt;Eclipse&lt;/a&gt;. There are still other editors that we can use with &lt;strong&gt;knitr&lt;/strong&gt;, such as &lt;a href=&#34;http://www.xm1math.net/texmaker/&#34;&gt;Texmaker&lt;/a&gt; and WinEdt. The key is that you call R and load the &lt;strong&gt;knitr&lt;/strong&gt; package, then call the function &lt;code&gt;knit()&lt;/code&gt; or &lt;code&gt;knit2pdf()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;texmaker&#34;&gt;Texmaker&lt;/h2&gt;

&lt;p&gt;You can define a custom command to process Rnw documents by &lt;code&gt;User --&amp;gt; User Commands --&amp;gt; Edit User Commands&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://db.yihui.name/imgur/ddIBH.png&#34; alt=&#34;Define user commands in Texmaker&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Note if you have not added R&amp;rsquo;s bin path to the &lt;code&gt;PATH&lt;/code&gt; variable, you need to use the full path to &lt;code&gt;Rscript.exe&lt;/code&gt; in the above command like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;quot;C:/Program Files/R/R-2.14.2/bin/Rscript.exe&amp;quot; -e &amp;quot;knitr::knit2pdf(&#39;%.Rnw&#39;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do know where is &lt;code&gt;Rscript.exe&lt;/code&gt;, simply open R and use &lt;code&gt;R.home(&#39;bin&#39;)&lt;/code&gt; to find it. Then for an Rnw document, you can use this &lt;code&gt;knitr&lt;/code&gt; command to compile it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://db.yihui.name/imgur/xKoeT.png&#34; alt=&#34;Compile Rnw in Texmaker with knitr&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Click the arrow on the left to compile the document, and the right arrow to view PDF. Of course the above configuration is for Windows, but it is straightforward for other systems as well: change &lt;code&gt;Rscript.exe&lt;/code&gt; to &lt;code&gt;Rscript&lt;/code&gt; (in fact you can use &lt;code&gt;Rscript&lt;/code&gt; under Windows as well).&lt;/p&gt;

&lt;h2 id=&#34;texstudio&#34;&gt;TeXStudio&lt;/h2&gt;

&lt;p&gt;For one, you can do basically the same thing as in Texmaker (thanks, Henrik Nyhus and &lt;a href=&#34;https://twitter.com/MathBioPaul/status/691446297304272897&#34;&gt;Paul J. Hurtado&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://db.yihui.name/imgur/VFcvTUB.png&#34; alt=&#34;knitr in TeXStudio&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you reveal Advanced Options (bottom left), you&amp;rsquo;ll also see &lt;code&gt;Commands ($PATH)&lt;/code&gt; at the bottom, where you can input the path to your &lt;code&gt;R&lt;/code&gt; folder (e.g. &lt;code&gt;C:\Program Files\R\R-3.3.2\bin\x64&lt;/code&gt;, no quotes); then the user command (and other calls to knitr that you might want in other commands) can just be &lt;code&gt;Rscript.exe -e &amp;quot;knitr::knit2pdf(&#39;%.Rnw&#39;)&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Every time you run this user command (hotkey Alt-Shift-F1), you&amp;rsquo;ll run knitr and silently generate the PDF; you&amp;rsquo;ll need to hit F7 every time to refresh the viewer. Alternatively, you can add &lt;code&gt;| txs:///view-pdf&lt;/code&gt; to the end of the command - the pipe character separates different commands you want to run one after another, so it&amp;rsquo;ll basically hit F7 for you.&lt;/p&gt;

&lt;p&gt;This is still pretty inefficient, however, if you&amp;rsquo;re using a citation package like BibLaTeX; you&amp;rsquo;ll need to keep running the bib file manually before compiling, and you may need to manually compile at least twice (and you might not be able to tell how many times you need), which will also call the viewer unnecessarily in the middle. TeXstudio is already great at compiling and/or running the bib tool and repeating however many times is needed when you hit Build &amp;amp; View (F5), and you can continue to make use of that with knitr by replacing the default compiler with the &lt;code&gt;Rscript.exe -e &amp;quot;knitr::knit2pdf(&#39;%.Rnw&#39;)&amp;quot;&lt;/code&gt; command (assuming you already set the &lt;code&gt;R&lt;/code&gt; folder &lt;code&gt;$PATH&lt;/code&gt;). Make sure the &amp;ldquo;Repeat contained compilation commands&amp;rdquo; button next to it remains pressed.&lt;/p&gt;

&lt;p&gt;This, of course, will make TeXstudio run off knitr instead of the standard LaTeX compilers by default, at least when you hit F5 (or F6); probably the only downside to this, for most people, is that it can make debugging your LaTeX code more difficult, as most errors will only give you the ambiguous warning that &lt;code&gt;texify.exe&lt;/code&gt; &amp;ldquo;had status 1&amp;rdquo; (running &lt;code&gt;knitr&lt;/code&gt; via user command doesn&amp;rsquo;t improve that either). The log file is sometimes still useful, though even when it is, it refers to lines in the &lt;code&gt;.tex&lt;/code&gt; file that knitr produced, and not the &lt;code&gt;.Rnw&lt;/code&gt; file, so you need to open that file up and try and figure out what&amp;rsquo;s wrong.&lt;/p&gt;

&lt;p&gt;Overall, though, TeXstudio does allow you to use &lt;code&gt;knitr&lt;/code&gt; while taking advantage of all its other LaTeX-writing perks; moreover, it makes it a lot easier to use &lt;code&gt;Biber&lt;/code&gt;-based citation packages like &lt;code&gt;BibLaTeX-Chicago&lt;/code&gt;, compared to RStudio which requires some awkward workarounds.&lt;/p&gt;

&lt;h2 id=&#34;winedt&#34;&gt;WinEdt&lt;/h2&gt;

&lt;p&gt;The WinEdt mode &lt;a href=&#34;http://www.winedt.org/Config/modes/R-Sweave.php&#34;&gt;R-Sweave&lt;/a&gt; supports &lt;strong&gt;knitr&lt;/strong&gt; now. Please read on if you want to configure WinEdt by yourself instead.&lt;/p&gt;

&lt;p&gt;The following instructions were from &lt;a href=&#34;https://github.com/philchalmers&#34;&gt;Phil Chalmers&lt;/a&gt;, and I did not test them at all, but I feel it should be in the ballpark.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;code&gt;Options -&amp;gt; Execution Modes -&amp;gt; PDFTeXify&lt;/code&gt;. Then look for executable &lt;code&gt;Rscript.exe&lt;/code&gt; (e.g. &lt;code&gt;C:\Program Files\R\R-2.14.2\bin\Rscript.exe&lt;/code&gt;) and select that.&lt;/li&gt;
&lt;li&gt;under &lt;code&gt;Switches&lt;/code&gt; put &lt;code&gt;-e&lt;/code&gt;, and under &lt;code&gt;Parameters&lt;/code&gt; put &lt;code&gt;&amp;quot;knitr::knit2pdf(&#39;%n%t&#39;)&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now hitting &lt;code&gt;F9&lt;/code&gt; will run everything for you at once, including opening up the PDF.&lt;/p&gt;

&lt;p&gt;Thanks, Phil.&lt;/p&gt;

&lt;h2 id=&#34;emacs-ess&#34;&gt;Emacs/ESS&lt;/h2&gt;

&lt;p&gt;Since 12.09, &lt;strong&gt;knitr&lt;/strong&gt; has been officially supported in &lt;a href=&#34;http://ess.r-project.org&#34;&gt;ESS&lt;/a&gt;. If you are using Debian/Ubuntu, you can install it by&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install ess
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.screenr.com/embed/Haa8&#34;&gt;Here is a short video&lt;/a&gt; showing how to use &lt;strong&gt;knitr&lt;/strong&gt; in ESS.&lt;/p&gt;

&lt;p&gt;(For historic interest only) Both &lt;a href=&#34;http://sjp.co.nz/posts/emacs-ess-knitr/&#34;&gt;Simon Potter&lt;/a&gt; and &lt;a href=&#34;https://constantmindmapping.wordpress.com/2012/06/12/knitr-and-emacs/&#34;&gt;lucialam&lt;/a&gt; have blog posts about Emacs/&lt;strong&gt;knitr&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;gedit&#34;&gt;Gedit&lt;/h2&gt;

&lt;p&gt;You can define external tools in &lt;a href=&#34;https://en.wikipedia.org/wiki/Gedit&#34;&gt;gedit&lt;/a&gt;. Thanks to the tip from David Allen below, you may knit a document via&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Rscript -e &amp;quot;library(knitr); knit(&#39;$GEDIT_CURRENT_DOCUMENT_NAME&#39;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sublime&#34;&gt;Sublime&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/andrewheiss/KnitrSublime&#34;&gt;KnitrSublime&lt;/a&gt; package by Andrew Heiss provides very rudimentary LaTeX support for &lt;strong&gt;knitr&lt;/strong&gt; in Sublime Text 2.&lt;/p&gt;

&lt;h2 id=&#34;vim&#34;&gt;Vim&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.vim.org/scripts/script.php?script_id=2628&#34;&gt;Vim-R-Plugin&lt;/a&gt; has comprehensive support to &lt;strong&gt;knitr&lt;/strong&gt; thanks to Jakson Aquino.&lt;/p&gt;

&lt;h2 id=&#34;textmate&#34;&gt;TextMate&lt;/h2&gt;

&lt;p&gt;See &lt;a href=&#34;https://github.com/yihui/knitr/issues/252#issuecomment-6034068&#34;&gt;#252&lt;/a&gt; for one approach with Applescript for TextMate 2, and the &lt;a href=&#34;https://github.com/fonnesbeck/knitr.tmbundle&#34;&gt;knitr.tmbundle&lt;/a&gt; repository by Chris Fonnesbeck.&lt;/p&gt;

&lt;h2 id=&#34;texshop&#34;&gt;TeXShop&lt;/h2&gt;

&lt;p&gt;It is easy to configure &lt;a href=&#34;http://pages.uoregon.edu/koch/texshop/&#34;&gt;TeXShop&lt;/a&gt; to work with &lt;strong&gt;knitr&lt;/strong&gt;; just save the code below as a file &lt;code&gt;Knitr.engine&lt;/code&gt; under the &lt;code&gt;Engines&lt;/code&gt; directory of TeXShop (usually &lt;code&gt;~/Library/TeXShop/Engines/&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
export PATH=$PATH:/usr/texbin:/usr/local/bin
Rscript -e &amp;quot;library(knitr); knit(&#39;$1&#39;)&amp;quot;
latexmk -pdf &amp;quot;${1%.*}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Courtesy of &lt;a href=&#34;http://cameron.bracken.bz/sweave-for-texshop&#34;&gt;Cameron Bracken&lt;/a&gt; and &lt;a href=&#34;http://yihui.name/en/2012/06/enjoyable-reproducible-research/#comment-601032753&#34;&gt;Fabian Greimel&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;texworks&#34;&gt;TeXworks&lt;/h2&gt;

&lt;p&gt;TeXworks is similar to Texmaker in terms of configuration for additional tools. Below is a screenshot of the configuration under Ubuntu, thanks to &lt;a href=&#34;http://tex.stackexchange.com/a/85165/9128&#34;&gt;Speravir&lt;/a&gt; for the answer on StackExchange (Windows/Mac OS should be similar, as long as &lt;code&gt;Rscript&lt;/code&gt; is in &lt;code&gt;PATH&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://db.yihui.name/imgur/d6tE6.png&#34; alt=&#34;TeXworks with knitr&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;kile&#34;&gt;Kile&lt;/h2&gt;

&lt;p&gt;The following method was pointed out by tirip01 in the comments below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open the &lt;code&gt;Build&lt;/code&gt; tab, select &lt;code&gt;New..&lt;/code&gt;, type &lt;code&gt;knitr&lt;/code&gt; and press &lt;code&gt;Finish&lt;/code&gt;. In the &lt;code&gt;General&lt;/code&gt; tab enter &lt;code&gt;Rscript&lt;/code&gt; in the &lt;code&gt;Command&lt;/code&gt; field. Below, in the &lt;code&gt;Options&lt;/code&gt; field type: &lt;code&gt;-e &amp;quot;knitr::knit2pdf(&#39;%source&#39;)&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://securecdn.disqus.com/uploads/mediaembed/images/564/4837/original.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go to &lt;code&gt;Advanced&lt;/code&gt; tab and set Rnw as &lt;code&gt;Source extension&lt;/code&gt; and pdf as &lt;code&gt;Target extension&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://securecdn.disqus.com/uploads/mediaembed/images/564/4838/original.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In menu select &lt;code&gt;Compile&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Dr Marek Gągolewski also has a blog post &lt;a href=&#34;http://www.rexamine.com/2013/04/configure-kile-for-knitr/&#34;&gt;Configure Kile for knitr under GNU/Linux&lt;/a&gt;, which describes a more complicated approach.&lt;/p&gt;

&lt;h2 id=&#34;tinn-r&#34;&gt;Tinn-R&lt;/h2&gt;

&lt;p&gt;Tinn-R started to support &lt;strong&gt;knitr&lt;/strong&gt; since v2.3.7.3.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Package framed</title>
      <link>https://yihui.name/knitr/demo/framed/</link>
      <pubDate>Wed, 29 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/framed/</guid>
      <description>
        

&lt;p&gt;By default, &lt;strong&gt;knitr&lt;/strong&gt; uses a LaTeX package named &lt;a href=&#34;http://www.ctan.org/pkg/framed&#34;&gt;framed&lt;/a&gt; for typesetting; the most obvious feature is the light gray shading. In this page, we introduce some tricks and known problems.&lt;/p&gt;

&lt;p&gt;As listed in &lt;a href=&#34;https://github.com/yihui/knitr/blob/master/FAQ.md&#34;&gt;FAQ&amp;rsquo;s&lt;/a&gt;, you may see the output overflow the shading box, and you can set &lt;code&gt;options(&#39;width&#39;)&lt;/code&gt; to a smaller value in this case.&lt;/p&gt;

&lt;h2 id=&#34;overflow-of-elements&#34;&gt;Overflow of elements&lt;/h2&gt;

&lt;p&gt;Besides text overflow, figures may also exceed the margin of the shading. If a figure is too wide, LaTeX may complain there is something wrong with the &lt;code&gt;kframe&lt;/code&gt; environment, which is what &lt;strong&gt;knitr&lt;/strong&gt; uses to wrap up the chunk output. A known case is about PNG graphics in &lt;a href=&#34;https://github.com/yihui/knitr/issues/154&#34;&gt;#154&lt;/a&gt;. To make sure your figures do not exceed the page margin, &lt;strong&gt;knitr&lt;/strong&gt; uses the following command in the LaTeX preamble:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;%% maxwidth is the original width if it&#39;s less than linewidth
%% otherwise use linewidth (to make sure the graphics do not exceed the margin)
\makeatletter
\def\maxwidth{ %
  \ifdim\Gin@nat@width&amp;gt;\linewidth
    \linewidth
  \else
    \Gin@nat@width
  \fi
}
\makeatother
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The chunk option &lt;code&gt;out.width&lt;/code&gt; is set to &lt;code&gt;&#39;\\maxwidth&#39;&lt;/code&gt; by default if the output format is LaTeX.&lt;/p&gt;

&lt;h2 id=&#34;padding-of-the-shading-box&#34;&gt;Padding of the shading box&lt;/h2&gt;

&lt;p&gt;This LaTeX command sets the padding to be 5mm if you feel the default layout is too parsimonious (no padding at all).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\setlength\fboxsep{5mm}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do not like this default style with the &lt;strong&gt;framed&lt;/strong&gt; package, you are free to switch to other styles like &lt;a href=&#34;../listings/&#34;&gt;listings&lt;/a&gt; or even define your own output &lt;a href=&#34;../../hooks&#34;&gt;hooks&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;incompatible-environments-with-framed&#34;&gt;Incompatible environments with &lt;strong&gt;framed&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;It does not work well with the &lt;code&gt;figure*&lt;/code&gt; environment in two-column documents; see &lt;a href=&#34;https://github.com/yihui/knitr/releases/download/doc/knitr-twocolumn.pdf&#34;&gt;knitr-twocolumn.pdf&lt;/a&gt; for one approach to deal with this situation.&lt;/p&gt;

&lt;p&gt;If you use the Tufte handout/book classes, the &lt;code&gt;fullwidth&lt;/code&gt; environment does not work well with the &lt;strong&gt;framed&lt;/strong&gt; package either; see discussion in &lt;a href=&#34;https://github.com/yihui/knitr/issues/222&#34;&gt;#222&lt;/a&gt; for possible solutions.&lt;/p&gt;

&lt;p&gt;It does not work with the &lt;strong&gt;lineno&lt;/strong&gt; package; see &lt;a href=&#34;http://groups.google.com/group/knitr/browse_thread/thread/b0d6723386371139&#34;&gt;Michael&amp;rsquo;s post&lt;/a&gt; in the mailing list.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Eclipse</title>
      <link>https://yihui.name/knitr/demo/eclipse/</link>
      <pubDate>Mon, 27 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/eclipse/</guid>
      <description>
        &lt;p&gt;A tutorial on &lt;a href=&#34;https://github.com/yihui/knitr/releases/download/doc/knitr-eclipse.pdf&#34;&gt;using &lt;strong&gt;knitr&lt;/strong&gt; in Eclipse&lt;/a&gt; by courtesy of Jenny Hutchison is available for download. It is probably too long for an experienced Eclipse user, and as a person who does not use Eclipse, I believe one screenshot can explain the setup:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://db.yihui.name/imgur/00ub1.png&#34; alt=&#34;knitr tool chain in Eclipse&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You do not have to follow this. For example, you can run &lt;code&gt;knit()&lt;/code&gt; first to get the tex document, and let Eclipse compile tex to PDF; in the above configuration, the two steps were combined into one &lt;code&gt;knit2pdf()&lt;/code&gt;. See the post in the blog &lt;a href=&#34;http://danganothererror.wordpress.com/2012/04/13/getting-knitr-to-work-with-statet/&#34;&gt;Dang, another error&lt;/a&gt; for the alternative way of configuration.&lt;/p&gt;

&lt;p&gt;Thanks, Jenny!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Sweave</title>
      <link>https://yihui.name/knitr/demo/sweave/</link>
      <pubDate>Fri, 24 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/sweave/</guid>
      <description>
        

&lt;p&gt;Before &lt;strong&gt;knitr&lt;/strong&gt; 1.0, it was compatible with Sweave for easier transition from Sweave to &lt;strong&gt;knitr&lt;/strong&gt;, but the compatibility was dropped since v1.0 for (much) easier maintenance of this package. If you have an Rnw document written for Sweave, the first step you can do is to call &lt;code&gt;Sweave2knitr()&lt;/code&gt; on it, and &lt;strong&gt;knitr&lt;/strong&gt; will automatically correct the syntax (mainly chunk options, e.g. &lt;code&gt;results=hide&lt;/code&gt; should be &lt;code&gt;results=&#39;hide&#39;&lt;/code&gt;, and &lt;code&gt;eval=true&lt;/code&gt; should be &lt;code&gt;eval=TRUE&lt;/code&gt;, etc).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(knitr)
Sweave2knitr(&#39;old-document.Rnw&#39;) # you will get old-document-knitr.Rnw by default
# see ?Sweave2knitr for details
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;new-syntax-for-chunk-options&#34;&gt;New syntax for chunk options&lt;/h2&gt;

&lt;p&gt;By default, &lt;strong&gt;knitr&lt;/strong&gt; uses a &lt;a href=&#34;../../options/&#34;&gt;new syntax&lt;/a&gt; to parse chunk options (in chunk headers &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;=&lt;/code&gt;), which is similar to &lt;em&gt;R function arguments&lt;/em&gt;. This gives us much more power than the old Sweave syntax. You can use arbitrary objects in chunk options and make use of full power of R. Here is a trivial example of setting graphical parameters for base R graphics:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;&amp;lt;par-hook, cache = FALSE&amp;gt;&amp;gt;=
knit_hooks$set(pars = function(before, options, envir) {
  if (before) graphics::par(options$pars)
})
@

&amp;lt;&amp;lt;use-pars, pars = list(mar=c(4, 4, .1, .1), mgp=c(2, 1, 0))&amp;gt;&amp;gt;=
plot(mtcars[, 1:2])
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First we have set a &lt;a href=&#34;../../hooks&#34;&gt;chunk hook&lt;/a&gt; named &lt;code&gt;pars&lt;/code&gt;, which uses the chunk option &lt;code&gt;pars&lt;/code&gt; to set &lt;code&gt;par()&lt;/code&gt;; then we pass a list of parameters to the chunk option &lt;code&gt;pars&lt;/code&gt;, which will be passed to the hook function and used &lt;em&gt;before&lt;/em&gt; (&lt;code&gt;if (before)&lt;/code&gt;) this chunk is evaluated. This enables us to hide the long and boring code to set graphical parameters in the output.&lt;/p&gt;

&lt;p&gt;The chunk options can even make use of objects in a chunk dynamically. Here is another example of setting the caption for the figure environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;&amp;lt;setup, cache = FALSE&amp;gt;&amp;gt;=
opts_knit$set(eval.after = &#39;fig.cap&#39;) # evaluate fig.cap after the chunk
@

&amp;lt;&amp;lt;t-test, fig.cap = paste(&amp;quot;The P-value is&amp;quot;, t.test(x)$p.value)&amp;gt;&amp;gt;=
x = rnorm(100)
boxplot(x)
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, all chunk options are evaluated before a chunk is executed (e.g. the &lt;code&gt;pars&lt;/code&gt; option in the first example), but we can also postpone the evaluation of some options by setting the package &lt;a href=&#34;../../options/&#34;&gt;option&lt;/a&gt; &lt;code&gt;eval.after&lt;/code&gt;. In this example, the figure caption is dynamically generated from the P-value of a t-test on the object &lt;code&gt;x&lt;/code&gt; in the chunk.&lt;/p&gt;

&lt;p&gt;Neither of the above cases is possible in Sweave: on one hand, it is impossible to write literal commas in chunk options because commas are reserved as separators for options; on the other, there are only three types of objects supported in Sweave options &amp;ndash; logical, numeric and character values, and all of them should be scalars. The root reason is Sweave parses the options by text string operations such as &lt;code&gt;strsplit()&lt;/code&gt;, and &lt;strong&gt;knitr&lt;/strong&gt; treats these options as formal arguments of a function (see &lt;code&gt;?formals&lt;/code&gt;), so you can use any valid R expressions.&lt;/p&gt;

&lt;p&gt;The new syntax is more consistent with R syntax, so you do not have to remember any new rules, e.g. in the old syntax, you must &lt;em&gt;not&lt;/em&gt; quote character strings or write literal commas, but in the new syntax, you write character strings in exactly the same way as you do in R.&lt;/p&gt;

&lt;h2 id=&#34;other-compatibility-issues-with-sweave&#34;&gt;Other compatibility issues with Sweave&lt;/h2&gt;

&lt;p&gt;Note most of the issues described in this section can be automatically solved by &lt;code&gt;Sweave2knitr()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some features of Sweave were dropped in &lt;strong&gt;knitr&lt;/strong&gt; and some were changed, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;concordance&lt;/code&gt; was changed to support RStudio; if &lt;code&gt;opts_knit$get(&#39;concordance&#39;)&lt;/code&gt; is &lt;code&gt;TRUE&lt;/code&gt;, a file named &lt;code&gt;input-concordance.tex&lt;/code&gt; will be written for PDF/Rnw synchronization and error navigation purposes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keep.source&lt;/code&gt; was merged into a more flexible &lt;a href=&#34;../../options/&#34;&gt;option&lt;/a&gt; &lt;code&gt;tidy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print&lt;/code&gt; was dropped: whether an R expression is going to be printed is consistent with your experience of using R (e.g., &lt;code&gt;x &amp;lt;- 1&lt;/code&gt; will not be printed, while &lt;code&gt;1:10&lt;/code&gt; will; just imagine you are typing the commands in an R console/terminal); if you really want the output of an expression to be invisible, you may use the function &lt;code&gt;invisible()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;term&lt;/code&gt; was dropped (think &lt;code&gt;term=TRUE&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strip.white&lt;/code&gt; has a slightly different meaning: in &lt;strong&gt;knitr&lt;/strong&gt;, &lt;code&gt;strip.white = TRUE&lt;/code&gt; only removes the white lines in the beginning or end of a source chunk; Sweave allows values &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;all&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt;, but &lt;strong&gt;knitr&lt;/strong&gt; only allows &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;FALSE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefix&lt;/code&gt; was dropped (think &lt;code&gt;prefix=TRUE&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefix.string&lt;/code&gt; was renamed to &lt;code&gt;fig.path&lt;/code&gt; and it is &lt;em&gt;always&lt;/em&gt; used for figure filenames&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eps&lt;/code&gt;, &lt;code&gt;pdf&lt;/code&gt; and all logical options for graphics devices were dropped: please use the new option &lt;code&gt;dev&lt;/code&gt;, which is similar to &lt;code&gt;grdevice&lt;/code&gt; in Sweave but has more than 20 predefined graphical devices (if that is not enough, please let me know, or set it in chunk options by yourself); in old ages, we may have to use both &lt;code&gt;eps&lt;/code&gt; and &lt;code&gt;pdf&lt;/code&gt; (Sweave uses &lt;code&gt;eps=TRUE, pdf=TRUE&lt;/code&gt;), but nowadays there is usually no need to generate multiple image formats for the same plot; that said, &lt;strong&gt;knitr&lt;/strong&gt; also supports multiple formats per plot &amp;ndash; just set &lt;code&gt;dev&lt;/code&gt; to be a character vector, e.g. &lt;code&gt;dev=c(&#39;pdf&#39;, &#39;png&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig&lt;/code&gt; was dropped; now use &lt;code&gt;fig.keep&lt;/code&gt;: &lt;code&gt;fig.keep=&#39;high&#39;&lt;/code&gt; is equivalent to &lt;code&gt;fig=TRUE&lt;/code&gt; and &lt;code&gt;fig.keep=&#39;none&#39;&lt;/code&gt; is the same as &lt;code&gt;fig=FALSE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt; were changed to &lt;code&gt;fig.width&lt;/code&gt; and &lt;code&gt;fig.height&lt;/code&gt; respectively&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\SweaveOpts{}&lt;/code&gt; and &lt;code&gt;\SweaveInput{}&lt;/code&gt; are deprecated; use &lt;code&gt;opts_chunk$set()&lt;/code&gt; and the chunk option &lt;code&gt;child&lt;/code&gt; respectively&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;knitr&lt;/strong&gt; does not allow duplicate chunk labels, and Sweave does; note duplicate labels can cause problems because figure filenames are based on chunk labels, and a latter chunk with the same label as a previous chunk can override the figures generated in the previous chunk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For logical options, only &lt;code&gt;TRUE&lt;/code&gt;/&lt;code&gt;FALSE&lt;/code&gt;/&lt;code&gt;T&lt;/code&gt;/&lt;code&gt;F&lt;/code&gt; are supported (the first two are recommended), and &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; will not work, e.g., &lt;code&gt;eval=FALSE&lt;/code&gt; is OK, and &lt;code&gt;eval=false&lt;/code&gt; is not (unless there is an R object named &lt;code&gt;false&lt;/code&gt; which happens to take a logical value). Chunk reference using &lt;code&gt;&amp;lt;&amp;lt;chunk-label&amp;gt;&amp;gt;&lt;/code&gt; is still available, and there are other approaches for reusing chunks, e.g., use the new option &lt;code&gt;ref.label&lt;/code&gt; or the function &lt;code&gt;run_chunk()&lt;/code&gt;; chunk references can be recursive (see the demo &lt;a href=&#34;../reference/&#34;&gt;chunk reference&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Besides, the LaTeX style file &lt;code&gt;Sweave.sty&lt;/code&gt; was dropped as well; it has brought too much confusion to users since it is shipped with R instead of LaTeX; &lt;strong&gt;knitr&lt;/strong&gt; has built-in styles using standard LaTeX packages, and users are free to change them using hooks.&lt;/p&gt;

&lt;p&gt;For inline R code as in &lt;code&gt;\Sexpr{}&lt;/code&gt;, &lt;strong&gt;knitr&lt;/strong&gt; will automatically format the results &amp;ndash; too big or too small numbers will be written in scientific notations (e.g. &lt;code&gt;$3.14 \times 10^{-5}$&lt;/code&gt; instead of the less readable &lt;code&gt;3.14e-05&lt;/code&gt;; see &lt;a href=&#34;../output/&#34;&gt;output demo&lt;/a&gt;). We can also call &lt;code&gt;purl()&lt;/code&gt; to extract R code, which is similar to &lt;code&gt;Stangle()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some answers to Sweave FAQ&amp;rsquo;s from &lt;code&gt;vignette(&#39;Sweave&#39;, package=&#39;utils&#39;)&lt;/code&gt; are different in &lt;strong&gt;knitr&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A.4&lt;/strong&gt; Empty figure chunks give LaTeX errors.

&lt;ul&gt;
&lt;li&gt;empty figure chunks will not cause LaTeX errors in &lt;strong&gt;knitr&lt;/strong&gt; because figures will not be generated at all, and it is safe to use &lt;code&gt;fig.keep&lt;/code&gt; (close to &lt;code&gt;fig=TRUE&lt;/code&gt; in Sweave) even if there are not plots in a chunk&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A.5&lt;/strong&gt; Why do R lattice graphics not work?

&lt;ul&gt;
&lt;li&gt;lattice, ggplot2 and other grid-based graphics will work as expected in &lt;strong&gt;knitr&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A.7&lt;/strong&gt; Creating several figures from one figure chunk does not work.

&lt;ul&gt;
&lt;li&gt;multiple figures per chunk will work as expected in &lt;strong&gt;knitr&lt;/strong&gt;; no need to use any special tricks such as &lt;code&gt;cat()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A.9&lt;/strong&gt; How can I change the formatting of R input and output chunks?

&lt;ul&gt;
&lt;li&gt;we can use output hooks to change the formatting of output, and there is complete freedom &amp;ndash; the output does not have to rely on the &lt;strong&gt;fancyvrb&lt;/strong&gt; package, and there is no need to hack at &lt;code&gt;Sweave.sty&lt;/code&gt; either&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A.10&lt;/strong&gt; How can I change the line length of R input and output?

&lt;ul&gt;
&lt;li&gt;the width option is set to &lt;code&gt;75&lt;/code&gt; by default in &lt;strong&gt;knitr&lt;/strong&gt;, since R&amp;rsquo;s default is often too wide (besides, the &lt;code&gt;useFancyQuotes&lt;/code&gt; option is set to &lt;code&gt;FALSE&lt;/code&gt; to avoid a common problem caused by multi-byte characters, and digits is set to &lt;code&gt;4&lt;/code&gt; to avoid too many digits)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A.13&lt;/strong&gt; Can I use Sweave for HTML files?

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;knitr&lt;/strong&gt; comes with a set of hooks to deal with HTML output (see &lt;a href=&#34;../minimal/&#34;&gt;minimal demos&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note &lt;strong&gt;knitr&lt;/strong&gt; does not check the encoding of the input document using the tricks in Sweave like using &lt;code&gt;\usepackage[foo]{inputenc}&lt;/code&gt;. You have to specify the encoding explicitly if you are not using the native encoding in your system, e.g. &lt;code&gt;knit(&#39;foo.Rnw&#39;, encoding = &#39;GBK&#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;compatibility-with-pgfsweave&#34;&gt;Compatibility with &lt;strong&gt;pgfSweave&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;dev=&#39;tikz&#39;&lt;/code&gt; in &lt;strong&gt;knitr&lt;/strong&gt; means &lt;code&gt;tikz=TRUE&lt;/code&gt; in &lt;strong&gt;pgfSweave&lt;/strong&gt;, and &lt;code&gt;external=TRUE&lt;/code&gt; was implemented differently &amp;ndash; the cache of tikz graphics is moved to the R level instead of relying on the LaTeX package &lt;strong&gt;tikz&lt;/strong&gt; (if a tikz plot is externalized, &lt;strong&gt;knitr&lt;/strong&gt; will try to compile it to PDF immediately and use &lt;code&gt;\includegraphics{filename}&lt;/code&gt; to insert it into the output; in comparison, &lt;code&gt;external=FALSE&lt;/code&gt; uses &lt;code&gt;\input{filename.tikz}&lt;/code&gt;); this frees the users from the GNU &lt;code&gt;make&lt;/code&gt; utility and understanding tikz externalization.&lt;/p&gt;

&lt;h2 id=&#34;compatibility-with-cachesweave&#34;&gt;Compatibility with &lt;strong&gt;cacheSweave&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Cache was implemented in &lt;strong&gt;knitr&lt;/strong&gt; with functions in base R (e.g., &lt;code&gt;lazyLoad()&lt;/code&gt;) and does not rely on other add-on packages; for cached chunks, the results from the last run will be loaded and written into the output, and this is more consistent with the default behavior of R code (users may wonder why &lt;code&gt;print(x)&lt;/code&gt; does not produce any output for cached chunks; plots in cached chunks will still be in the output as well). However, bear in mind that not all side-effects can be cached; see the &lt;a href=&#34;../cache/&#34;&gt;cache page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;sweave-as-a-subset-of-knitr&#34;&gt;Sweave as a subset of &lt;strong&gt;knitr&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The design of &lt;strong&gt;knitr&lt;/strong&gt; is highly modularized so that even if you want to go back to the Sweave style, you are always free to do so with a single function in your chunk:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;&amp;lt;setup, include=FALSE, cache=FALSE&amp;gt;&amp;gt;=
render_sweave()
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells &lt;strong&gt;knitr&lt;/strong&gt; that you miss the good old &lt;code&gt;Sweave.sty&lt;/code&gt; and &lt;code&gt;Sinput&lt;/code&gt;/&lt;code&gt;Soutput&lt;/code&gt; environments, and &lt;strong&gt;knitr&lt;/strong&gt; is ready to use them for your output. It is just a matter of &lt;a href=&#34;../../hooks&#34;&gt;output hooks&lt;/a&gt;, which is orthogonal to other steps in the whole process.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Upload images</title>
      <link>https://yihui.name/knitr/demo/upload/</link>
      <pubDate>Sun, 12 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/upload/</guid>
      <description>
        &lt;p&gt;The function &lt;code&gt;imgur_upload()&lt;/code&gt; in the &lt;strong&gt;knitr&lt;/strong&gt; package enables one to upload images to the image host &lt;a href=&#34;http://imgur.com&#34;&gt;http://imgur.com&lt;/a&gt; in R using the &lt;strong&gt;RCurl&lt;/strong&gt; package. If the package &lt;a href=&#34;../../options/&#34;&gt;option&lt;/a&gt; &lt;code&gt;upload.fun&lt;/code&gt; is a function (e.g. &lt;code&gt;imgur_upload&lt;/code&gt;) that uploads files to a certain server/host, all plots generated in chunks will be uploaded automatically when the output format is HTML or Markdown.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A simple example

&lt;ul&gt;
&lt;li&gt;source: &lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/010-upload.Rmd&#34;&gt;knitr-upload.Rmd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;output: &lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/010-upload.md&#34;&gt;knitr-upload.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Two blog posts by Carl Boettiger on how to publish a post to Wordpress.com with knitr and RWordPress purely in R, with images uploaded to

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.carlboettiger.info/archives/3974&#34;&gt;Imgur&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;or &lt;a href=&#34;http://www.carlboettiger.info/archives/3988&#34;&gt;Flickr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This allows you to publish web pages quickly without worrying about image files; you only need to upload a single HTML (to any web servers) or Markdown file (to GitHub, for example).&lt;/p&gt;

&lt;p&gt;Brave professors may encourage their brave students to write homeworks with a simple Markdown file, instead of MS Word (which is usually difficult to reproduce and frustrating to format elegantly).&lt;/p&gt;

&lt;p&gt;The package option &lt;code&gt;opts_knit$get(&#39;upload.fun&#39;)&lt;/code&gt; is customizable so that you can use your own function to upload an image. See the script &lt;a href=&#34;https://github.com/cboettig/socialR/blob/master/R/custom_knit.R&#34;&gt;custom_knit.R&lt;/a&gt; by Carl for examples.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Pretty printing</title>
      <link>https://yihui.name/knitr/demo/pretty/</link>
      <pubDate>Sat, 11 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/pretty/</guid>
      <description>
        &lt;p&gt;In the &lt;strong&gt;knitr&lt;/strong&gt; mailing list there was a  &lt;a href=&#34;https://groups.google.com/d/topic/knitr/ZTfm9fM6fQs/discussion&#34;&gt;question&lt;/a&gt; on how to print the highlighted source code of functions.&lt;/p&gt;

&lt;p&gt;Of course it is fairly easy to print the source code of a function, as long as it is available to the user &amp;ndash; just write the name of the function, and R will print its source when this name is evaluated, but the problem is the printed result is treated as text output from a chunk, so it is put in the &lt;code&gt;verbatim&lt;/code&gt; environment, and nothing is highlighted.&lt;/p&gt;

&lt;p&gt;Below is a complete demo showing how to use a chunk hook extract the source code of a function using &lt;code&gt;dump()&lt;/code&gt; and insert it into &lt;strong&gt;knitr&lt;/strong&gt;.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/1805862.js&#34;&gt; &lt;/script&gt;

        
      </description>
    </item>
    
    <item>
      <title>RStudio</title>
      <link>https://yihui.name/knitr/demo/rstudio/</link>
      <pubDate>Thu, 02 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/rstudio/</guid>
      <description>
        &lt;p&gt;The &lt;strong&gt;knitr&lt;/strong&gt; support in RStudio was added since 0.96. You can download the &lt;a href=&#34;http://www.rstudio.org/download/&#34;&gt;latest version&lt;/a&gt; and enjoy the one-click PDF compilation in RStudio through &lt;strong&gt;knitr&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You are free to choose different engines to knit or weave the document, such as &lt;code&gt;Sweave&lt;/code&gt; or &lt;code&gt;knitr&lt;/code&gt; (please note the default is &lt;code&gt;Sweave&lt;/code&gt; and you may want to &lt;a href=&#34;http://stackoverflow.com/q/27592837/559676&#34;&gt;change it to &lt;code&gt;knitr&lt;/code&gt;&lt;/a&gt;), and you can also use different LaTeX backends such as &lt;code&gt;pdflatex&lt;/code&gt; or &lt;code&gt;xelatex&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Remember you do not have to use LaTeX; I encourage you to try &lt;a href=&#34;http://rmarkdown.rstudio.com&#34;&gt;R Markdown&lt;/a&gt; there, which is much easier to learn and use than LaTeX.&lt;/p&gt;

&lt;p&gt;Be aware also that, as of now, RStudio does not support &lt;code&gt;biber&lt;/code&gt; or packages that basically require it such as &lt;code&gt;biblatex-chicago&lt;/code&gt;. A number of workarounds have been thrown around (see comments &lt;a href=&#34;https://texblog.org/2013/08/20/rknitr-automatic-bibliography-generation-with-biblatex-in-rstudio/&#34;&gt;here&lt;/a&gt; for example) but one reliable one, as proposed &lt;a href=&#34;http://tex.stackexchange.com/a/71574/125859&#34;&gt;here&lt;/a&gt;, is to put the following in a chunk after &lt;code&gt;\end{document}&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;system(paste(
  &amp;quot;biber&amp;quot;, knitr:::sans_ext(knitr::current_input()), &amp;quot;--isbn-normalise&amp;quot;
))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only downside with this one is that it will fail the first time you compile a new file, before you have the auxiliary files generated; it&amp;rsquo;ll work after that though. The &lt;code&gt;isbn-normalise&lt;/code&gt; option, by the way, is optional but generally very useful: it automatically inserts hyphens in the right places in ISBNs.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Org-mode</title>
      <link>https://yihui.name/knitr/demo/org/</link>
      <pubDate>Wed, 01 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/org/</guid>
      <description>
        &lt;blockquote&gt;
&lt;p&gt;Update: &lt;a href=&#34;https://github.com/chasberry/orgmode-accessories&#34;&gt;ravel.org&lt;/a&gt; looks like a better solution for &lt;strong&gt;knitr&lt;/strong&gt; in Org-mode. Thanks, Charles Berry.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The syntax of &lt;strong&gt;knitr&lt;/strong&gt;/Sweave is not compatible with the Org-mode in Emacs. Ideally we should be able to write an R code chunk like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#+begin_src R chunk options...
x = rnorm(10)
plot(x)
#+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to use &lt;strong&gt;knitr&lt;/strong&gt; in the Org-mode, we have to cheat a little bit by putting the R code chunks in &lt;code&gt;#+begin_LATEX&lt;/code&gt; and &lt;code&gt;#+end_LATEX&lt;/code&gt;, then convert the org document to tex, then rename to rnw, and finally process with &lt;strong&gt;knitr&lt;/strong&gt; to get the real tex output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#+begin_LATEX
&amp;lt;&amp;lt;demo-chunk, echo=TRUE&amp;gt;&amp;gt;= 
x = rnorm(10)
plot(x)
@
#+end_LATEX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prasad Chalasani experimented with the above idea and put up a repository &lt;a href=&#34;https://github.com/pchalasani/OrgKnitr&#34;&gt;OrgKnitr&lt;/a&gt; on GitHub so that you can use his script to quickly compile an org document to PDF. Thanks, Prasad!&lt;/p&gt;

&lt;p&gt;Actually I do not know much about Org-mode. If you have other ideas about the Org-mode, I&amp;rsquo;d love to hear about them too.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Quick reporting</title>
      <link>https://yihui.name/knitr/demo/stitch/</link>
      <pubDate>Thu, 26 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/stitch/</guid>
      <description>
        

&lt;p&gt;Sometimes we just want to run the code in an R script to create a report. Indeed you can paste the code in an R console, and copy the results. This is often very messy (code mangled with results), and most importantly, you lose the graphics output.&lt;/p&gt;

&lt;h2 id=&#34;stitch-feed-a-template-with-an-r-script&#34;&gt;stitch(): feed a template with an R script&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Knitr&lt;/strong&gt; introduced a function &lt;code&gt;stitch()&lt;/code&gt; to conveniently insert an R script into a template to create a simple report, preserving everything in the R output (either text results or plots). See &lt;code&gt;?stitch&lt;/code&gt; for details.&lt;/p&gt;

&lt;p&gt;There are a LaTeX template, an HTML template and a markdown template in &lt;strong&gt;knitr&lt;/strong&gt;. The first one can produce a PDF document, and the second can produce an HTML page. My motivation with this function is to make it easier for students to turn their R scripts into reports (e.g. homework) quickly. The traditional way is usually they run code in R, do the tedious job of collecting results line by line, copy and paste them into (ugly-looking) MS Word. With this function, they can either turn in the PDF document, publish the HTML pages on the web, or share the HTML page in some other way.&lt;/p&gt;

&lt;p&gt;The usage is simple: just provide the path of the R script as the first argument to &lt;code&gt;stitch()&lt;/code&gt;. It uses the LaTeX template by default.&lt;/p&gt;

&lt;h2 id=&#34;spin-comment-out-texts&#34;&gt;spin(): comment out texts&lt;/h2&gt;

&lt;p&gt;The other way to write a quick report based on a pure R script is to use &lt;code&gt;spin()&lt;/code&gt;. The R script needs to follow the rules below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;texts in roxygen comments &lt;code&gt;#&#39;&lt;/code&gt; are preserved as normal texts (may contain inline R code);&lt;/li&gt;
&lt;li&gt;chunk options are written after &lt;code&gt;#+&lt;/code&gt; or &lt;code&gt;#-&lt;/code&gt;, e.g. &lt;code&gt;#+ chunk-label, opt1=value1, opt2=value2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this way, anything that is not R code is commented out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#&#39; Some texts here.

#+ test, echo=TRUE
rnorm(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will be converted to a literate programming document, e.g. (depending on the output format)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Some texts here.

&amp;lt;&amp;lt;test, echo=TRUE&amp;gt;&amp;gt;=
rnorm(5)
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href=&#34;https://github.com/yihui/knitr/blob/master/inst/examples/knitr-spin.R&#34;&gt;knitr-spin.R&lt;/a&gt; for a full example (&lt;a href=&#34;https://github.com/yihui/knitr/blob/master/inst/examples/knitr-spin.Rmd&#34;&gt;knitr-spin.Rmd&lt;/a&gt; is the Rmd output, and you can make other formats like Rnw, RHTML and Rrst, etc).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(knitr)
(s = system.file(&amp;quot;examples&amp;quot;, &amp;quot;knitr-spin.R&amp;quot;, package = &amp;quot;knitr&amp;quot;))
spin(s)  # default markdown
o = spin(s, knit = FALSE)  # convert to Rmd only
knit2html(o)  # compile to HTML

# other formats
spin(s, FALSE, format = &amp;quot;Rnw&amp;quot;)  # you need to write documentclass after #&#39;
spin(s, FALSE, format = &amp;quot;Rhtml&amp;quot;)
spin(s, FALSE, format = &amp;quot;Rtex&amp;quot;)
spin(s, FALSE, format = &amp;quot;Rrst&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>Control output</title>
      <link>https://yihui.name/knitr/demo/output/</link>
      <pubDate>Wed, 25 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/output/</guid>
      <description>
        

&lt;p&gt;As introduced in the &lt;a href=&#34;https://github.com/yihui/knitr/releases/download/doc/knitr-manual.pdf&#34;&gt;main manual&lt;/a&gt;, &lt;strong&gt;knitr&lt;/strong&gt; uses the &lt;strong&gt;evaluate&lt;/strong&gt; package to evaluate R code chunks, and there are six types of output: source code, normal text output, messages, warnings, errors and plots. Below we give a summary on the fine control over them.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;source code: use chunk option &lt;code&gt;echo&lt;/code&gt;, e.g. &lt;code&gt;echo=FALSE&lt;/code&gt; hides the R code&lt;/li&gt;
&lt;li&gt;normal text output: use option &lt;code&gt;results&lt;/code&gt; (&lt;code&gt;markup&lt;/code&gt; marks up the results; &lt;code&gt;asis&lt;/code&gt; return texts as-is; &lt;code&gt;hide&lt;/code&gt; hides the results)&lt;/li&gt;
&lt;li&gt;messages: option &lt;code&gt;message&lt;/code&gt; (&lt;code&gt;FALSE&lt;/code&gt; hides messages in the output)&lt;/li&gt;
&lt;li&gt;warnings: option &lt;code&gt;warning&lt;/code&gt; (&lt;code&gt;FALSE&lt;/code&gt; hides warnings in the output)&lt;/li&gt;
&lt;li&gt;errors: option &lt;code&gt;error&lt;/code&gt; (&lt;code&gt;FALSE&lt;/code&gt; will make R stop if an error occurs; &lt;code&gt;TRUE&lt;/code&gt; will show the error messages in the output)&lt;/li&gt;
&lt;li&gt;plots: option &lt;code&gt;fig.keep&lt;/code&gt; (&lt;code&gt;none&lt;/code&gt; discards all plots; &lt;code&gt;all&lt;/code&gt; for all plots including low-level plots; &lt;code&gt;high&lt;/code&gt; for high-level plots)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These options are orthogonal to each other, so you are free to turn on/off one type of output without affecting other pieces.&lt;/p&gt;

&lt;p&gt;Note all &lt;a href=&#34;../../options/&#34;&gt;options&lt;/a&gt; in &lt;strong&gt;knitr&lt;/strong&gt; can take values from R expressions, which brings the feature of conditional evaluation introduced in the main manual. In short, &lt;code&gt;eval=dothis&lt;/code&gt; means the real value of &lt;code&gt;eval&lt;/code&gt; is taken from a variable named &lt;code&gt;dothis&lt;/code&gt; in the global environment; by manipulating this variable, we can turn on/off the evaluation of a batch of chunks.&lt;/p&gt;

&lt;h2 id=&#34;advanced-usage-of-the-echo-option&#34;&gt;Advanced usage of the &lt;code&gt;echo&lt;/code&gt; option&lt;/h2&gt;

&lt;p&gt;Besides &lt;code&gt;TRUE/FALSE&lt;/code&gt;, the chunk option &lt;code&gt;echo&lt;/code&gt; can also take a numeric vector to selectively echo source code in the output. This vector indexes the complete R expresions in the code chunk, e.g. &lt;code&gt;echo=1&lt;/code&gt; means only include the first expression in the output. Below is a complete example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;&amp;lt;hide-par, echo=3:4&amp;gt;&amp;gt;=
## &#39;ugly&#39; code that I do not want to show
par(mar = c(4, 4, 0.1, 0.1), cex.lab = 0.95, cex.axis = 0.9,
    mgp = c(2, 0.7, 0), tcl = -0.3)
plot(mtcars[, 1:2])
plot(mtcars[, 4:5])
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;par()&lt;/code&gt; expression is not essential to this code chunk, and it is even distracting to the readers, so we may want to hide it in the output. In this particular case, we do not want the first expression (comments) either; &lt;code&gt;echo=3:4&lt;/code&gt; means the third and fourth expressions are to be included in the output. Note the index of an expression is not necessarily the same as its line number. Alternatively, we can use &lt;code&gt;echo=-(1:2)&lt;/code&gt; to remove the first two expressions.&lt;/p&gt;

&lt;p&gt;It may be confusing to the reader if you select a discrete subset of the source code; often times we should use &lt;code&gt;a:b&lt;/code&gt; or &lt;code&gt;-(a:b)&lt;/code&gt; to select a (relatively) complete subset. However, nobody can stop you from doing so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;% select 3rd and 5th expressions
&amp;lt;&amp;lt;hide-par, echo=c(3, 5)&amp;gt;&amp;gt;=
## &#39;ugly&#39; code that I do not want to show
par(mar = c(4, 4, 0.1, 0.1), cex.lab = 0.95, cex.axis = 0.9,
    mgp = c(2, 0.7, 0), tcl = -0.3)
plot(mtcars[, 1:2])
par(mar = c(4, 4, 1, 0.5)) # reset margins
plot(mtcars[, 4:5])
@
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;inline-output&#34;&gt;Inline output&lt;/h2&gt;

&lt;p&gt;Besides chunk output, there is another type of output: inline R code output (e.g. &lt;code&gt;\Sexpr{t.test(x)$p.value}&lt;/code&gt;). Numeric output is treated specially: the numbers will be written in scientific notations if they are too big or small. The threshold between scientific notation and fixed notation is the R option &lt;code&gt;scipen&lt;/code&gt; (see &lt;code&gt;?options&lt;/code&gt; for details). Basically if a number is bigger than &lt;code&gt;10^4&lt;/code&gt; or smaller than &lt;code&gt;10^{-4}&lt;/code&gt; (applies to the absolute values of negative numbers too), it will be denoted in scientific notation. Depending on the output format (LaTeX or HTML), &lt;strong&gt;knitr&lt;/strong&gt; will use the appropriate code like &lt;code&gt;$3.14 \times 10^5$&lt;/code&gt; or &lt;code&gt;3.14 &amp;amp;times; 10&amp;lt;sup&amp;gt;5&amp;lt;/sup&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another R option &lt;code&gt;digits&lt;/code&gt; controls how many digits a number should be rounded with. If you do not like the default &lt;code&gt;options(scipen = 0, digits = 4)&lt;/code&gt;, you can change them in the first chunk like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;&amp;lt;setup, echo=FALSE, cache=FALSE&amp;gt;&amp;gt;=
## numbers &amp;gt;= 10^5 will be denoted in scientific notation,
## and rounded to 2 digits
options(scipen = 1, digits = 2)
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A Markdown example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Inline code looks like this `r 1+1`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above would print &lt;code&gt;2&lt;/code&gt;, inline with the rest of the sentence.&lt;/p&gt;

&lt;p&gt;An Rnw example (LaTeX):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;Inline code looks like this \Sexpr{1+1}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An R HTML example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;p&amp;gt;Inline code looks like this &amp;lt;!--rinline 1+1 --&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For R HTML documents, the character results are written in &lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;/code&amp;gt;&lt;/code&gt; by default. If you would like to drop the &lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;/code&amp;gt;&lt;/code&gt; tags in the output, simply wrap your R code with &lt;code&gt;I()&lt;/code&gt;. For example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;p&amp;gt;Inline code looks like this &amp;lt;!--rinline I(1+1) --&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See this &lt;a href=&#34;http://stackoverflow.com/q/14124022/559676&#34;&gt;SO post&lt;/a&gt; for another example.&lt;/p&gt;

&lt;h2 id=&#34;long-lines-of-text-output&#34;&gt;Long lines of text output&lt;/h2&gt;

&lt;p&gt;Normally R respects the option &lt;code&gt;width&lt;/code&gt; (set via &lt;code&gt;options(width = ??)&lt;/code&gt;) when printing text output, e.g. &lt;code&gt;rnorm(100)&lt;/code&gt;. The default value for &lt;code&gt;width&lt;/code&gt; is set to &lt;code&gt;75&lt;/code&gt; and it is likely you want a smaller value if you use LaTeX. In some cases, you may see the output is still too width even if you have set this option to be a small value, and that is usually because R does not respect this option. I cannot do much about this, although there can be some hacks on &lt;strong&gt;knitr&lt;/strong&gt;&amp;rsquo;s side. See &lt;a href=&#34;https://github.com/yihui/knitr/issues/421&#34;&gt;#421&lt;/a&gt; for one example.&lt;/p&gt;

&lt;h2 id=&#34;one-comment-on-messages&#34;&gt;One comment on messages&lt;/h2&gt;

&lt;p&gt;Many people like to use &lt;code&gt;cat()&lt;/code&gt; to write messages in R, and this is a very bad practice, because it is inconvenient to turn off such messages. When we really mean &lt;em&gt;messages&lt;/em&gt;, we should use &lt;code&gt;message()&lt;/code&gt;. These regular messages can be conveniently suppressed by &lt;code&gt;suppressMessages()&lt;/code&gt; or captured by &lt;strong&gt;knitr&lt;/strong&gt;. Some package authors did not seem to pay attention to this issue; when we load a package or use functions in a package, we may see fake messages that cannot be supppressed. If a startup message is really necessary, it should be put in &lt;code&gt;packageStartupMessage()&lt;/code&gt;. When you are unable to turn off some messages by &lt;code&gt;message=FALSE&lt;/code&gt; in &lt;strong&gt;knitr&lt;/strong&gt;, it is probably time to request the package authors to make some changes.&lt;/p&gt;

&lt;p&gt;Similarly, we should use &lt;code&gt;warning()&lt;/code&gt; when we really mean a warning.&lt;/p&gt;

&lt;p&gt;So watch out your &lt;code&gt;cat&lt;/code&gt;s!&lt;/p&gt;

&lt;h2 id=&#34;misc&#34;&gt;Misc&lt;/h2&gt;

&lt;p&gt;If you use &lt;code&gt;echo=FALSE, results=&#39;hide&#39;&lt;/code&gt; on a chunk, you may see extra empty lines in the output; if you do not want these empty lines, see &lt;a href=&#34;https://github.com/yihui/knitr/issues/231&#34;&gt;#231&lt;/a&gt; for a possible solution.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Package vignettes</title>
      <link>https://yihui.name/knitr/demo/vignette/</link>
      <pubDate>Sun, 22 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/vignette/</guid>
      <description>
        

&lt;p&gt;Since R 3.0.0, non-Sweave vignettes are officially supported. Please see the
section &amp;ldquo;Non-Sweave vignettes&amp;rdquo; in the manual &amp;ldquo;&lt;a href=&#34;http://cran.r-project.org/doc/manuals/r-devel/R-exts.html#Non_002dSweave-vignettes&#34;&gt;Writing R
Extensions&lt;/a&gt;&amp;rdquo;.
Basically what you need to do for Rnw vignettes are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;add &lt;code&gt;%\VignetteEngine{knitr::knitr}&lt;/code&gt; to the Rnw source document (note you still need &lt;code&gt;%\VignetteIndexEntry{}&lt;/code&gt; as before);&lt;/li&gt;
&lt;li&gt;specify &lt;code&gt;VignetteBuilder: knitr&lt;/code&gt; in the package &lt;code&gt;DESCRIPTION&lt;/code&gt; file;&lt;/li&gt;
&lt;li&gt;add &lt;code&gt;Suggests: knitr&lt;/code&gt; in &lt;code&gt;DESCRIPTION&lt;/code&gt; if &lt;strong&gt;knitr&lt;/strong&gt; is needed &lt;em&gt;only&lt;/em&gt; for vignettes;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;vignette-engines&#34;&gt;Vignette engines&lt;/h2&gt;

&lt;p&gt;Then all your Rnw vignettes will be compiled by &lt;strong&gt;knitr&lt;/strong&gt; instead of the
default engine Sweave. The vignette engine &lt;code&gt;knitr::knitr&lt;/code&gt; is only one of
possible engines in &lt;strong&gt;knitr&lt;/strong&gt;. To see all of them, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(knitr)
library(tools)
names(vignetteEngine(package = &#39;knitr&#39;))
# for example:
# &amp;quot;knitr::rmarkdown&amp;quot; &amp;quot;knitr::knitr&amp;quot; &amp;quot;knitr::docco_classic&amp;quot; &amp;quot;knitr::docco_linear&amp;quot;
# &amp;quot;knitr::knitr_notangle&amp;quot; ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The engines with the suffix &lt;code&gt;_notangle&lt;/code&gt; have the same weave functions as those
without the suffix, but have disabled the tangle function, meaning that there
will not be R scripts generated from vignettes during &lt;code&gt;R CMD build&lt;/code&gt; or &lt;code&gt;R CMD
check&lt;/code&gt;. See &lt;a href=&#34;http://bit.ly/SnLi6h&#34;&gt;here&lt;/a&gt; for a discussion on why sometimes we
may not want to tangle R scripts from vignettes (basically it is redundant for R
CMD check to run the same code again after the code has been executed in weave,
and currently the inline R code expressions are not included in the tangle
output, which can cause problems).&lt;/p&gt;

&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;

&lt;p&gt;All the document formats that &lt;strong&gt;knitr&lt;/strong&gt; supports can be used for package
vignettes (e.g. &lt;a href=&#34;http://rmarkdown.rstudio.com&#34;&gt;R
Markdown&lt;/a&gt;). I have
&lt;a href=&#34;https://github.com/yihui/knitr/blob/master/vignettes/&#34;&gt;some examples&lt;/a&gt; in
the &lt;strong&gt;knitr&lt;/strong&gt; package, and &lt;a href=&#34;https://gist.github.com/yihui/7698648&#34;&gt;many other
packages&lt;/a&gt; on CRAN also contain
&lt;strong&gt;knitr&lt;/strong&gt; vignettes.&lt;/p&gt;

&lt;h2 id=&#34;command-line-usage&#34;&gt;Command-line usage&lt;/h2&gt;

&lt;p&gt;Since R 3.1.0, any document that has specified the vignette engine via
&lt;code&gt;%\VignetteEngine{}&lt;/code&gt; can be compiled through the command line &lt;code&gt;R CMD Sweave&lt;/code&gt;.
This is not restricted to Sweave documents or R package vignettes.&lt;/p&gt;

&lt;h2 id=&#34;a-note-to-devtools-users&#34;&gt;A note to devtools users&lt;/h2&gt;

&lt;p&gt;Note &lt;strong&gt;devtools&lt;/strong&gt; does not build vignettes by default when you
&lt;code&gt;devtools::install()&lt;/code&gt; (same thing for some &lt;code&gt;install_*&lt;/code&gt; functions like
&lt;code&gt;install_github()&lt;/code&gt;) a package from a directory. You have to specify the argument
&lt;code&gt;build_vignettes = TRUE&lt;/code&gt; when you install the package. Currently there is no way
to build vignettes using &lt;strong&gt;devtools&lt;/strong&gt; if you just use the RStudio button &lt;code&gt;Build &amp;amp;
Reload&lt;/code&gt;. You have to &lt;code&gt;Build Source Package&lt;/code&gt;, and run &lt;code&gt;R CMD INSTALL&lt;/code&gt; on the
tarball. Or run &lt;code&gt;devtools::install(build_vignettes = TRUE)&lt;/code&gt; in the R console.&lt;/p&gt;

&lt;h2 id=&#34;acknowledgement&#34;&gt;Acknowledgement&lt;/h2&gt;

&lt;p&gt;I really appreciate the generous support by one of the R core members Duncan
Murdoch as well as the hard work by Henrik Bengtsson.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Child documents</title>
      <link>https://yihui.name/knitr/demo/child/</link>
      <pubDate>Wed, 18 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/child/</guid>
      <description>
        

&lt;p&gt;It can sometimes be convenient to separate a large document in several smaller documents that are reunited as necessary at compilation time in a main document. Like the command &lt;code&gt;\SweaveInput{}&lt;/code&gt; in Sweave, &lt;strong&gt;knitr&lt;/strong&gt; also has the similar functionality, which enables us to insert child documents into a main document. The idea is like the command &lt;code&gt;\input{}&lt;/code&gt; or &lt;code&gt;\include{}&lt;/code&gt; in LaTeX to manage a large document in smaller parts. There are two approaches to input child documents in a main document. We can also compile an incomplete child document as a complete LaTeX document when we specify its parent with &lt;code&gt;set_parent()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note &lt;strong&gt;knitr&lt;/strong&gt; accepts child documents in the Markdown format, as well as in the LaTeX/Sweave format and other formats.&lt;/p&gt;

&lt;h2 id=&#34;using-chunk-option-child-for-markdown-rmd-documents&#34;&gt;Using chunk option &lt;code&gt;child&lt;/code&gt; for Markdown (.Rmd) documents&lt;/h2&gt;

&lt;p&gt;The chunk option &lt;code&gt;child&lt;/code&gt; supports the inclusion of child documents. For example here is how to combine a main document with a child document. We create a child document named &lt;code&gt;knitr-child.Rmd&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# Details from the child document

Hi, there. I&#39;m a child with a plot and as many details as necessary.

```{r test-child}
plot(trees)
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and we create a main document named &lt;code&gt;main.Rmd&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
title: &amp;quot;Main report&amp;quot;
output: html_document
---
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# Summary 

```{r test-main, child = &#39;knitr-child.Rmd&#39;}
```

# Conclusion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compiling &lt;code&gt;main.Rmd&lt;/code&gt; generates HTML output for both documents. The content of the child document is located in the middle of the main document, inserted at the placeholder defined by &lt;code&gt;```{r test-main, child = &#39;knitr-child.Rmd&#39;}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;using-chunk-option-child-for-latex-rnw-documents&#34;&gt;Using chunk option &lt;code&gt;child&lt;/code&gt; for Latex (.Rnw) documents&lt;/h2&gt;

&lt;p&gt;The chunk option &lt;code&gt;child&lt;/code&gt; supports the inclusion of child documents. For example, we have a main document named &lt;a href=&#34;https://github.com/yihui/knitr/blob/master/inst/examples/knitr-input.Rnw&#34;&gt;&lt;code&gt;knitr-input.Rnw&lt;/code&gt;&lt;/a&gt; here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\documentclass{article}
\begin{document}

&amp;lt;&amp;lt;test-main&amp;gt;&amp;gt;=
options(width = 60)
summary(iris)
@

Let&#39;s see how to work with child documents in knitr. Below we input
the file \textsf{knitr-input-child.Rnw}:

&amp;lt;&amp;lt;child-demo, child=&#39;knitr-input-child.Rnw&#39;&amp;gt;&amp;gt;=
@

Done!

\end{document}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want to include a child document &lt;a href=&#34;https://github.com/yihui/knitr/blob/master/inst/examples/knitr-input-child.Rnw&#34;&gt;&lt;code&gt;knitr-input-child.Rnw&lt;/code&gt;&lt;/a&gt; in it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;This chunk below is from the child document.

&amp;lt;&amp;lt;test-child, out.width=&#39;2in&#39;&amp;gt;&amp;gt;=
1+1
rnorm(5)
plot(1)
boxplot(1:10)
str(mtcars)
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You then can compile the main document with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(knitr)
knit(&#39;knitr-input.Rnw&#39;)
## child document will be compiled too
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can freely nest one Rnw document in the other, as long as the nested structure is clear in your mind.&lt;/p&gt;

&lt;h2 id=&#34;using-knit-child-with-inline-r-code&#34;&gt;Using &lt;code&gt;knit_child()&lt;/code&gt; with inline R code&lt;/h2&gt;

&lt;p&gt;Sweave searches for &lt;code&gt;\SweaveInput{}&lt;/code&gt; in the main document, and weaves the child documents, whereas &lt;strong&gt;knitr&lt;/strong&gt; does not search for such character strings, instead, you can directly use &lt;code&gt;\Sexpr{}&lt;/code&gt; with the function &lt;code&gt;knit_child()&lt;/code&gt; to input a child document.&lt;/p&gt;

&lt;p&gt;The above example can be equivalently done with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\Sexpr{knit_child(&#39;knitr-input-child.Rnw&#39;)}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function &lt;code&gt;knit_child()&lt;/code&gt; is just a wrapper to &lt;code&gt;knit()&lt;/code&gt; and returns the compiled content as a character string to be inserted into the main output document.&lt;/p&gt;

&lt;p&gt;Be sure to read &lt;code&gt;?knit_child&lt;/code&gt; to know more about the control of evaluation (argument &lt;code&gt;eval&lt;/code&gt;), which is similar to what was described above in the first approach.&lt;/p&gt;

&lt;h2 id=&#34;comments-on-sweaveinput&#34;&gt;Comments on &lt;code&gt;\SweaveInput{}&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;It is strongly discouraged to use &lt;code&gt;\SweaveInput{}&lt;/code&gt;, and this command has been deprecated since &lt;strong&gt;knitr&lt;/strong&gt; v1.0. Originally I did not plan to support &lt;code&gt;\SweaveInput{}&lt;/code&gt; (but I did it later anyway in &lt;a href=&#34;https://github.com/yihui/knitr/issues/39&#34;&gt;#39&lt;/a&gt;), and here were my reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I want to keep the number of new LaTeX commands minimal; if &lt;code&gt;\Sexpr{}&lt;/code&gt; does the job, I do not want to use another &lt;code&gt;\SweaveInput{}&lt;/code&gt; (I expressed my opinion on why I do not like these pseudo-LaTeX commands in the end of the demo page of &lt;a href=&#34;../minimal/&#34;&gt;minimal examples&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;I tend to think &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;=&lt;/code&gt; holds meta information about the literate programming document, and &lt;code&gt;&amp;lt;&amp;lt;child=&#39;foo-bar.Rnw&#39;&amp;gt;&amp;gt;=&lt;/code&gt; is one piece of the meta information telling &lt;strong&gt;knitr&lt;/strong&gt; that for this chunk, please compile and input a child document here; it is essentially not a LaTeX command, so I do not want a command &lt;code&gt;\FooBarInput{}&lt;/code&gt; which looks like &lt;code&gt;\input{}&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;The implementation in &lt;strong&gt;knitr&lt;/strong&gt; is more flexible than &lt;code&gt;\SweaveInput{}&lt;/code&gt; because it supports conditional evaluation as well; you can use &lt;code&gt;knit_child(&#39;foo-bar.Rnw&#39;, eval=dothis)&lt;/code&gt; or &lt;code&gt;&amp;lt;&amp;lt;child=&#39;foo-bar.Rnw&#39;, eval=dothis&amp;gt;&amp;gt;=&lt;/code&gt; where the global variable &lt;code&gt;dothis&lt;/code&gt; is a logical variable which controls if this expression or chunk should be evaluated; if &lt;code&gt;dothis == FALSE&lt;/code&gt;, you have essentially commented out the child document; meanwhile, it is also possible to input multiple child documents in a chunk like &lt;code&gt;&amp;lt;&amp;lt;child=c(&#39;foo1.Rnw&#39;, &#39;foo2.Rnw&#39;, &#39;foo3.Rnw&#39;)&amp;gt;&amp;gt;=&lt;/code&gt;; you can easily group a set of child documents together to form a report in this way;&lt;/li&gt;
&lt;li&gt;It brings me additional difficulty to parse &lt;code&gt;\SweaveInput{}&lt;/code&gt; from the source document (&lt;code&gt;\SweaveOpts{}&lt;/code&gt; has the same trouble);&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You may use this a piece of R code for the transition from Sweave to &lt;strong&gt;knitr&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;kids = list.files(pattern = &#39;\\.Rnw$&#39;)
sprintf(&amp;quot;&amp;lt;&amp;lt;child%s, child=&#39;%s&#39;&amp;gt;&amp;gt;=&amp;quot;, 1:length(kids), kids)
## copy the results to save some typing efforts
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;knit-child-documents-in-a-standalone-mode&#34;&gt;Knit child documents in a standalone mode&lt;/h2&gt;

&lt;p&gt;Child documents are often incomplete &amp;ndash; the missing part is the LaTeX preamble as well as &lt;code&gt;\begin{document}&lt;/code&gt; and &lt;code&gt;\end{document}&lt;/code&gt;. Sometimes we may want to compile such child documents as if they were complete LaTeX documents. The only one thing we need to do is to extract an appropriate preamble from a parent document and add it to this child document. The function &lt;code&gt;set_parent()&lt;/code&gt; enables this feature; we can use it either in &lt;code&gt;\Sexpr{}&lt;/code&gt; or a code chunk in the child document, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\Sexpr{set_parent(&#39;main-document.Rnw&#39;)}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;&amp;lt;set-parent, echo=FALSE, cache=FALSE&amp;gt;&amp;gt;=
set_parent(&#39;main-document.Rnw&#39;)
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the child document will behave as if it had a preamble &amp;ndash; the output LaTeX document will have a preamble, and the tikz graphics in this document will be affected by the preamble as well.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Chunk Reference/Macro</title>
      <link>https://yihui.name/knitr/demo/reference/</link>
      <pubDate>Sat, 14 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/reference/</guid>
      <description>
        

&lt;p&gt;Sweave has the feature of chunk reference to reuse chunks with the syntax &lt;code&gt;&amp;lt;&amp;lt;chunk-label&amp;gt;&amp;gt;&lt;/code&gt; (without &lt;code&gt;=&lt;/code&gt; compared to &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;=&lt;/code&gt;), e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;&amp;lt;chunk1&amp;gt;&amp;gt;=
1 + 1
@

&amp;lt;&amp;lt;chunk2&amp;gt;&amp;gt;=
&amp;lt;&amp;lt;chunk1&amp;gt;&amp;gt;
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;chunk2&lt;/code&gt;, the code in &lt;code&gt;chunk1&lt;/code&gt; will be inserted. This feature is also available in &lt;strong&gt;knitr&lt;/strong&gt;, but note &lt;strong&gt;knitr&lt;/strong&gt; supports arbitrary (finite) levels of recursion in chunk references (Sweave only supports one level), i.e. one chunk can reference another chunk which references yet another chunk.&lt;/p&gt;

&lt;p&gt;This same &lt;code&gt;&amp;lt;&amp;lt;chunk-label&amp;gt;&amp;gt;&lt;/code&gt; syntax will work in markdown, to reuse a previous named markdown chunk within another chunk, even though your .Rmd editor will likely flag the line as an unexpected token.&lt;/p&gt;

&lt;p&gt;There are still other approaches to reuse chunks in &lt;strong&gt;knitr&lt;/strong&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;use the same label as the previous chunk to be reused&lt;/li&gt;
&lt;li&gt;use the chunk option &lt;code&gt;ref.label&lt;/code&gt; to reference another chunk&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;use-the-same-label&#34;&gt;Use the same label&lt;/h2&gt;

&lt;p&gt;An example for the first approach:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;&amp;lt;chunk1, echo=TRUE, results=&#39;hide&#39;&amp;gt;&amp;gt;=
1 + 1
@

&amp;lt;&amp;lt;chunk1, echo=FALSE, results=&#39;markup&#39;&amp;gt;&amp;gt;=
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second chunk is empty, so &lt;strong&gt;knitr&lt;/strong&gt; will look for another chunk with the same label but is not empty, and use the code from that chunk. The key is to leave a chunk empty to use code from other chunks. One problem with this approach is that you cannot cache both chunks since their MD5 digests are different, and &lt;strong&gt;knitr&lt;/strong&gt; only allows one set of cache files per label.&lt;/p&gt;

&lt;h2 id=&#34;use-chunk-option-ref-label&#34;&gt;Use chunk option &lt;code&gt;ref.label&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;An example for the second approach:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;&amp;lt;chunk1, echo=TRUE, results=&#39;hide&#39;&amp;gt;&amp;gt;=
1 + 1
@

&amp;lt;&amp;lt;chunk2, ref.label=&#39;chunk1&#39;, echo=FALSE, results=&#39;markup&#39;&amp;gt;&amp;gt;=
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second chunk uses a different label, so cache is no longer a problem. Obviously the second approach is a more general solution.&lt;/p&gt;

&lt;p&gt;This feature enables us to separate R code and R output in the output document. For instance, we can use &lt;code&gt;echo=FALSE&lt;/code&gt; in the body of an article to hide R code, and use chunk references in the appendix to show R code (with &lt;code&gt;eval=FALSE, ref.label=...&lt;/code&gt;).&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Listings</title>
      <link>https://yihui.name/knitr/demo/listings/</link>
      <pubDate>Sat, 10 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/listings/</guid>
      <description>
        

&lt;p&gt;It is easy to define your own output &lt;a href=&#34;../../hooks&#34;&gt;hooks&lt;/a&gt; in &lt;strong&gt;knitr&lt;/strong&gt; to decorate your results with the LaTeX &lt;strong&gt;listings&lt;/strong&gt; package. Here is a snippet that you may use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## a common hook for messages, warnings and errors
hook_lst_bf = function(x, options) {
    paste(&amp;quot;\\begin{lstlisting}[basicstyle={\\bfseries}]\n&amp;quot;, x, 
        &amp;quot;\\end{lstlisting}\n&amp;quot;, sep = &amp;quot;&amp;quot;)
}
knit_hooks$set(source = function(x, options) {
    paste(&amp;quot;\\begin{lstlisting}[language=R,numbers=left,stepnumber=2]\n&amp;quot;, x, 
        &amp;quot;\\end{lstlisting}\n&amp;quot;, sep = &amp;quot;&amp;quot;)
}, output = function(x, options) {
    paste(&amp;quot;\\begin{lstlisting}[basicstyle={\\ttfamily}]\n&amp;quot;, x, 
        &amp;quot;\\end{lstlisting}\n&amp;quot;, sep = &amp;quot;&amp;quot;)
}, warning = hook_lst_bf, message = hook_lst_bf, error = hook_lst_bf)

## empty highlight header since it is not useful any more
set_header(highlight = &amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, &lt;strong&gt;knitr&lt;/strong&gt; exposes everything to the user. All you need to do is to make sure that these pieces R source and output can be wrapped in proper environments.&lt;/p&gt;

&lt;p&gt;Wait, do not copy the code above, because I have already made them into &lt;strong&gt;knitr&lt;/strong&gt; via the function &lt;code&gt;render_listings()&lt;/code&gt; with a few tweaks. Here is an example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using &lt;strong&gt;knitr&lt;/strong&gt; with listings

&lt;ul&gt;
&lt;li&gt;Rnw source: &lt;a href=&#34;https://github.com/yihui/knitr/blob/master/inst/examples/knitr-listings.Rnw&#34;&gt;knitr-listings.Rnw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LyX source: &lt;a href=&#34;https://github.com/yihui/knitr/blob/master/inst/examples/knitr-listings.lyx&#34;&gt;knitr-listings.lyx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PDF output: &lt;a href=&#34;https://github.com/yihui/knitr/releases/download/doc/knitr-listings.pdf&#34;&gt;knitr-listings.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One screenshot from the PDF output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://db.yihui.name/imgur/PKupQ.png&#34; alt=&#34;using listings in knitr&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I thank Frank Harrell for the LaTeX style file &lt;code&gt;Sweavel.sty&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;more-listings-options&#34;&gt;More listings options&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;listings&lt;/strong&gt; package has tons of options that you can use, so be sure to read its manual to know its full power. Below is an example to show how to break lines in the error messages, and you can download its &lt;a href=&#34;https://gist.github.com/2209775&#34;&gt;the Rnw source&lt;/a&gt;. The key is the option &lt;code&gt;breaklines=true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://db.yihui.name/imgur/3313T.png&#34; alt=&#34;break lines in listings output&#34; /&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Graphics</title>
      <link>https://yihui.name/knitr/demo/graphics/</link>
      <pubDate>Fri, 09 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/graphics/</guid>
      <description>
        

&lt;h2 id=&#34;the-graphics-manual&#34;&gt;The Graphics Manual&lt;/h2&gt;

&lt;p&gt;The graphics manual shows all cool bells and whistles about graphics in &lt;strong&gt;knitr&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Source and output of the graphics manual

&lt;ul&gt;
&lt;li&gt;Rnw source: &lt;a href=&#34;https://github.com/yihui/knitr/blob/master/inst/examples/knitr-graphics.Rnw&#34;&gt;knitr-graphics.Rnw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LyX source: &lt;a href=&#34;https://github.com/yihui/knitr/blob/master/inst/examples/knitr-graphics.lyx&#34;&gt;knitr-graphics.lyx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PDF output: &lt;a href=&#34;https://github.com/yihui/knitr/releases/download/doc/knitr-graphics.pdf&#34;&gt;knitr-graphics.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will probably realize how much room there is for improvement of R graphics in publications. Don&amp;rsquo;t accept whatever R gives you; it is time starting making your graphics beautiful and professional.&lt;/p&gt;

&lt;p&gt;A few screenshots from the manual:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://db.yihui.name/imgur/HCkka.png&#34; alt=&#34;tikz graphics in knitr&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://db.yihui.name/imgur/BTEiu.png&#34; alt=&#34;ggplot2 in knitr&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like to thank the authors of the &lt;a href=&#34;http://code.google.com/p/tufte-latex/&#34;&gt;&lt;code&gt;tufte-handout&lt;/code&gt;&lt;/a&gt; class, based on which this document was written, and the &lt;strong&gt;tikzDevice&lt;/strong&gt; package makes the font styles in plots consistent with the document class (using serif fonts).&lt;/p&gt;

&lt;h2 id=&#34;a-note-on-custom-graphical-devices&#34;&gt;A note on custom graphical devices&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;../../options/&#34;&gt;chunk option&lt;/a&gt; &lt;code&gt;dev&lt;/code&gt; accepts custom graphical devices which can be defined as an R function with three arguments. Here is an example of a PDF device using &lt;code&gt;pointsize&lt;/code&gt; 10:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;&amp;lt;custom-dev&amp;gt;&amp;gt;=
my_pdf = function(file, width, height) {
  pdf(file, width = width, height = height, pointsize = 10)
}
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can use this device in chunk options, but one important thing to remember is to provide the &lt;code&gt;fig.ext&lt;/code&gt; option at the same time, because &lt;strong&gt;knitr&lt;/strong&gt; is unable to guess what should be a correct file extension for the plot file. Finally we will use the custom device like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;&amp;lt;dev-demo, dev=&#39;my_pdf&#39;, fig.ext=&#39;pdf&#39;&amp;gt;&amp;gt;=
plot(rnorm(100))
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course you can set them globally using &lt;code&gt;\SweaveOpts{}&lt;/code&gt; if you want to use this device through out the document.&lt;/p&gt;

&lt;h2 id=&#34;passing-more-arguments-to-a-device&#34;&gt;Passing more arguments to a device&lt;/h2&gt;

&lt;p&gt;We can actually have even finer control over graphical devices through the &lt;code&gt;dev.args&lt;/code&gt; option. Instead of hardcoding &lt;code&gt;pointsize = 10&lt;/code&gt;, we can add an option &lt;code&gt;dev.args = list(pointsize = 10)&lt;/code&gt; to the chunk. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;&amp;lt;pdf-pointsize, dev=&#39;pdf&#39;, dev.args=list(pointsize=10)&amp;gt;&amp;gt;=
plot(rnorm(100))
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since &lt;code&gt;dev.args&lt;/code&gt; is a list, it can take any possible device arguments, e.g. &lt;code&gt;dev.args=list(pointsize=11, family=&#39;serif&#39;)&lt;/code&gt; for the &lt;code&gt;pdf()&lt;/code&gt; device. All elements of &lt;code&gt;dev.args&lt;/code&gt; are passed to the graphical device of the chunk.&lt;/p&gt;

&lt;h2 id=&#34;create-hyperlinks-in-r-graphics&#34;&gt;Create hyperlinks in R graphics&lt;/h2&gt;

&lt;p&gt;With the help of the &lt;strong&gt;tikzDevice&lt;/strong&gt; package, we can write almost any LaTeX commands in R graphics. Here is an example &lt;a href=&#34;https://gist.github.com/1937313&#34;&gt;links.Rnw&lt;/a&gt; of writing hyperlinks (courtesy of Jonathan Kennel).&lt;/p&gt;

&lt;p&gt;An important note is you have to add &lt;code&gt;\usepackage{hyperref}&lt;/code&gt; to the list of metrics packages used by &lt;strong&gt;tikzDevice&lt;/strong&gt;, otherwise the command &lt;code&gt;\hyperlink&lt;/code&gt; or &lt;code&gt;\hypertarget&lt;/code&gt; will not be recognized.&lt;/p&gt;

&lt;h2 id=&#34;encoding-of-multibyte-characters&#34;&gt;Encoding of multibyte characters&lt;/h2&gt;

&lt;p&gt;When your plots contain multibyte characters, you may need set the &lt;code&gt;encoding&lt;/code&gt; option of the &lt;code&gt;pdf()&lt;/code&gt; device; see &lt;a href=&#34;https://github.com/yihui/knitr/issues/172&#34;&gt;#172&lt;/a&gt; for a discussion. For a possible list of encodings, see&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;list.files(system.file(&#39;enc&#39;, package = &#39;grDevices&#39;))
## e.g. you can set pdf.options(encoding = &#39;CP1250&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You probably need to set the encoding when you see a warning like this: &lt;code&gt;Warning: conversion failure on &#39;&amp;lt;var&amp;gt;&#39; in &#39;mbcsToSbcs&#39;: dot substituted for &amp;lt;var&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another possibility is to use the &lt;code&gt;cairo_pdf&lt;/code&gt; device instead of &lt;code&gt;pdf&lt;/code&gt; (see &lt;a href=&#34;https://github.com/yihui/knitr/issues/436&#34;&gt;#436&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;options(device = function(file, width = 7, height = 7, ...) {
  cairo_pdf(tempfile(), width = width, height = height, ...)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If that fails under Windows, you may also take a look at &lt;a href=&#34;https://github.com/yihui/knitr/issues/527&#34;&gt;#527&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-dingbats-font&#34;&gt;The Dingbats font&lt;/h2&gt;

&lt;p&gt;According to the documentation of &lt;code&gt;pdf()&lt;/code&gt;, the &lt;code&gt;useDingbats&lt;/code&gt; argument can reduce the file size of PDF&amp;rsquo;s which contain small circles. If you are using &lt;strong&gt;knitr&lt;/strong&gt; in RStudio, this option is disabled by default. You may want to enable it by putting &lt;code&gt;pdf.options(useDingbats = TRUE)&lt;/code&gt; in your source document if you have large scatter plots. See &lt;a href=&#34;https://github.com/yihui/knitr/issues/311&#34;&gt;#311&lt;/a&gt; for more comments and discussions.&lt;/p&gt;

&lt;h2 id=&#34;animations&#34;&gt;Animations&lt;/h2&gt;

&lt;p&gt;When the chunk option &lt;code&gt;fig.show=&#39;animate&#39;&lt;/code&gt; and there are multiple plots produced from a code chunk, all plots will be combined to an animation. For LaTeX output, the LaTeX package &lt;strong&gt;animate&lt;/strong&gt; is used to create animations in PDF. For HTML/Markdown output, by default &lt;a href=&#34;http://ffmpeg.org&#34;&gt;FFmpeg&lt;/a&gt; is used to create a &lt;a href=&#34;http://www.webmproject.org&#34;&gt;WebM&lt;/a&gt; video. Note you have to enable the &lt;strong&gt;libvpx&lt;/strong&gt; support when installing FFmpeg. Linux and Windows users can just follow the download links on the FFmpeg website (&lt;strong&gt;libvpx&lt;/strong&gt; has been enabled in the binaries). For OS X users, you can install FFmpeg via &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install ffmpeg --with-libvpx
&lt;/code&gt;&lt;/pre&gt;

        
      </description>
    </item>
    
    <item>
      <title>Beamer</title>
      <link>https://yihui.name/knitr/demo/beamer/</link>
      <pubDate>Thu, 08 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/beamer/</guid>
      <description>
        

&lt;p&gt;It is straightforward to use Sweave or &lt;strong&gt;knitr&lt;/strong&gt; with beamer; the only thing you need to be careful of is you have to add the &lt;code&gt;fragile&lt;/code&gt; option to the frames that contain verbatim code. For LyX users, make sure you use the latest version of LyX (&amp;gt;= 2.1.2), and then you can use the &lt;code&gt;FragileFrame&lt;/code&gt; environment instead of a standard &lt;code&gt;Frame&lt;/code&gt; environment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A minimal beamer example for &lt;strong&gt;knitr&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Rnw source: &lt;a href=&#34;https://github.com/yihui/knitr/blob/master/inst/examples/knitr-beamer.Rnw&#34;&gt;knitr-beamer.Rnw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LyX source: &lt;a href=&#34;https://github.com/yihui/knitr/blob/master/inst/examples/knitr-beamer.lyx&#34;&gt;knitr-beamer.lyx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PDF output: &lt;a href=&#34;https://github.com/yihui/knitr/releases/download/doc/knitr-beamer.pdf&#34;&gt;knitr-beamer.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A simplified version of the above example:

&lt;ul&gt;
&lt;li&gt;Rnw source: &lt;a href=&#34;https://gist.github.com/1803930&#34;&gt;knitr-beamer2.Rnw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;An example of &lt;a href=&#34;http://tex.stackexchange.com/a/46840/9128&#34;&gt;using full-page tikz figures in beamer slides&lt;/a&gt; on StackOverflow&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/2387823&#34;&gt;A knitr source file&lt;/a&gt; for including linguistic notation as graphical elements in ggplot2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One note on the Rnw source for users who came before &lt;strong&gt;knitr&lt;/strong&gt; 0.6 &amp;ndash; in the past I used this in the preamble:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\ifdefined\knitrout
  \renewenvironment{knitrout}{\begin{footnotesize}}{\end{footnotesize}}
\else
\fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will wrap the &lt;strong&gt;knitr&lt;/strong&gt; output in a &lt;code&gt;footnotesize&lt;/code&gt; environment, but since &lt;strong&gt;knitr&lt;/strong&gt; 0.6, a single global option &lt;code&gt;size&lt;/code&gt; will control the font size of the whole chunk, and this trick is no longer needed.&lt;/p&gt;

&lt;h2 id=&#34;how-about-html5-slides&#34;&gt;How about HTML5 slides?&lt;/h2&gt;

&lt;p&gt;You can actually also try HTML slides, which smell fancy and modern. I have a &lt;a href=&#34;https://yihui.name/en/2012/05/how-to-make-html5-slides-with-knitr/&#34;&gt;rough tutorial here&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Code Externalization</title>
      <link>https://yihui.name/knitr/demo/externalization/</link>
      <pubDate>Wed, 07 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/externalization/</guid>
      <description>
        &lt;p&gt;You do not have to put the R code in the input document; with &lt;strong&gt;knitr&lt;/strong&gt;, you can separate your input document with the R script (think the reverse of Stangle).&lt;/p&gt;

&lt;p&gt;There are several advantages of separating the main document with the R script(s), e.g., R code can be reusable across several documents, and you can run the R code continuously in a separate file (if you embed the code in the document, you often have to jump through texts); this feature is especially useful for LyX users, and it saves a huge amount of time since you do not have to re-compile the whole document to see the results; instead, you can tune your R code freely in another R session.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;read_chunk()&lt;/code&gt; was designed for this feature. For example, if the R code is in &lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/113-foo.R&#34;&gt;113-foo.R&lt;/a&gt;, you can use &lt;code&gt;read_chunk(&#39;113-foo.R&#39;)&lt;/code&gt; to read the code into the input document in an early chunk. In the R script, you have to annotate the code with comments of the form &lt;code&gt;## ---- label&lt;/code&gt;, where &lt;code&gt;label&lt;/code&gt; is the chunk label that you use in the report, e.g. if you have a line &lt;code&gt;## ---- test&lt;/code&gt; in the script, you should also have a chunk &lt;code&gt;&amp;lt;&amp;lt;test&amp;gt;&amp;gt;=&lt;/code&gt; in the report, and &lt;strong&gt;knitr&lt;/strong&gt; will match the labels and insert external code.&lt;/p&gt;

&lt;p&gt;It is possible to use multiple external R scripts in an input document (just call &lt;code&gt;read_chunk()&lt;/code&gt; for multiple times), or share a single script across multiple input documents (all of them read this script).&lt;/p&gt;

&lt;p&gt;Note this function should only be used in an &lt;em&gt;uncached&lt;/em&gt; chunk, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;&amp;lt;external-code, cache=FALSE&amp;gt;&amp;gt;=
read_chunk(&#39;foo-bar.R&#39;)
@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the examples #113 in the &lt;a href=&#34;https://github.com/yihui/knitr-examples&#34;&gt;knitr-examples&lt;/a&gt; repo.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>LyX</title>
      <link>https://yihui.name/knitr/demo/lyx/</link>
      <pubDate>Tue, 06 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/lyx/</guid>
      <description>
        

&lt;p&gt;Since LyX 2.0.3, &lt;strong&gt;knitr&lt;/strong&gt; can be used in LyX via a module named &lt;code&gt;Rnw
(knitr)&lt;/code&gt;. See
&lt;a href=&#34;https://github.com/yihui/lyx/raw/master/examples/knitr.lyx&#34;&gt;knitr.lyx&lt;/a&gt; for
a simple example (&lt;a href=&#34;https://bitbucket.org/stat/lyx/downloads/knitr.pdf&#34;&gt;pdf
output&lt;/a&gt;). Just add the
module to your document and install &lt;strong&gt;knitr&lt;/strong&gt; in R; then you are done.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://db.yihui.name/imgur/jEKSh.png&#34; alt=&#34;knitr module in LyX&#34; /&gt;&lt;/p&gt;

&lt;p&gt;An important note to all LyX users: a big trouble with LyX+Sweave is that we
have got too many instructions in the past on how to configure LyX in order
to work with Sweave. Many tutorials are becoming misleading and confusing
(e.g. you no longer need to take care of &lt;code&gt;noweb.sty&lt;/code&gt;). The only up-to-date
source is the &lt;a href=&#34;https://bitbucket.org/stat/lyx/downloads/sweave.pdf&#34;&gt;official LyX manual for
Sweave&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;ubuntu-users&#34;&gt;Ubuntu users&lt;/h2&gt;

&lt;p&gt;To install LyX, you can either check out the source code and compile it by
yourself:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./authgen.sh
./configure
make
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or use the &lt;a href=&#34;https://launchpad.net/~lyx-devel/+archive/release&#34;&gt;PPA&lt;/a&gt; (much
easier):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo add-apt-repository ppa:lyx-devel/release
sudo apt-get update
sudo apt-get install lyx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The one in the official repository is often lagging behind, and this PPA is
up-to-date.&lt;/p&gt;

&lt;h2 id=&#34;other-systems&#34;&gt;Other systems&lt;/h2&gt;

&lt;p&gt;If you use Windows or Mac OS, you can download LyX from &lt;a href=&#34;http://www.lyx.org&#34;&gt;http://www.lyx.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most frequently seen trouble for Windows users is that R is not in &lt;code&gt;PATH&lt;/code&gt;
by default; see the manual above or the &lt;a href=&#34;http://stackoverflow.com/q/9645451/559676&#34;&gt;StackOverflow
post&lt;/a&gt; for the solution.&lt;/p&gt;

&lt;h2 id=&#34;other-languages&#34;&gt;Other languages&lt;/h2&gt;

&lt;p&gt;If you are under Windows and using multibyte characters, you need at least
LyX 2.0.6 and &lt;strong&gt;knitr&lt;/strong&gt; 1.1. If your LyX version is lower than 2.0.6, you
are likely to run into problems due to the file encoding.&lt;/p&gt;

&lt;h2 id=&#34;other-examples&#34;&gt;Other examples&lt;/h2&gt;

&lt;p&gt;There are a couple of LyX examples under the &lt;a href=&#34;https://github.com/yihui/knitr/tree/master/inst/examples&#34;&gt;examples
directory&lt;/a&gt; of the
package repository. Remember to check out the bib files as well if there are
any.&lt;/p&gt;

&lt;p&gt;Below is a short video of using &lt;strong&gt;knitr&lt;/strong&gt; in LyX (no audio at the moment but
I plan to make a full tutorial in the future):&lt;/p&gt;

&lt;div style=&#34;text-align: center;&#34;&gt;&lt;iframe src=&#34;http://player.vimeo.com/video/32948939?title=0&amp;amp;byline=0&amp;amp;portrait=0&#34; width=&#34;600&#34; height=&#34;458&#34; frameborder=&#34;0&#34; webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;http://vimeo.com/32948939&#34;&gt;Using knitr in LyX&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/yihui&#34;&gt;Yihui Xie&lt;/a&gt; on &lt;a href=&#34;http://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;

&lt;h2 id=&#34;some-known-issues&#34;&gt;Some known issues&lt;/h2&gt;

&lt;p&gt;You should not let LyX mark foreign languages, otherwise it may ruin R code
chunks; see &lt;a href=&#34;https://github.com/yihui/knitr/issues/255&#34;&gt;#255&lt;/a&gt; for details.
Below are my language preferences in LyX:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://db.yihui.name/imgur/vkLhP.png&#34; alt=&#34;Do not mark foreign languages&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If your R code has output that contains single quotes, you may &lt;a href=&#34;http://stackoverflow.com/q/12448507/559676&#34;&gt;run into an
error&lt;/a&gt; like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;! Undefined control sequence.
&amp;lt;argument&amp;gt; ^^M&#39;
               ^^M
l.8 \end{verbatim}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fix it, you need to update &lt;strong&gt;knitr&lt;/strong&gt; to at least version 1.2.&lt;/p&gt;

&lt;p&gt;For Mac OS X users, your OS has a &lt;a href=&#34;http://www.lyx.org/trac/ticket/8537#comment:19&#34;&gt;weird
bug&lt;/a&gt; that makes R fail to
set up the locale when started from LyX. As a result, R cannot process
multi-byte characters. You have to tell your locale info to R manually, e.g.
in &lt;code&gt;~/.Rprofile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cat(&#39;
Sys.setlocale(, &amp;quot;en_US.UTF-8&amp;quot;)
&#39;, file = &#39;~/.Rprofile&#39;, append = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here &lt;code&gt;en_US.UTF-8&lt;/code&gt; is just one possible locale. Your OS might be using other
languages. To check what is the real locale, run &lt;code&gt;Sys.getlocale()&lt;/code&gt; in a
normal R session (e.g. start R from the terminal).&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Manual</title>
      <link>https://yihui.name/knitr/demo/manual/</link>
      <pubDate>Mon, 05 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/manual/</guid>
      <description>
        &lt;p&gt;The package manual itself can be a good example demonstrating most of the features in &lt;strong&gt;knitr&lt;/strong&gt;. It was actually written in LyX (&lt;a href=&#34;https://github.com/yihui/knitr/blob/master/inst/examples/knitr-manual.lyx&#34;&gt;knitr-manual.lyx&lt;/a&gt;), and you can use the exported Rnw source &lt;a href=&#34;https://github.com/yihui/knitr/blob/master/inst/examples/knitr-manual.Rnw&#34;&gt;knitr-manual.Rnw&lt;/a&gt; to produce the PDF output &lt;a href=&#34;https://github.com/yihui/knitr/releases/download/doc/knitr-manual.pdf&#34;&gt;knitr-manual.pdf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Three add-on packages are required to compile the manual: &lt;strong&gt;rgl&lt;/strong&gt;, &lt;strong&gt;animation&lt;/strong&gt; and &lt;strong&gt;tikzDevice&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&#34;../lyx/&#34;&gt;LyX page&lt;/a&gt; for instructions on how to use &lt;strong&gt;knitr&lt;/strong&gt; with LyX.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Cache</title>
      <link>https://yihui.name/knitr/demo/cache/</link>
      <pubDate>Sun, 04 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/cache/</guid>
      <description>
        

&lt;p&gt;We can use the chunk option &lt;code&gt;cache=TRUE&lt;/code&gt; to enable cache, and the option &lt;code&gt;cache.path&lt;/code&gt; can be used to set the cache directory. See the &lt;a href=&#34;../../options/&#34;&gt;options&lt;/a&gt; page.&lt;/p&gt;

&lt;h2 id=&#34;cache-examples&#34;&gt;Cache examples&lt;/h2&gt;

&lt;p&gt;The cache feature is used extensively in many of my documents, e.g. you can find it in the &lt;strong&gt;knitr&lt;/strong&gt; &lt;a href=&#34;../manual/&#34;&gt;main manual&lt;/a&gt; or its &lt;a href=&#34;http://yihui.name/knitr/demo/graphics/&#34;&gt;graphics manual&lt;/a&gt;. Here are a few more examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;basic examples

&lt;ul&gt;
&lt;li&gt;cache large data: &lt;a href=&#34;https://github.com/yihui/knitr-examples/raw/master/056-huge-plot.Rmd&#34;&gt;056-huge-plot.Rmd&lt;/a&gt; (&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/056-huge-plot.md&#34;&gt;output&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;an example using the Rtex syntax: &lt;a href=&#34;https://github.com/yihui/knitr/blob/master/inst/examples/knitr-latex.Rtex&#34;&gt;knitr-latex.Rtex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;automatic dependencies

&lt;ul&gt;
&lt;li&gt;Rnw source: &lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/017-auto-dependson.Rnw&#34;&gt;knitr-dependson.Rnw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;with the chunk option &lt;code&gt;autodep=TRUE&lt;/code&gt; and the function &lt;code&gt;dep_auto()&lt;/code&gt;, &lt;strong&gt;knitr&lt;/strong&gt; can figure out the dependencies among chunks automatically, which may save some manual efforts to specify the &lt;code&gt;dependson&lt;/code&gt; option&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;important-notes&#34;&gt;Important notes&lt;/h2&gt;

&lt;p&gt;You have to read the section on cache in the &lt;a href=&#34;https://github.com/yihui/knitr/releases/download/doc/knitr-manual.pdf&#34;&gt;main manual&lt;/a&gt; very carefully to understand when cache will be rebuilt and which chunks should not be cached.&lt;/p&gt;

&lt;p&gt;Let me repeat the three factors that can affect cache (any change on them will invalidate old cache):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;all chunk options except &lt;code&gt;include&lt;/code&gt;; e.g. change &lt;code&gt;tidy=TRUE&lt;/code&gt; to &lt;code&gt;FALSE&lt;/code&gt; will break the old cache, but changing &lt;code&gt;include&lt;/code&gt; will not&lt;/li&gt;
&lt;li&gt;R code in a chunk; a tiny change in the R code will lead to removal of old cache, even if it is a change of a space or a blank line&lt;/li&gt;
&lt;li&gt;the R option &lt;code&gt;width&lt;/code&gt; (&lt;code&gt;getOption(&#39;width&#39;)&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is extremely important to note that usually a chunk that has side-effects should &lt;em&gt;not&lt;/em&gt; be cached. Although &lt;strong&gt;knitr&lt;/strong&gt; tries to retain the side-effects from &lt;code&gt;print()&lt;/code&gt;, there are still other side-effects that are not preserved. Here are some cases that you must not use cache for a chunk:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;setting R options like &lt;code&gt;options(&#39;width&#39;)&lt;/code&gt; or &lt;code&gt;pdf.options()&lt;/code&gt; or any other options in &lt;strong&gt;knitr&lt;/strong&gt; like &lt;code&gt;opts_chunk$set()&lt;/code&gt;, &lt;code&gt;opts_knit$set()&lt;/code&gt; and &lt;code&gt;knit_hooks$set()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;loading packages via &lt;code&gt;library()&lt;/code&gt; in a cached chunk and these packages will be used by uncached chunks (it is entirely OK to load packages in a cached chunk and use them only in cached chunks because &lt;strong&gt;knitr&lt;/strong&gt; saves the list of packages for cached chunks, but uncached chunks are unable to know which packages are loaded in previous cached chunks)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Otherwise next time the chunk will be skipped and all the settings in it will be ignored. You have to use &lt;code&gt;cache=FALSE&lt;/code&gt; explicitly for these chunks.&lt;/p&gt;

&lt;p&gt;The functions &lt;code&gt;source()&lt;/code&gt; and &lt;code&gt;setGeneric()&lt;/code&gt; have side effects of creating objects in the global environment even if the code is evaluated in a local environment. Before &lt;strong&gt;knitr&lt;/strong&gt; v0.4, it was unable to cache these global objects (e.g. issue &lt;a href=&#34;https://github.com/yihui/knitr/issues/138&#34;&gt;#138&lt;/a&gt;), but since v0.4, they can be cached as well because &lt;strong&gt;knitr&lt;/strong&gt; checks newly created objects in &lt;code&gt;globalenv()&lt;/code&gt; and save them as well.&lt;/p&gt;

&lt;p&gt;Although the list of packages used in cached chunks is saved, this is not a perfect way of caching package names: if you loaded a package but removed it later, &lt;strong&gt;knitr&lt;/strong&gt; will be unable to know it (&lt;strong&gt;knitr&lt;/strong&gt; is only able to capture newly loaded packages). You have to manually edit the &lt;code&gt;__packages&lt;/code&gt; file under the cache directory as described in &lt;a href=&#34;https://github.com/yihui/knitr/issues/382&#34;&gt;#382&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;even-more-stuff-for-cache&#34;&gt;Even more stuff for cache?&lt;/h2&gt;

&lt;p&gt;While the above objects seem reasonable to affect cache, reproducible research may be even more rigorous in the sense that cache can be invalidated by other changes. One typical example is the version of software; it is not impossible for two different versions of R to give you different results. In this case, we may set&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;opts_chunk$set(cache.extra = R.version.string)
opts_chunk$set(cache.extra = R.version) # or even consider platform
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so the cached results are only applicable to a specific version of R. When you upgrade R and recompile the document, all the results will be re-computed.&lt;/p&gt;

&lt;p&gt;Similarly you can put more variables into this option so that the cache is preserved only given environments. Here is an ambitious example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## cache is only valid with a specific version of R and session info
## cache will be kept for at most a month (re-compute the next month)
opts_chunk$set(cache.extra = list(
  R.version, sessionInfo(), format(Sys.Date(), &#39;%Y-%m&#39;)
))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The issue &lt;a href=&#34;https://github.com/yihui/knitr/issues/238&#34;&gt;#238&lt;/a&gt; shows another good use of this option: the cache is associated with the file modification time, i.e. when the data file is modified, the cache will be rebuilt automatically.&lt;/p&gt;

&lt;p&gt;Note you can actually use any option name other than &lt;code&gt;cache.extra&lt;/code&gt; to introduce more objects into the cache condition, e.g. you can call it &lt;code&gt;cache.validation&lt;/code&gt;. The reason is that all chunk options are taken into account when validating the cache.&lt;/p&gt;

&lt;h2 id=&#34;associate-cache-directory-with-the-input-filename&#34;&gt;Associate cache directory with the input filename&lt;/h2&gt;

&lt;p&gt;Sometimes we may want to use different cache directories for different input files by default, and there is one solution in issue &lt;a href=&#34;https://github.com/yihui/knitr/issues/234&#34;&gt;#234&lt;/a&gt;. However, I still recommend you to do this setting inside your source document to make it self-contained (use &lt;code&gt;opts_chunk$set(cache.path = ...)&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&#34;more-granular-cache&#34;&gt;More granular cache&lt;/h2&gt;

&lt;p&gt;Besides &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;FALSE&lt;/code&gt; for the chunk option &lt;code&gt;cache&lt;/code&gt;, advanced users can
also consider more granular cache by using numeric values for &lt;code&gt;cache = 0, 1,
2, 3&lt;/code&gt;: &lt;code&gt;0&lt;/code&gt; means &lt;code&gt;FALSE&lt;/code&gt;, and &lt;code&gt;3&lt;/code&gt; is equivalent to &lt;code&gt;TRUE&lt;/code&gt;. For &lt;code&gt;cache = 1&lt;/code&gt;,
the results of the computation (from &lt;code&gt;evaluate::evaluate()&lt;/code&gt;) are loaded from
the cache, so the code is not evaluated again, but everything else is still
executed, such the output hooks and saving recorded plots to files. For
&lt;code&gt;cache = 2&lt;/code&gt;, it is very similar to &lt;code&gt;1&lt;/code&gt;, and the only difference is that the
recorded plots will not be resaved to files when the plot files already
exist, which might save some time when the plots are big. It is recommended
to use &lt;code&gt;cache = 2&lt;/code&gt; instead of &lt;code&gt;1&lt;/code&gt;, because there is no guarantee that
recorded plots in a previous R session can be safely resaved in another R
session, or using another version of R.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;cache = 1, 2&lt;/code&gt;, only a few chunk options affect the cache; see
&lt;code&gt;knitr:::cache1.opts&lt;/code&gt; and &lt;code&gt;knitr:::cache2.opts&lt;/code&gt; for the option names.
Basically, the cache will not be invalidated if a chunk option that does not
affect the code evaluation is changed. For example, we change &lt;code&gt;echo&lt;/code&gt; from
&lt;code&gt;TRUE&lt;/code&gt; to &lt;code&gt;FALSE&lt;/code&gt;, or set &lt;code&gt;fig.cap = &#39;a new caption&#39;&lt;/code&gt;; however, if we change
&lt;code&gt;eval&lt;/code&gt; from &lt;code&gt;TRUE&lt;/code&gt; to &lt;code&gt;FALSE&lt;/code&gt;, or &lt;code&gt;cache.path=&#39;foo/&#39;&lt;/code&gt; to &lt;code&gt;&#39;bar/&#39;&lt;/code&gt;, the cache
has to be rebuilt.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&#34;https://github.com/yihui/knitr-examples/&#34;&gt;example #101&lt;/a&gt;
(&lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/101-cache-levels.md&#34;&gt;output&lt;/a&gt;)
for some examples.&lt;/p&gt;

&lt;p&gt;In this way, we can separate the computing from document output rendering,
and it can be useful to tweak the output without breaking the cache. See
&lt;a href=&#34;https://github.com/yihui/knitr/issues/396&#34;&gt;#396&lt;/a&gt; and
&lt;a href=&#34;https://github.com/yihui/knitr/issues/536&#34;&gt;#536&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;reproducibility-with-rng&#34;&gt;Reproducibility with RNG&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Knitr&lt;/strong&gt; also caches &lt;code&gt;.Random.seed&lt;/code&gt; and it is restored before the evaluation of each chunk to maintain reproducibility of chunks which involve with random number generation (RNG). However, there is a problem here. Suppose chunk A and B have been cached; now if we insert a chunk C between A and B (all three chunks have RNG in them), in theory B should be updated because RNG modifies &lt;code&gt;.Random.seed&lt;/code&gt; as a side-effect, but in fact B will not be updated; in other words, the reproducibility of B is bogus.&lt;/p&gt;

&lt;p&gt;To guarantee reproducibility with RNG, we need to associate &lt;code&gt;.Random.seed&lt;/code&gt; with cache; whenever it is modified, the chunk must be updated. It is easy to do so by using an &lt;em&gt;unevaluated&lt;/em&gt; R expression in the &lt;code&gt;cache.extra&lt;/code&gt; option, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;opts_chunk$set(cache.extra = rand_seed)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;code&gt;?rand_seed&lt;/code&gt; (it is an unevaluated R expression). In this case, each chunk will first check if &lt;code&gt;.Random.seed&lt;/code&gt; has been changed since the last run; a different &lt;code&gt;.Random.seed&lt;/code&gt; will force the current chunk to rebuild cache.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Minimal examples</title>
      <link>https://yihui.name/knitr/demo/minimal/</link>
      <pubDate>Sat, 03 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://yihui.name/knitr/demo/minimal/</guid>
      <description>
        

&lt;p&gt;For beginners, it is probably a good idea to start with some minimal examples; here I provide a few examples for Rnw, LaTeX, Markdown and HTML, respectively.&lt;/p&gt;

&lt;h2 id=&#34;how-is-a-report-generated-from-r-code&#34;&gt;How is a report generated from R code&lt;/h2&gt;

&lt;p&gt;Regardless of which format you use, the basic idea is the same: &lt;strong&gt;knitr&lt;/strong&gt; extracts R code in the input document, evaluates it and writes the results to the output document. There are two types of R code: chunks (code as separate paragraphs) and inline R code. For example, here we show a code chunk (using traditional Sweave syntax):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;Example text outside R code here; we know the value of
pi is \Sexpr{pi}.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;&amp;lt;my-label, eval=TRUE, dev=&#39;png&#39;&amp;gt;&amp;gt;=
set.seed(1213)  # for reproducibility
x = cumsum(rnorm(100))
mean(x)  # mean of x
plot(x, type = &#39;l&#39;)  # Brownian motion
@
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;Other text outside R code here.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After weaving this chunk, we get the output as below. Compare them and you will realize the inline code &lt;code&gt;\Sexpr{pi}&lt;/code&gt; is replaced by the value of &lt;code&gt;pi&lt;/code&gt;, and the code chunk is also evaluated &amp;ndash; numerical results are printed and plots are inserted in the output as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;Example text outside R code here; we know the value of
pi is 3.1415926.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(1213)  # for reproducibility
x = cumsum(rnorm(100))
mean(x)  # mean of x
## [1] -1.939758
plot(x, type = &#39;l&#39;)  # Brownian motion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://db.yihui.name/imgur/ODApG.png&#34; alt=&#34;knitr graphics output&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;Other text outside R code here.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now hopefully you have got an idea of how automatic report generation works. There are many options of which we can make use to tune the results, for example, we can use &lt;code&gt;echo=FALSE&lt;/code&gt; to hide the R souce code (usually you do not want R code to appear in a final report, unless you are writing a tutorial on R), or &lt;code&gt;results=&#39;hide&#39;&lt;/code&gt; to hide the printed results (e.g. you will not see &lt;code&gt;## [1] -1.939758&lt;/code&gt; above if you use this option), or control the format, size and alignment of plots. Beside local chunk options which you write between &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;, you can also set options globally like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;knitr::opts_chunk$set(
  echo = FALSE, fig.path = &#39;myproject/plot-&#39;, cache = TRUE
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once options are set globally, all the following chunks will be affected by these options, so if you use an option frequently in many chunks, you may want to set it globally.&lt;/p&gt;

&lt;p&gt;The advantage of using &lt;strong&gt;knitr&lt;/strong&gt; is obvious: you only maintain the source code, and whenever you want a report, you just knit the source code, and everything will be generated automatically (tables, plots and numbers in lines). There is no need to manually copy and paste anything. Next time if you data source is changed, you simply run the process again, and all results can be updated. Let computers do the tedious job, because this is what they are good at. Humans should focus on other jobs like the statistical analysis and organization of the report.&lt;/p&gt;

&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;

&lt;p&gt;Two main differences among different file formats are: they use different syntax to wrap up R code in the input document (see &lt;a href=&#34;../../patterns&#34;&gt;patterns&lt;/a&gt;), and the results returned from R are marked up according to the syntax of the output document (see &lt;a href=&#34;../../hooks&#34;&gt;hooks&lt;/a&gt;). For instance, Rnw uses &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;, and HTML uses &lt;code&gt;&amp;lt;--!begin.rcode&lt;/code&gt; and &lt;code&gt;end.rcode--&amp;gt;&lt;/code&gt; for the input; plots will be put in &lt;code&gt;\includegraphics{...}&lt;/code&gt; for LaTeX output, and in &lt;code&gt;&amp;lt;img src=...&amp;gt;&lt;/code&gt; for HTML output.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rnw

&lt;ul&gt;
&lt;li&gt;Rnw source: &lt;a href=&#34;https://github.com/yihui/knitr/blob/master/inst/examples/knitr-minimal.Rnw&#34;&gt;knitr-minimal.Rnw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PDF output: &lt;a href=&#34;https://github.com/yihui/knitr/releases/download/doc/knitr-minimal.pdf&#34;&gt;knitr-minimal.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a more minimal &lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/002-minimal.Rnw&#34;&gt;002-minimal.Rnw&lt;/a&gt; (recommended for absolute beginners)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Markdown

&lt;ul&gt;
&lt;li&gt;example 1: &lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/001-minimal.Rmd&#34;&gt;001-minimal.Rmd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;output: &lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/001-minimal.md&#34;&gt;001-minimal.md&lt;/a&gt; (GitHub does the job of parsing the md file to HTML)&lt;/li&gt;
&lt;li&gt;example 2: &lt;a href=&#34;https://github.com/yihui/knitr/blob/master/inst/examples/knitr-minimal.Rmd&#34;&gt;knitr-minimal.Rmd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;output: &lt;a href=&#34;https://github.com/yihui/knitr/blob/master/inst/examples/knitr-minimal.md&#34;&gt;knitr-minimal.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;HTML

&lt;ul&gt;
&lt;li&gt;html source: &lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/003-minimal.Rhtml&#34;&gt;knitr-minimal.Rhtml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;output: &lt;a href=&#34;https://rawgit.com/yihui/knitr-examples/master/003-minimal.html&#34;&gt;knitr-minimal.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;LaTeX

&lt;ul&gt;
&lt;li&gt;tex source: &lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/005-latex.Rtex&#34;&gt;005-latex.Rtex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;reStructuredText

&lt;ul&gt;
&lt;li&gt;source: &lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/006-minimal.Rrst&#34;&gt;knitr-minimal.Rrst&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;output: &lt;a href=&#34;https://github.com/yihui/knitr-examples/blob/master/006-minimal.rst&#34;&gt;knitr-minimal.rst&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can run &lt;code&gt;knit()&lt;/code&gt; to knit the input file, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(knitr)
knit(&#39;knitr-minimal.Rnw&#39;)
knit(&#39;knitr-minimal.Rhtml&#39;)
knit(&#39;knitr-minimal.Rmd&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note for the HTML demo, you need to install the &lt;strong&gt;rgl&lt;/strong&gt; package to get the snapshot in the output.&lt;/p&gt;

&lt;h2 id=&#34;some-comments&#34;&gt;Some comments&lt;/h2&gt;

&lt;p&gt;One consideration in defining the default syntax for these files is that we should try not to break the syntax of other software systems, e.g. for LaTeX and HTML, the chunk options are written in comments, so the original document is still a valid TeX or HTML document. Unfortunately the original author(s) of literate programming did not seem to care about this issue at all, and invented the &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;=&lt;/code&gt; + &lt;code&gt;@&lt;/code&gt; syntax; then Sweave added more pseudo-LaTeX commands like &lt;code&gt;\SweaveOpts&lt;/code&gt; and &lt;code&gt;\Sexpr&lt;/code&gt;; we cannot do much about them since they have been used for many years, and we are likely to be in bigger troubles if we break these rules. The LaTeX example above only serves as an example of how I would have defined the syntax, and you may not really want to follow it.&lt;/p&gt;

&lt;p&gt;As a final side note, the extension &lt;code&gt;Rnw&lt;/code&gt; is a combination of &lt;code&gt;R&lt;/code&gt; + &lt;code&gt;nw&lt;/code&gt; where &lt;code&gt;nw&lt;/code&gt; stands for &lt;code&gt;Noweb&lt;/code&gt; (= &lt;code&gt;No&lt;/code&gt; + &lt;code&gt;web&lt;/code&gt;), and &lt;code&gt;WEB&lt;/code&gt; was coined by Donald Knuth to denote the idea of weaving documents. Today probably everybody will think of WWW when seeing the word &lt;code&gt;web&lt;/code&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
